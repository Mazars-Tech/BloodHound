import { AxiosInstance } from 'axios';
import * as types from './types';
import { BasicResponse, CreateAuthTokenResponse, ListAuthTokensResponse, PaginatedResponse, PostureResponse, SavedQuery } from './responses';
declare class BHEAPIClient {
    baseClient: AxiosInstance;
    constructor(config: types.RequestOptions);
    health: (options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    version: (options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getDatapipeStatus: (options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    searchHandler: (keyword: string, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    cypherSearch: (query: string, includeProperties?: boolean, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getUserSavedQueries: (options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<PaginatedResponse<SavedQuery[]>, any>>;
    createUserQuery: (payload: types.CreateUserQueryRequest, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<BasicResponse<SavedQuery>, any>>;
    deleteUserQuery: (queryId: number, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getAvailableDomains: (options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getAuditLogs: (options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    createAssetGroup: (assetGroup: types.CreateAssetGroupRequest, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getAssetGroup: (assetGroupId: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    deleteAssetGroup: (assetGroupId: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    updateAssetGroup: (assetGroupId: string, assetGroup: types.UpdateAssetGroupRequest, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    updateAssetGroupSelector: (assetGroupId: string, selectorChangeset: {
        selector_name: string;
        sid: string;
        action: 'add' | 'remove';
    }[], options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    deleteAssetGroupSelector: (assetGroupId: string, selectorId: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    listAssetGroupCollections: (assetGroupId: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    listAssetGroups: (options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getComboTreeGraph: (domainId: string, nodeId?: string | null, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getLatestTierZeroComboNode: (domainId: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getAssetGroupComboNode: (assetGroupId: string, domainsid?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<BasicResponse<types.FlatGraphResponse>, any>>;
    getADQualityStats: (domainId: string, start?: Date, end?: Date, limit?: number, sort_by?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getAzureQualityStats: (tenantId: string, start?: Date, end?: Date, limit?: number, sort_by?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getPlatformQualityStats: (platformtype: string, start?: Date, end?: Date, limit?: number, sort_by?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getPostureStats: (from: Date, to: Date, domainSID?: string, sortBy?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<PostureResponse, any>>;
    ingestData: (options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getPathfindingResult: (startNode: string, endNode: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getSearchResult: (query: string, searchType: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getClients: (skip?: number, limit?: number, hydrateDomains?: boolean, hydrateOUs?: boolean, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    createClient: (client: types.CreateSharpHoundClientRequest | types.CreateAzureHoundClientRequest, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getClient: (clientId: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    updateClient: (clientId: string, client: types.UpdateSharpHoundClientRequest | types.UpdateAzureHoundClientRequest, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    regenerateClientToken: (clientId: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    deleteClient: (clientId: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getClientCompletedJobs: (clientId: string, skip: number, limit: number, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    createScheduledJob: (clientId: string, scheduledJob: types.CreateScheduledJobRequest, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getFinishedJobs: (skip: number, limit: number, hydrateDomains?: boolean, hydrateOUs?: boolean, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getEvents: (hydrateDomains?: boolean, hydrateOUs?: boolean, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getEvent: (eventId: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    createEvent: (event: types.CreateSharpHoundEventRequest | types.CreateAzureHoundEventRequest, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    updateEvent: (eventId: string, event: types.UpdateSharpHoundEventRequest | types.UpdateAzureHoundEventRequest, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    deleteEvent: (eventId: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    listFileIngestJobs: (skip?: number, limit?: number, sortBy?: string) => Promise<import("axios").AxiosResponse<any, any>>;
    startFileIngest: () => Promise<import("axios").AxiosResponse<any, any>>;
    uploadFileToIngestJob: (ingestId: string, json: any) => Promise<import("axios").AxiosResponse<any, any>>;
    endFileIngest: (ingestId: string) => Promise<import("axios").AxiosResponse<any, any>>;
    getJobs: (hydrateDomains?: boolean, hydrateOUs?: boolean, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getJob: (jobId: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    cancelScheduledJob: (jobId: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getJobLogFile: (jobId: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getRiskDetails: (domainId: string, finding: string, skip: number, limit: number, filterAccepted?: boolean, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getRiskSparklineValues: (domainId: string, finding: string, from?: Date, to?: Date, sortBy?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    changeRiskAcceptance: (attackPathId: string, riskType: string, accepted: boolean, acceptUntil?: Date, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    genRisks: (options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getAvailableRiskTypes: (domainId: string, sortBy?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    exportRiskFindings: (domainId: string, findingType: string, accepted?: boolean, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    login: (credentials: types.LoginRequest, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<types.LoginResponse, any>>;
    getSelf: (options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    logout: (options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    listSAMLSignOnEndpoints: (options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    listSAMLProviders: (options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getSAMLProvider: (samlProviderId: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    createSAMLProvider: (data: {
        name: string;
        displayName: string;
        signingCertificate: string;
        issuerUri: string;
        singleSignOnUri: string;
        principalAttributeMappings: string[];
    }, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    createSAMLProviderFromFile: (data: {
        name: string;
        metadata: File;
    }, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    validateSAMLProvider: (data: {
        name: string;
        displayName: string;
        signingCertificate: string;
        issuerUri: string;
        singleSignOnUri: string;
        principalAttributeMappings: string[];
    }, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    deleteSAMLProvider: (SAMLProviderId: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    permissionList: (options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    permissionGet: (permissionId: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getRoles: (options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getRole: (roleId: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getUserTokens: (userId: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<ListAuthTokensResponse, any>>;
    createUserToken: (userId: string, tokenName: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<CreateAuthTokenResponse, any>>;
    deleteUserToken: (tokenId: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    listUsers: (options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getUser: (userId: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    createUser: (user: {
        firstName: string;
        lastName: string;
        emailAddress: string;
        principal: string;
        roles: number[];
        SAMLProviderId?: string;
        password?: string;
        needsPasswordReset?: boolean;
    }, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    updateUser: (userId: string, user: {
        firstName: string;
        lastName: string;
        emailAddress: string;
        principal: string;
        roles: number[];
        SAMLProviderId?: string;
        is_disabled?: boolean;
    }, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    deleteUser: (userId: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    expireUserAuthSecret: (userId: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    putUserAuthSecret: (userId: string, userSecret: types.PutUserAuthSecretRequest, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    enrollMFA: (userId: string, data: {
        secret: string;
    }, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    disenrollMFA: (userId: string, data: {
        secret: string;
    }, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getMFAActivationStatus: (userId: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    activateMFA: (userId: string, data: {
        otp: string;
    }, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    acceptEULA: (options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getFeatureFlags: (options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    toggleFeatureFlag: (flagId: string | number, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getCollectors: (collectorType: 'sharphound' | 'azurehound', options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<types.GetCollectorsResponse, any>>;
    downloadCollector: (collectorType: 'sharphound' | 'azurehound', version: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    downloadCollectorChecksum: (collectorType: 'sharphound' | 'azurehound', version: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getAZEntityInfoV2: (entityType: string, id: string, relatedEntityType?: string, counts?: boolean, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getBaseV2: (id: string, counts?: boolean, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getBaseControllablesV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getBaseControllersV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getComputerV2: (id: string, counts?: boolean, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getComputerSessionsV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getComputerAdminUsersV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getComputerRDPUsersV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getComputerDCOMUsersV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getComputerPSRemoteUsersV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getComputerSQLAdminsV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getComputerGroupMembershipV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getComputerAdminRightsV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getComputerRDPRightsV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getComputerDCOMRightsV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getComputerPSRemoteRightsV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getComputerConstrainedUsersV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getComputerConstrainedDelegationRightsV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getComputerControllersV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getComputerControllablesV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getDomainV2: (id: string, counts?: boolean, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getDomainUsersV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getDomainGroupsV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getDomainComputersV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getDomainOUsV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getDomainGPOsV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getDomainForeignUsersV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getDomainForeignGroupsV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getDomainForeignAdminsV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getDomainForeignGPOControllersV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getDomainInboundTrustsV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getDomainOutboundTrustsV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getDomainControllersV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getDomainDCSyncersV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getDomainLinkedGPOsV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getGPOV2: (id: string, counts?: boolean, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getGPOOUsV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getGPOComputersV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getGPOUsersV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getGPOControllersV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getGPOTierZeroV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getOUV2: (id: string, counts?: boolean, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getOUGPOsV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getOUUsersV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getOUGroupsV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getOUComputersV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getUserV2: (id: string, counts?: boolean, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getUserSessionsV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getUserMembershipsV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getUserAdminRightsV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getUserRDPRightsV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getUserDCOMRightsV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getUserPSRemoteRightsV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getUserSQLAdminRightsV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getUserConstrainedDelegationRightsV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getUserControllersV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getUserControllablesV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getGroupV2: (id: string, counts?: boolean, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getGroupSessionsV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getGroupMembersV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getGroupMembershipsV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getGroupAdminRightsV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getGroupRDPRightsV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getGroupDCOMRightsV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getGroupPSRemoteRightsV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getGroupControllablesV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getGroupControllersV2: (id: string, skip?: number, limit?: number, type?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getMetaV2: (id: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<any, any>>;
    getShortestPathV2: (startNode: string, endNode: string, relationshipKinds?: string, options?: types.RequestOptions) => Promise<import("axios").AxiosResponse<types.GraphResponse, any>>;
}
export default BHEAPIClient;
